diff -ruN pc/src/lib/wifi/dep.list world/src/lib/wifi_ath9k/dep.list
--- pc/src/lib/wifi/dep.list	2023-01-15 14:04:13.680040326 +0000
+++ world/src/lib/wifi_ath9k/dep.list	1970-01-01 00:00:00.000000000 +0000
@@ -1,352 +0,0 @@
-arch/x86/include/asm/vdso/processor.h
-certs/common.h
-crypto/internal.h
-drivers/net/wireless/intel/iwlwifi/dvm/agn.h
-drivers/net/wireless/intel/iwlwifi/dvm/calib.h
-drivers/net/wireless/intel/iwlwifi/dvm/commands.h
-drivers/net/wireless/intel/iwlwifi/dvm/dev.h
-drivers/net/wireless/intel/iwlwifi/dvm/led.h
-drivers/net/wireless/intel/iwlwifi/dvm/power.h
-drivers/net/wireless/intel/iwlwifi/dvm/rs.h
-drivers/net/wireless/intel/iwlwifi/dvm/tt.h
-drivers/net/wireless/intel/iwlwifi/fw/acpi.h
-drivers/net/wireless/intel/iwlwifi/fw/api/alive.h
-drivers/net/wireless/intel/iwlwifi/fw/api/binding.h
-drivers/net/wireless/intel/iwlwifi/fw/api/cmdhdr.h
-drivers/net/wireless/intel/iwlwifi/fw/api/coex.h
-drivers/net/wireless/intel/iwlwifi/fw/api/commands.h
-drivers/net/wireless/intel/iwlwifi/fw/api/config.h
-drivers/net/wireless/intel/iwlwifi/fw/api/context.h
-drivers/net/wireless/intel/iwlwifi/fw/api/d3.h
-drivers/net/wireless/intel/iwlwifi/fw/api/datapath.h
-drivers/net/wireless/intel/iwlwifi/fw/api/dbg-tlv.h
-drivers/net/wireless/intel/iwlwifi/fw/api/debug.h
-drivers/net/wireless/intel/iwlwifi/fw/api/filter.h
-drivers/net/wireless/intel/iwlwifi/fw/api/led.h
-drivers/net/wireless/intel/iwlwifi/fw/api/location.h
-drivers/net/wireless/intel/iwlwifi/fw/api/mac-cfg.h
-drivers/net/wireless/intel/iwlwifi/fw/api/mac.h
-drivers/net/wireless/intel/iwlwifi/fw/api/nvm-reg.h
-drivers/net/wireless/intel/iwlwifi/fw/api/offload.h
-drivers/net/wireless/intel/iwlwifi/fw/api/paging.h
-drivers/net/wireless/intel/iwlwifi/fw/api/phy-ctxt.h
-drivers/net/wireless/intel/iwlwifi/fw/api/phy.h
-drivers/net/wireless/intel/iwlwifi/fw/api/power.h
-drivers/net/wireless/intel/iwlwifi/fw/api/rfi.h
-drivers/net/wireless/intel/iwlwifi/fw/api/rs.h
-drivers/net/wireless/intel/iwlwifi/fw/api/rx.h
-drivers/net/wireless/intel/iwlwifi/fw/api/scan.h
-drivers/net/wireless/intel/iwlwifi/fw/api/sf.h
-drivers/net/wireless/intel/iwlwifi/fw/api/soc.h
-drivers/net/wireless/intel/iwlwifi/fw/api/sta.h
-drivers/net/wireless/intel/iwlwifi/fw/api/stats.h
-drivers/net/wireless/intel/iwlwifi/fw/api/tdls.h
-drivers/net/wireless/intel/iwlwifi/fw/api/time-event.h
-drivers/net/wireless/intel/iwlwifi/fw/api/tx.h
-drivers/net/wireless/intel/iwlwifi/fw/api/txq.h
-drivers/net/wireless/intel/iwlwifi/fw/dbg.h
-drivers/net/wireless/intel/iwlwifi/fw/debugfs.h
-drivers/net/wireless/intel/iwlwifi/fw/error-dump.h
-drivers/net/wireless/intel/iwlwifi/fw/file.h
-drivers/net/wireless/intel/iwlwifi/fw/img.h
-drivers/net/wireless/intel/iwlwifi/fw/notif-wait.h
-drivers/net/wireless/intel/iwlwifi/fw/pnvm.h
-drivers/net/wireless/intel/iwlwifi/fw/runtime.h
-drivers/net/wireless/intel/iwlwifi/fw/uefi.h
-drivers/net/wireless/intel/iwlwifi/iwl-agn-hw.h
-drivers/net/wireless/intel/iwlwifi/iwl-config.h
-drivers/net/wireless/intel/iwlwifi/iwl-context-info-gen3.h
-drivers/net/wireless/intel/iwlwifi/iwl-context-info.h
-drivers/net/wireless/intel/iwlwifi/iwl-csr.h
-drivers/net/wireless/intel/iwlwifi/iwl-dbg-tlv.h
-drivers/net/wireless/intel/iwlwifi/iwl-debug.h
-drivers/net/wireless/intel/iwlwifi/iwl-devtrace-data.h
-drivers/net/wireless/intel/iwlwifi/iwl-devtrace-io.h
-drivers/net/wireless/intel/iwlwifi/iwl-devtrace-iwlwifi.h
-drivers/net/wireless/intel/iwlwifi/iwl-devtrace-msg.h
-drivers/net/wireless/intel/iwlwifi/iwl-devtrace-ucode.h
-drivers/net/wireless/intel/iwlwifi/iwl-devtrace.h
-drivers/net/wireless/intel/iwlwifi/iwl-drv.h
-drivers/net/wireless/intel/iwlwifi/iwl-eeprom-parse.h
-drivers/net/wireless/intel/iwlwifi/iwl-eeprom-read.h
-drivers/net/wireless/intel/iwlwifi/iwl-fh.h
-drivers/net/wireless/intel/iwlwifi/iwl-io.h
-drivers/net/wireless/intel/iwlwifi/iwl-modparams.h
-drivers/net/wireless/intel/iwlwifi/iwl-nvm-parse.h
-drivers/net/wireless/intel/iwlwifi/iwl-op-mode.h
-drivers/net/wireless/intel/iwlwifi/iwl-phy-db.h
-drivers/net/wireless/intel/iwlwifi/iwl-prph.h
-drivers/net/wireless/intel/iwlwifi/iwl-scd.h
-drivers/net/wireless/intel/iwlwifi/iwl-trans.h
-drivers/net/wireless/intel/iwlwifi/mvm/constants.h
-drivers/net/wireless/intel/iwlwifi/mvm/debugfs.h
-drivers/net/wireless/intel/iwlwifi/mvm/fw-api.h
-drivers/net/wireless/intel/iwlwifi/mvm/mvm.h
-drivers/net/wireless/intel/iwlwifi/mvm/rs.h
-drivers/net/wireless/intel/iwlwifi/mvm/sta.h
-drivers/net/wireless/intel/iwlwifi/mvm/testmode.h
-drivers/net/wireless/intel/iwlwifi/mvm/time-event.h
-drivers/net/wireless/intel/iwlwifi/pcie/internal.h
-drivers/net/wireless/intel/iwlwifi/queue/tx.h
-drivers/net/wireless/realtek/rtlwifi/base.h
-drivers/net/wireless/realtek/rtlwifi/btcoexist/halbt_precomp.h
-drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8192e2ant.h
-drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b1ant.h
-drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8723b2ant.h
-drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a1ant.h
-drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtc8821a2ant.h
-drivers/net/wireless/realtek/rtlwifi/btcoexist/halbtcoutsrc.h
-drivers/net/wireless/realtek/rtlwifi/btcoexist/rtl_btc.h
-drivers/net/wireless/realtek/rtlwifi/cam.h
-drivers/net/wireless/realtek/rtlwifi/core.h
-drivers/net/wireless/realtek/rtlwifi/debug.h
-drivers/net/wireless/realtek/rtlwifi/efuse.h
-drivers/net/wireless/realtek/rtlwifi/pci.h
-drivers/net/wireless/realtek/rtlwifi/ps.h
-drivers/net/wireless/realtek/rtlwifi/pwrseqcmd.h
-drivers/net/wireless/realtek/rtlwifi/rc.h
-drivers/net/wireless/realtek/rtlwifi/regd.h
-drivers/net/wireless/realtek/rtlwifi/rtl8188ee/def.h
-drivers/net/wireless/realtek/rtlwifi/rtl8188ee/dm.h
-drivers/net/wireless/realtek/rtlwifi/rtl8188ee/fw.h
-drivers/net/wireless/realtek/rtlwifi/rtl8188ee/hw.h
-drivers/net/wireless/realtek/rtlwifi/rtl8188ee/led.h
-drivers/net/wireless/realtek/rtlwifi/rtl8188ee/phy.h
-drivers/net/wireless/realtek/rtlwifi/rtl8188ee/pwrseq.h
-drivers/net/wireless/realtek/rtlwifi/rtl8188ee/reg.h
-drivers/net/wireless/realtek/rtlwifi/rtl8188ee/rf.h
-drivers/net/wireless/realtek/rtlwifi/rtl8188ee/table.h
-drivers/net/wireless/realtek/rtlwifi/rtl8188ee/trx.h
-drivers/net/wireless/realtek/rtlwifi/stats.h
-drivers/net/wireless/realtek/rtlwifi/wifi.h
-include/crypto/acompress.h
-include/crypto/aead.h
-include/crypto/aes.h
-include/crypto/akcipher.h
-include/crypto/algapi.h
-include/crypto/arc4.h
-include/crypto/b128ops.h
-include/crypto/ctr.h
-include/crypto/drbg.h
-include/crypto/gcm.h
-include/crypto/gf128mul.h
-include/crypto/ghash.h
-include/crypto/hash.h
-include/crypto/hash_info.h
-include/crypto/internal/acompress.h
-include/crypto/internal/aead.h
-include/crypto/internal/akcipher.h
-include/crypto/internal/cipher.h
-include/crypto/internal/geniv.h
-include/crypto/internal/hash.h
-include/crypto/internal/kpp.h
-include/crypto/internal/rng.h
-include/crypto/internal/scompress.h
-include/crypto/internal/simd.h
-include/crypto/internal/skcipher.h
-include/crypto/kpp.h
-include/crypto/md5.h
-include/crypto/null.h
-include/crypto/rng.h
-include/crypto/scatterwalk.h
-include/crypto/sha2.h
-include/crypto/sha256_base.h
-include/crypto/skcipher.h
-include/crypto/streebog.h
-include/dt-bindings/leds/common.h
-include/linux/asn1.h
-include/linux/asn1_ber_bytecode.h
-include/linux/asn1_decoder.h
-include/linux/average.h
-include/linux/bpf_local_storage.h
-include/linux/bpf_trace.h
-include/linux/bsearch.h
-include/linux/btf_ids.h
-include/linux/cookie.h
-include/linux/cpu_rmap.h
-include/linux/crash_dump.h
-include/linux/crypto.h
-include/linux/devcoredump.h
-include/linux/dmaengine.h
-include/linux/errqueue.h
-include/linux/ethtool_netlink.h
-include/linux/fips.h
-include/linux/firmware.h
-include/linux/gcd.h
-include/linux/genetlink.h
-include/linux/ieee80211.h
-include/linux/if_bridge.h
-include/linux/if_macvlan.h
-include/linux/if_tun.h
-include/linux/if_tunnel.h
-include/linux/inet.h
-include/linux/inetdevice.h
-include/linux/ip.h
-include/linux/ipv6_route.h
-include/linux/kcov.h
-include/linux/leds.h
-include/linux/miscdevice.h
-include/linux/mpls.h
-include/linux/netfilter.h
-include/linux/netfilter_ingress.h
-include/linux/netpoll.h
-include/linux/nospec.h
-include/linux/nvmem-consumer.h
-include/linux/of_net.h
-include/linux/phylink.h
-include/linux/platform_data/dsa.h
-include/linux/pps_kernel.h
-include/linux/proc_ns.h
-include/linux/ptp_classify.h
-include/linux/ptp_clock_kernel.h
-include/linux/rfkill.h
-include/linux/rhashtable.h
-include/linux/sctp.h
-include/linux/skb_array.h
-include/linux/sock_diag.h
-include/linux/thermal.h
-include/linux/trace.h
-include/linux/units.h
-include/linux/verification.h
-include/linux/virtio.h
-include/linux/virtio_byteorder.h
-include/linux/virtio_config.h
-include/linux/virtio_net.h
-include/linux/wireless.h
-include/linux/xattr.h
-include/net/Space.h
-include/net/act_api.h
-include/net/arp.h
-include/net/bpf_sk_storage.h
-include/net/busy_poll.h
-include/net/cfg80211-wext.h
-include/net/cfg80211.h
-include/net/cls_cgroup.h
-include/net/codel.h
-include/net/codel_impl.h
-include/net/compat.h
-include/net/devlink.h
-include/net/dsa.h
-include/net/dsfield.h
-include/net/dst_cache.h
-include/net/dst_metadata.h
-include/net/fq.h
-include/net/fq_impl.h
-include/net/genetlink.h
-include/net/gro.h
-include/net/gro_cells.h
-include/net/ieee80211_radiotap.h
-include/net/inet_ecn.h
-include/net/inet_hashtables.h
-include/net/inetpeer.h
-include/net/ip.h
-include/net/ip6_checksum.h
-include/net/ip6_fib.h
-include/net/ip_fib.h
-include/net/ip_tunnels.h
-include/net/iw_handler.h
-include/net/lwtunnel.h
-include/net/mac80211.h
-include/net/mpls.h
-include/net/mptcp.h
-include/net/netns/generic.h
-include/net/pkt_cls.h
-include/net/pkt_sched.h
-include/net/protocol.h
-include/net/regulatory.h
-include/net/route.h
-include/net/sock_reuseport.h
-include/net/switchdev.h
-include/net/tcp.h
-include/net/tso.h
-include/net/udp.h
-include/net/udp_tunnel.h
-include/net/wext.h
-include/net/xdp_priv.h
-include/net/xdp_sock.h
-include/net/xdp_sock_drv.h
-include/net/xfrm.h
-include/net/xsk_buff_pool.h
-include/trace/events/napi.h
-include/trace/events/net.h
-include/trace/events/netlink.h
-include/trace/events/qdisc.h
-include/trace/events/skb.h
-include/trace/events/sock.h
-include/trace/events/xdp.h
-include/uapi/linux/btf.h
-include/uapi/linux/cryptouser.h
-include/uapi/linux/devlink.h
-include/uapi/linux/errqueue.h
-include/uapi/linux/ethtool_netlink.h
-include/uapi/linux/genetlink.h
-include/uapi/linux/hash_info.h
-include/uapi/linux/if_bridge.h
-include/uapi/linux/if_tun.h
-include/uapi/linux/if_tunnel.h
-include/uapi/linux/if_xdp.h
-include/uapi/linux/in_route.h
-include/uapi/linux/ip.h
-include/uapi/linux/ipsec.h
-include/uapi/linux/ipv6_route.h
-include/uapi/linux/kcov.h
-include/uapi/linux/lwtunnel.h
-include/uapi/linux/mpls.h
-include/uapi/linux/net_namespace.h
-include/uapi/linux/nl80211.h
-include/uapi/linux/pfkeyv2.h
-include/uapi/linux/pps.h
-include/uapi/linux/ptp_clock.h
-include/uapi/linux/rfkill.h
-include/uapi/linux/route.h
-include/uapi/linux/sctp.h
-include/uapi/linux/sock_diag.h
-include/uapi/linux/thermal.h
-include/uapi/linux/un.h
-include/uapi/linux/virtio_config.h
-include/uapi/linux/virtio_ids.h
-include/uapi/linux/virtio_net.h
-include/uapi/linux/virtio_types.h
-include/uapi/linux/vmcore.h
-include/uapi/linux/wireless.h
-include/uapi/linux/xattr.h
-net/core/datagram.h
-net/core/net-sysfs.h
-net/ethtool/common.h
-net/mac80211/aead_api.h
-net/mac80211/aes_ccm.h
-net/mac80211/aes_cmac.h
-net/mac80211/aes_gcm.h
-net/mac80211/aes_gmac.h
-net/mac80211/debug.h
-net/mac80211/debugfs.h
-net/mac80211/debugfs_key.h
-net/mac80211/debugfs_netdev.h
-net/mac80211/debugfs_sta.h
-net/mac80211/driver-ops.h
-net/mac80211/fils_aead.h
-net/mac80211/ieee80211_i.h
-net/mac80211/key.h
-net/mac80211/led.h
-net/mac80211/mesh.h
-net/mac80211/michael.h
-net/mac80211/rate.h
-net/mac80211/rc80211_minstrel_ht.h
-net/mac80211/sta_info.h
-net/mac80211/tkip.h
-net/mac80211/trace.h
-net/mac80211/trace_msg.h
-net/mac80211/wep.h
-net/mac80211/wme.h
-net/mac80211/wpa.h
-net/netlink/af_netlink.h
-net/packet/internal.h
-net/rfkill/rfkill.h
-net/wireless/core.h
-net/wireless/debugfs.h
-net/wireless/nl80211.h
-net/wireless/rdev-ops.h
-net/wireless/reg.h
-net/wireless/sysfs.h
-net/wireless/trace.h
-net/wireless/wext-compat.h
diff -ruN pc/src/lib/wifi/dummies.c world/src/lib/wifi_ath9k/dummies.c
--- pc/src/lib/wifi/dummies.c	2023-01-15 14:04:13.680040326 +0000
+++ world/src/lib/wifi_ath9k/dummies.c	2023-01-15 13:49:43.961974163 +0000
@@ -14,6 +14,32 @@
 #include <lx_emul.h>
 
 
+#include <linux/sysfs.h>
+
+int sysfs_rename_link_ns(struct kobject * kobj,struct kobject * targ,const char * old,const char * new,const void * new_ns)
+{
+	lx_emul_trace(__func__);
+	return 0;
+}
+
+
+#include <linux/kobject.h>
+
+int kobject_uevent(struct kobject * kobj,enum kobject_action action)
+{
+	lx_emul_trace(__func__);
+	return 0;
+}
+
+
+#include <linux/irq.h>
+
+void note_interrupt(struct irq_desc * desc,irqreturn_t action_ret)
+{
+	lx_emul_trace_and_stop(__func__);
+}
+
+
 #include <linux/syscore_ops.h>
 
 void register_syscore_ops(struct syscore_ops * ops)
@@ -22,6 +48,43 @@
 }
 
 
+#include <linux/preempt.h>
+
+void migrate_enable(void)
+{
+	lx_emul_trace_and_stop(__func__);
+}
+
+
+void migrate_disable(void)
+{
+	lx_emul_trace_and_stop(__func__);
+}
+
+
+void synchronize_rcu_expedited(void)
+{
+	lx_emul_trace(__func__);
+}
+
+
+/*
+ * linux/seq_file.h depends on user_namespace being defined, add
+ * all dummies pulling in this header below here
+ */
+
+
+#include <linux/seq_file.h>
+
+
+#include <linux/vt_kern.h>
+
+void unblank_screen(void)
+{
+	lx_emul_trace_and_stop(__func__);
+}
+
+
 const unsigned long module_cert_size = 0;
 const u8 system_certificate_list[] = { };
 const unsigned long system_certificate_list_size = sizeof (system_certificate_list);
@@ -30,7 +93,6 @@
 unsigned int shipped_regdb_certs_len = sizeof (shipped_regdb_certs);
 
 
-
 #include <linux/filter.h>
 #include <linux/jump_label.h> /* for DEFINE_STATIC_KEY_FALSE */
 
@@ -132,6 +194,9 @@
 }
 
 
+unsigned long lpj_fine = 0;
+
+
 #include <linux/pid.h>
 
 void put_pid(struct pid * pid)
@@ -228,10 +293,6 @@
 }
 
 
-#include <linux/pci.h>
-
-const struct attribute_group pci_dev_acpi_attr_group;
-
 struct irq_domain *pci_host_bridge_acpi_msi_domain(struct pci_bus *bus)
 {
 	return NULL;
@@ -244,39 +305,6 @@
 }
 
 
-void pci_lock_rescan_remove(void)
-{
-	lx_emul_trace(__func__);
-}
-
-
-void pci_unlock_rescan_remove(void)
-{
-	lx_emul_trace(__func__);
-}
-
-
-bool pci_pme_capable(struct pci_dev *dev, pci_power_t state)
-{
-	lx_emul_trace(__func__);
-	return false;
-}
-
-
-int pcie_capability_read_word(struct pci_dev *dev, int pos, u16 *val)
-{
-	lx_emul_trace(__func__);
-	return -1;
-}
-
-
-u16 pci_find_ext_capability(struct pci_dev *dev, int cap)
-{
-	lx_emul_trace(__func__);
-	return 0;
-}
-
-
 #include <linux/thermal.h>
 
 struct thermal_cooling_device *thermal_cooling_device_register(const char *s,
@@ -328,77 +356,34 @@
 	return 0;
 }
 
+#include <net/gen_stats.h>
 
-#include <asm/smp.h>
-
-struct smp_ops smp_ops = { };
-EXPORT_SYMBOL_GPL(smp_ops);
-
-
-void synchronize_rcu_expedited(void)
-{
-	lx_emul_trace(__func__);
-}
-
-
-#include <linux/pci.h>
-
-int pci_enable_msi(struct pci_dev *dev)
-{
-	lx_emul_trace(__func__);
-	return -ENOSYS;
-}
-
-
-void pci_disable_msi(struct pci_dev *dev)
-{
-    lx_emul_trace(__func__);
-}
-
-
-int pci_enable_msix_range(struct pci_dev *dev, struct msix_entry *entries,
-                          int minvec, int maxvec)
-{
-	lx_emul_trace(__func__);
-	return -ENOSYS;
-}
-
-
-void pci_disable_device(struct pci_dev * dev)
+void gen_kill_estimator(struct net_rate_estimator __rcu ** rate_est)
 {
 	lx_emul_trace(__func__);
+	/* suppress */
+	return;
 }
 
+#include <crypto/sha2.h>
 
-unsigned int pci_rescan_bus(struct pci_bus *bus)
+void sha224_final(struct sha256_state * sctx,u8 * out)
 {
-	lx_emul_trace(__func__);
-	return 0;
+	lx_emul_trace_and_stop(__func__);
 }
 
 
-void pcim_pin_device(struct pci_dev *pdev)
-{
-	lx_emul_trace(__func__);
-}
-
+#include <crypto/sha2.h>
 
-void pcim_iounmap(struct pci_dev *pdev, void __iomem *addr)
+void sha256_final(struct sha256_state * sctx,u8 * out)
 {
-	lx_emul_trace(__func__);
+	lx_emul_trace_and_stop(__func__);
 }
 
 
-int pcim_iomap_regions(struct pci_dev *pdev, int mask, const char *name)
-{
-	lx_emul_trace(__func__);
-	return 0;
-}
+#include <crypto/sha2.h>
 
-
-int pcie_capability_clear_and_set_word(struct pci_dev *dev, int pos,
-                                       u16 clear, u16 set)
+void sha256_update(struct sha256_state * sctx,const u8 * data,unsigned int len)
 {
 	lx_emul_trace_and_stop(__func__);
-	return 0;
-}
+}
\ No newline at end of file
diff -ruN pc/src/lib/wifi/extra_dummies.c world/src/lib/wifi_ath9k/extra_dummies.c
--- pc/src/lib/wifi/extra_dummies.c	1970-01-01 00:00:00.000000000 +0000
+++ world/src/lib/wifi_ath9k/extra_dummies.c	2023-01-15 13:49:43.961974163 +0000
@@ -0,0 +1,47 @@
+#define KBUILD_MODNAME "extra_dummies"
+
+#include <lx_emul.h>
+#include <linux/types.h>
+#include <net/sock.h>
+
+u64 __sock_gen_cookie(struct sock *sk)
+{
+	lx_emul_trace_and_stop(__func__);
+	return 0;
+}
+
+void *__vmalloc_node(unsigned long size, unsigned long align,
+			    gfp_t gfp_mask, int node, const void *caller)
+{
+	lx_emul_trace_and_stop(__func__);
+	return NULL;
+}
+
+#include <linux/filter.h>
+
+int copy_bpf_fprog_from_user(struct sock_fprog *dst, sockptr_t src, int len)
+{
+	lx_emul_trace_and_stop(__func__);
+	return 0;
+}
+
+char *get_options(const char *str, int nints, int *ints)
+{
+	lx_emul_trace_and_stop(__func__);
+	return NULL;
+}
+
+#include <linux/workqueue.h>
+
+void srcu_drive_gp(struct work_struct *wp)
+{
+	lx_emul_trace_and_stop(__func__);
+}
+
+
+#include <linux/fs.h>
+
+int simple_setattr(struct user_namespace * my_user_namespace, struct dentry * dentry,struct iattr * iattr)
+{
+	lx_emul_trace_and_stop(__func__);
+}
diff -ruN pc/src/lib/wifi/firmware.cc world/src/lib/wifi_ath9k/firmware.cc
--- pc/src/lib/wifi/firmware.cc	2023-01-15 14:04:13.680040326 +0000
+++ world/src/lib/wifi_ath9k/firmware.cc	2023-01-15 13:49:43.961974163 +0000
@@ -45,14 +45,7 @@
 
 	{ "iwlwifi-QuZ-a0-hr-b0-63.ucode", 1334804, nullptr },
 	{ "iwlwifi-QuZ-a0-hr-b0-64.ucode", 1334804, "iwlwifi-QuZ-a0-hr-b0-63.ucode" },
-	{ "iwlwifi-so-a0-hr-b0-64.ucode",  1427384, nullptr },
-	{ "iwlwifi-so-a0-gf-a0-64.ucode",  1515812, nullptr },
-	{ "iwlwifi-so-a0-gf-a0.pnvm", 41808, nullptr },
-
-	{ "rtl8192eu_nic.bin",       31818, nullptr },
-	{ "rtlwifi/rtl8192eefw.bin", 31818, "rtl8192eu_nic.bin" },
-	{ "rtl8188efw.bin",          11216, nullptr },
-	{ "rtlwifi/rtl8188efw.bin",  11216, "rtl8188efw.bin" }, /* FW Power Save off */
+	{ "ath9k_htc/htc_9271-1.4.0.fw", 51008, "htc_9271-1.4.0.fw"},
 };
 
 
@@ -63,9 +56,9 @@
  ** linux/firmware.h **
  **********************/
 
-extern "C" int lx_emul_request_firmware_nowait(const char *name, void **dest,
-                                               size_t *result, bool warn)
+extern "C" int lx_emul_request_firmware_nowait(const char *name, void **dest, size_t *result)
 {
+	Genode::log("lx_emul_request_firmware_nowait being call to look for: ", name);
 	if (!dest || !result)
 		return -1;
 
@@ -78,10 +71,8 @@
 		}
 	}
 
-	if (!fwl ) {
-		if (warn)
-			Genode::error("firmware '", name, "' is not in the firmware white list");
-
+	if (!fwl) {
+		Genode::error("firmware '", name, "' is not in the firmware white list");
 		return -1;
 	}
 
diff -ruN pc/src/lib/wifi/generate_my_dummies world/src/lib/wifi_ath9k/generate_my_dummies
--- pc/src/lib/wifi/generate_my_dummies	1970-01-01 00:00:00.000000000 +0000
+++ world/src/lib/wifi_ath9k/generate_my_dummies	2023-01-15 13:49:43.961974163 +0000
@@ -0,0 +1,4 @@
+#!/bin/bash
+
+# my linux directory is $HOME/Hacking/linux, this may need to be adjusted
+./tool/dde_linux/create_dummies generate TARGET=drivers/wifi_ath9k_drv/pc LINUX_KERNEL_DIR=$HOME/Hacking/linux DUMMY_FILE=repos/world/src/lib/wifi_ath9k/generated_dummies.c BUILD_DIR=build/x86_64
\ No newline at end of file
diff -ruN pc/src/lib/wifi/generated_dummies.c world/src/lib/wifi_ath9k/generated_dummies.c
--- pc/src/lib/wifi/generated_dummies.c	2023-01-15 14:04:13.681040314 +0000
+++ world/src/lib/wifi_ath9k/generated_dummies.c	2023-01-15 13:49:43.961974163 +0000
@@ -1,21 +1,13 @@
 /*
  * \brief  Dummy definitions of Linux Kernel functions
  * \author Automatically generated file - do no edit
- * \date   2022-07-29
+ * \date   2022-12-18
  */
 
 #include <lx_emul.h>
 
 
-#include <linux/proc_fs.h>
-
-void * PDE_DATA(const struct inode * inode)
-{
-	lx_emul_trace_and_stop(__func__);
-}
-
-
-#include <linux/ratelimit_types.h>
+#include <linux/ratelimit.h>
 
 int ___ratelimit(struct ratelimit_state * rs,const char * func)
 {
@@ -111,14 +103,6 @@
 }
 
 
-#include <linux/sock_diag.h>
-
-u64 __sock_gen_cookie(struct sock * sk)
-{
-	lx_emul_trace_and_stop(__func__);
-}
-
-
 #include <linux/srcu.h>
 
 void __srcu_read_unlock(struct srcu_struct * ssp,int idx)
@@ -127,14 +111,6 @@
 }
 
 
-#include <linux/vmalloc.h>
-
-void * __vmalloc_node(unsigned long size,unsigned long align,gfp_t gfp_mask,int node,const void * caller)
-{
-	lx_emul_trace_and_stop(__func__);
-}
-
-
 #include <linux/uaccess.h>
 
 unsigned long _copy_to_user(void __user * to,const void * from,unsigned long n)
@@ -222,43 +198,6 @@
 }
 
 
-#include <linux/kernel.h>
-
-void bust_spinlocks(int yes)
-{
-	lx_emul_trace_and_stop(__func__);
-}
-
-
-#include <linux/console.h>
-
-void console_flush_on_panic(enum con_flush_mode mode)
-{
-	lx_emul_trace_and_stop(__func__);
-}
-
-
-#include <linux/printk.h>
-
-int console_printk[] = {};
-
-
-#include <linux/console.h>
-
-void console_unblank(void)
-{
-	lx_emul_trace_and_stop(__func__);
-}
-
-
-#include <linux/filter.h>
-
-int copy_bpf_fprog_from_user(struct sock_fprog * dst,sockptr_t src,int len)
-{
-	lx_emul_trace_and_stop(__func__);
-}
-
-
 #include <linux/uio.h>
 
 size_t copy_page_from_iter(struct page * page,size_t offset,size_t bytes,struct iov_iter * i)
@@ -269,15 +208,7 @@
 
 #include <linux/netdevice.h>
 
-int dev_ifconf(struct net * net,struct ifconf * ifc,int size)
-{
-	lx_emul_trace_and_stop(__func__);
-}
-
-
-#include <linux/netdevice.h>
-
-int dev_ioctl(struct net * net,unsigned int cmd,struct ifreq * ifr,bool * need_copyout)
+int dev_ethtool(struct net * net,struct ifreq * ifr)
 {
 	lx_emul_trace_and_stop(__func__);
 }
@@ -299,14 +230,6 @@
 }
 
 
-#include <linux/reboot.h>
-
-void emergency_restart(void)
-{
-	lx_emul_trace_and_stop(__func__);
-}
-
-
 #include <linux/ethtool.h>
 
 u32 ethtool_op_get_link(struct net_device * dev)
@@ -315,14 +238,6 @@
 }
 
 
-#include <linux/ethtool.h>
-
-int ethtool_op_get_ts_info(struct net_device * dev,struct ethtool_ts_info * info)
-{
-	lx_emul_trace_and_stop(__func__);
-}
-
-
 #include <linux/fs.h>
 
 pid_t f_getown(struct file * filp)
@@ -408,14 +323,6 @@
 }
 
 
-#include <net/gen_stats.h>
-
-void gen_kill_estimator(struct net_rate_estimator __rcu ** rate_est)
-{
-	lx_emul_trace_and_stop(__func__);
-}
-
-
 #include <linux/fs.h>
 
 ssize_t generic_file_splice_read(struct file * in,loff_t * ppos,struct pipe_inode_info * pipe,size_t len,unsigned int flags)
@@ -432,22 +339,6 @@
 }
 
 
-#include <linux/kernel.h>
-
-int get_option(char ** str,int * pint)
-{
-	lx_emul_trace_and_stop(__func__);
-}
-
-
-#include <linux/kernel.h>
-
-char * get_options(const char * str,int nints,int * ints)
-{
-	lx_emul_trace_and_stop(__func__);
-}
-
-
 #include <linux/file.h>
 
 int get_unused_fd_flags(unsigned flags)
@@ -487,7 +378,7 @@
 
 #include <linux/uio.h>
 
-ssize_t import_iovec(int type,const struct iovec __user * uvec,unsigned nr_segs,unsigned fast_segs,struct iovec ** iovp,struct iov_iter * i)
+ssize_t import_iovec(int type,const struct iovec __user * uvector,unsigned nr_segs,unsigned fast_segs,struct iovec ** iov,struct iov_iter * i)
 {
 	lx_emul_trace_and_stop(__func__);
 }
@@ -514,6 +405,14 @@
 }
 
 
+#include <linux/ioport.h>
+
+int insert_resource(struct resource * parent,struct resource * new)
+{
+	lx_emul_trace_and_stop(__func__);
+}
+
+
 #include <linux/sched.h>
 
 void io_schedule_finish(int token)
@@ -538,6 +437,16 @@
 }
 
 
+#include <linux/ioport.h>
+
+struct resource iomem_resource;
+
+
+#include <linux/ioport.h>
+
+struct resource ioport_resource;
+
+
 #include <linux/uio.h>
 
 void iov_iter_kvec(struct iov_iter * i,unsigned int direction,const struct kvec * kvec,unsigned long nr_segs,size_t count)
@@ -623,14 +532,6 @@
 }
 
 
-#include <linux/kmsg_dump.h>
-
-void kmsg_dump(enum kmsg_dump_reason reason)
-{
-	lx_emul_trace_and_stop(__func__);
-}
-
-
 #include <linux/kobject.h>
 
 int kobject_synth_uevent(struct kobject * kobj,const char * buf,size_t count)
@@ -639,20 +540,9 @@
 }
 
 
-#include <linux/preempt.h>
-
-void migrate_disable(void)
-{
-	lx_emul_trace_and_stop(__func__);
-}
-
-
-#include <linux/preempt.h>
+#include <linux/netdevice.h>
 
-void migrate_enable(void)
-{
-	lx_emul_trace_and_stop(__func__);
-}
+struct pernet_operations __net_initdata loopback_net_ops;
 
 
 #include <net/neighbour.h>
@@ -660,14 +550,6 @@
 const struct nla_policy nda_policy[] = {};
 
 
-#include <linux/netdevice.h>
-
-void netdev_rss_key_fill(void * buffer,size_t len)
-{
-	lx_emul_trace_and_stop(__func__);
-}
-
-
 #include <linux/irq.h>
 
 struct irq_chip no_irq_chip;
@@ -681,38 +563,33 @@
 }
 
 
-#include <linux/irq.h>
+#include <linux/proc_fs.h>
 
-void note_interrupt(struct irq_desc * desc,irqreturn_t action_ret)
+int open_related_ns(struct ns_common * ns,struct ns_common * (* get_ns)(struct ns_common * ns))
 {
 	lx_emul_trace_and_stop(__func__);
 }
 
 
-#include <linux/proc_fs.h>
+#include <linux/osq_lock.h>
 
-int open_related_ns(struct ns_common * ns,struct ns_common * (* get_ns)(struct ns_common * ns))
+bool osq_lock(struct optimistic_spin_queue * lock)
 {
 	lx_emul_trace_and_stop(__func__);
 }
 
 
-#include <linux/reboot.h>
-
-enum reboot_mode panic_reboot_mode;
-
-
-#include <linux/pci.h>
+#include <linux/osq_lock.h>
 
-void pci_stop_and_remove_bus_device(struct pci_dev * dev)
+void osq_unlock(struct optimistic_spin_queue * lock)
 {
 	lx_emul_trace_and_stop(__func__);
 }
 
 
-#include <linux/pci.h>
+#include <linux/kernel.h>
 
-int pci_write_config_word(const struct pci_dev * dev,int where,u16 val)
+void panic(const char * fmt,...)
 {
 	lx_emul_trace_and_stop(__func__);
 }
@@ -734,14 +611,6 @@
 }
 
 
-#include <linux/printk.h>
-
-void printk_safe_flush_on_panic(void)
-{
-	lx_emul_trace_and_stop(__func__);
-}
-
-
 #include <linux/proc_ns.h>
 
 void proc_free_inum(unsigned int inum)
@@ -782,9 +651,28 @@
 }
 
 
-#include <linux/reboot.h>
+#include <linux/refcount.h>
 
-enum reboot_mode reboot_mode;
+bool refcount_dec_not_one(refcount_t * r)
+{
+	lx_emul_trace_and_stop(__func__);
+}
+
+
+#include <linux/refcount.h>
+
+void refcount_warn_saturate(refcount_t * r,enum refcount_saturation_type t)
+{
+	lx_emul_trace_and_stop(__func__);
+}
+
+
+#include <linux/ioport.h>
+
+int release_resource(struct resource * old)
+{
+	lx_emul_trace_and_stop(__func__);
+}
 
 
 #include <linux/proc_fs.h>
@@ -883,54 +771,6 @@
 }
 
 
-#include <crypto/sha2.h>
-
-void sha224_final(struct sha256_state * sctx,u8 * out)
-{
-	lx_emul_trace_and_stop(__func__);
-}
-
-
-#include <crypto/sha2.h>
-
-void sha256_final(struct sha256_state * sctx,u8 * out)
-{
-	lx_emul_trace_and_stop(__func__);
-}
-
-
-#include <crypto/sha2.h>
-
-void sha256_update(struct sha256_state * sctx,const u8 * data,unsigned int len)
-{
-	lx_emul_trace_and_stop(__func__);
-}
-
-
-#include <linux/mm.h>
-
-void show_mem(unsigned int filter,nodemask_t * nodemask)
-{
-	lx_emul_trace_and_stop(__func__);
-}
-
-
-#include <linux/sched/debug.h>
-
-void show_state_filter(unsigned int state_filter)
-{
-	lx_emul_trace_and_stop(__func__);
-}
-
-
-#include <linux/fs.h>
-
-int simple_setattr(struct user_namespace * mnt_userns,struct dentry * dentry,struct iattr * iattr)
-{
-	lx_emul_trace_and_stop(__func__);
-}
-
-
 #include <linux/fs.h>
 
 int simple_statfs(struct dentry * dentry,struct kstatfs * buf)
@@ -1005,7 +845,7 @@
 
 #include <linux/smp.h>
 
-int smp_call_function_single_async(int cpu,struct __call_single_data * csd)
+int smp_call_function_single_async(int cpu,call_single_data_t * csd)
 {
 	lx_emul_trace_and_stop(__func__);
 }
@@ -1040,11 +880,6 @@
 }
 
 
-#include <linux/printk.h>
-
-int suppress_printk;
-
-
 #include <linux/sysfs.h>
 
 int sysfs_rename_dir_ns(struct kobject * kobj,const char * new_name,const void * new_ns)
@@ -1053,40 +888,25 @@
 }
 
 
-#include <linux/sysfs.h>
-
-int sysfs_rename_link_ns(struct kobject * kobj,struct kobject * targ,const char * old,const char * new,const void * new_ns)
-{
-	lx_emul_trace_and_stop(__func__);
-}
-
-
-#include <linux/task_work.h>
+#include <linux/fs.h>
 
-struct callback_head * task_work_cancel(struct task_struct * task,task_work_func_t func)
+int unregister_filesystem(struct file_system_type * fs)
 {
 	lx_emul_trace_and_stop(__func__);
 }
 
 
-#include <linux/vt_kern.h>
+#include <linux/usb.h>
 
-void unblank_screen(void)
+int usb_bulk_msg(struct usb_device * usb_dev,unsigned int pipe,void * data,int len,int * actual_length,int timeout)
 {
 	lx_emul_trace_and_stop(__func__);
 }
 
 
-#include <linux/fs.h>
-
-int unregister_filesystem(struct file_system_type * fs)
-{
-	lx_emul_trace_and_stop(__func__);
-}
-
+#include <linux/usb.h>
 
-extern void unregister_handler_proc(unsigned int irq,struct irqaction * action);
-void unregister_handler_proc(unsigned int irq,struct irqaction * action)
+int usb_interrupt_msg(struct usb_device * usb_dev,unsigned int pipe,void * data,int len,int * actual_length,int timeout)
 {
 	lx_emul_trace_and_stop(__func__);
 }
diff -ruN pc/src/lib/wifi/lx_emul/initcall_order.h world/src/lib/wifi_ath9k/lx_emul/initcall_order.h
--- pc/src/lib/wifi/lx_emul/initcall_order.h	1970-01-01 00:00:00.000000000 +0000
+++ world/src/lib/wifi_ath9k/lx_emul/initcall_order.h	2023-01-15 13:49:43.962974151 +0000
@@ -0,0 +1,212 @@
+/*
+ * \brief  Array defining order of Linux Kernel initcalls
+ * \author Automatically generated file - do no edit
+ * \date   2022-02-28
+ */
+
+#pragma once
+
+static const char * lx_emul_initcall_order[] = {
+	"__initcall_init_hw_perf_eventsearly",
+	"__initcall_start",
+	"__initcall_init_real_modeearly",
+	"__initcall_validate_x2apicearly",
+	"__initcall_register_nmi_cpu_backtrace_handlerearly",
+	"__initcall_spawn_ksoftirqdearly",
+	"__initcall_static_call_initearly",
+	"__initcall_init_zero_pfnearly",
+	"__initcall_initialize_ptr_randomearly",
+	"__initcall_init_mmap_min_addr0",
+	"__initcall_pci_realloc_setup_params0",
+	"__initcall_net_ns_init0",
+	"__initcall_reboot_init1",
+	"__initcall_wq_sysfs_init1",
+	"__initcall_ksysfs_init1",
+	"__initcall_rcu_set_runtime_mode1",
+	"__initcall_init_jiffies_clocksource1",
+	"__initcall_init_script_binfmt1",
+	"__initcall_init_elf_binfmt1",
+	"__initcall_prandom_init_early1",
+	"__initcall_sock_init1",
+	"__initcall_net_inuse_init1",
+	"__initcall_net_defaults_init1",
+	"__initcall_init_default_flow_dissectors1",
+	"__initcall_netlink_proto_init1",
+	"__initcall_genl_init1",
+	"__initcall_irq_sysfs_init2",
+	"__initcall_bdi_class_init2",
+	"__initcall_mm_sysfs_init2",
+	"__initcall_init_per_zone_wmark_min2",
+	"__initcall_mpi_init2",
+	"__initcall_pcibus_class_init2",
+	"__initcall_pci_driver_init2",
+	"__initcall_tty_class_init2",
+	"__initcall_vtconsole_class_init2",
+	"__initcall_devlink_class_init2",
+	"__initcall_software_node_init2",
+	"__initcall_amd_postcore_init2",
+	"__initcall_kobject_uevent_init2",
+	"__initcall_bts_init3",
+	"__initcall_pt_init3",
+	"__initcall_boot_params_ksysfs_init3",
+	"__initcall_sbf_init3",
+	"__initcall_arch_kdebugfs_init3",
+	"__initcall_intel_pconfig_init3",
+	"__initcall_cryptomgr_init3",
+	"__initcall_pci_arch_init3",
+	"__initcall_init_vdso4",
+	"__initcall_fixup_ht_bug4",
+	"__initcall_topology_init4",
+	"__initcall_uid_cache_init4",
+	"__initcall_param_sysfs_init4",
+	"__initcall_user_namespace_sysctl_init4",
+	"__initcall_oom_init4",
+	"__initcall_default_bdi_init4",
+	"__initcall_percpu_enable_async4",
+	"__initcall_init_user_reserve4",
+	"__initcall_init_admin_reserve4",
+	"__initcall_init_reserve_notifier4",
+	"__initcall_rsa_init4",
+	"__initcall_crypto_cmac_module_init4",
+	"__initcall_crypto_null_mod_init4",
+	"__initcall_sha256_generic_mod_init4",
+	"__initcall_crypto_ctr_module_init4",
+	"__initcall_crypto_gcm_module_init4",
+	"__initcall_crypto_ccm_module_init4",
+	"__initcall_aes_init4",
+	"__initcall_ghash_mod_init4",
+	"__initcall_pci_slot_init4",
+	"__initcall_misc_init4",
+	"__initcall_usb_common_init4",
+	"__initcall_usb_init4",
+	"__initcall_serio_init4",
+	"__initcall_input_init4",
+	"__initcall_leds_init4",
+	"__initcall_proto_init4",
+	"__initcall_net_dev_init4",
+	"__initcall_neigh_init4",
+	"__initcall_fib_notifier_init4",
+	"__initcall_ethnl_init4",
+	"__initcall_ieee80211_init4",
+	"__initcall_rfkill_init4",
+	"__initcall_pci_subsys_init4",
+	"__initcall_nmi_warning_debugfs5",
+	"__initcall_hpet_late_init5",
+	"__initcall_init_amd_nbs5",
+	"__initcall_iomem_init_inode5",
+	"__initcall_clocksource_done_booting5",
+	"__initcall_init_pipe_fs5",
+	"__initcall_anon_inode_init5",
+	"__initcall_proc_cmdline_init5",
+	"__initcall_proc_consoles_init5",
+	"__initcall_proc_cpuinfo_init5",
+	"__initcall_proc_devices_init5",
+	"__initcall_proc_interrupts_init5",
+	"__initcall_proc_loadavg_init5",
+	"__initcall_proc_meminfo_init5",
+	"__initcall_proc_stat_init5",
+	"__initcall_proc_uptime_init5",
+	"__initcall_proc_version_init5",
+	"__initcall_proc_softirqs_init5",
+	"__initcall_proc_kmsg_init5",
+	"__initcall_proc_page_init5",
+	"__initcall_init_ramfs_fs5",
+	"__initcall_chr_dev_init5",
+	"__initcall_firmware_class_init5",
+	"__initcall_sysctl_core_init5",
+	"__initcall_eth_offload_init5",
+	"__initcall_cfg80211_init5",
+	"__initcall_pcibios_assign_resources5",
+	"__initcall_pci_apply_final_quirks5s",
+	"__initcall_populate_rootfsrootfs",
+	"__initcall_pci_iommu_initrootfs",
+	"__initcall_rapl_pmu_init6",
+	"__initcall_packet_init6",
+	"__initcall_amd_uncore_init6",
+	"__initcall_amd_ibs_init6",
+	"__initcall_msr_init6",
+	"__initcall_intel_uncore_init6",
+	"__initcall_cstate_pmu_init6",
+	"__initcall_register_kernel_offset_dumper6",
+	"__initcall_i8259A_init_ops6",
+	"__initcall_init_tsc_clocksource6",
+	"__initcall_add_rtc_cmos6",
+	"__initcall_umwait_init6",
+	"__initcall_ioapic_init_ops6",
+	"__initcall_sysfb_init6",
+	"__initcall_proc_execdomains_init6",
+	"__initcall_ioresources_init6",
+	"__initcall_timekeeping_init_ops6",
+	"__initcall_init_clocksource_sysfs6",
+	"__initcall_init_timer_list_procfs6",
+	"__initcall_alarmtimer_init6",
+	"__initcall_clockevents_init_sysfs6",
+	"__initcall_utsname_sysctl_init6",
+	"__initcall_perf_event_sysfs_init6",
+	"__initcall_system_trusted_keyring_init6",
+	"__initcall_kswapd_init6",
+	"__initcall_workingset_init6",
+	"__initcall_proc_vmalloc_init6",
+	"__initcall_fcntl_init6",
+	"__initcall_proc_filesystems_init6",
+	"__initcall_start_dirtytime_writeback6",
+	"__initcall_init_devpts_fs6",
+	"__initcall_key_proc_init6",
+	"__initcall_crypto_algapi_init6",
+	"__initcall_asymmetric_key_init6",
+	"__initcall_x509_key_init6",
+	"__initcall_pci_proc_init6",
+	"__initcall_gpio_clk_driver_init6",
+	"__initcall_plt_clk_driver_init6",
+	"__initcall_n_null_init6",
+	"__initcall_pty_init6",
+	"__initcall_serial8250_init6",
+	"__initcall_serial_pci_driver_init6",
+	"__initcall_exar_pci_driver_init6",
+	"__initcall_lpss8250_pci_driver_init6",
+	"__initcall_mid8250_pci_driver_init6",
+	"__initcall_topology_sysfs_init6",
+	"__initcall_cacheinfo_sysfs_init6",
+	"__initcall_net_olddevs_init6",
+	"__initcall_blackhole_netdev_init6",
+	"__initcall_iwl_drv_init6",
+	"__initcall_iwl_init6",
+	"__initcall_iwl_mvm_init6",
+	"__initcall_ath9k_cmn_init6",
+	"__initcall_ath9k_htc_init6",
+	"__initcall_ehci_hcd_init6",
+	"__initcall_ehci_pci_init6",
+	"__initcall_ohci_hcd_mod_init6",
+	"__initcall_ohci_pci_init6",
+	"__initcall_xhci_hcd_init6",
+	"__initcall_xhci_pci_init6",
+	"__initcall_i8042_init6",
+	"__initcall_serport_init6",
+	"__initcall_atkbd_init6",
+	"__initcall_psmouse_init6",
+	"__initcall_pmc_atom_init6",
+	"__initcall_sock_diag_init6",
+	"__initcall_update_mp_table7",
+	"__initcall_lapic_insert_resource7",
+	"__initcall_print_ICs7",
+	"__initcall_create_tlb_single_page_flush_ceiling7",
+	"__initcall_init_oops_id7",
+	"__initcall_reboot_ksysfs_init7",
+	"__initcall_sched_clock_init_late7",
+	"__initcall_sched_init_debug7",
+	"__initcall_printk_late_init7",
+	"__initcall_load_system_certificate_list7",
+	"__initcall_check_early_ioremap_leak7",
+	"__initcall_init_root_keyring7",
+	"__initcall_prandom_init_late7",
+	"__initcall_pci_resource_alignment_sysfs_init7",
+	"__initcall_pci_sysfs_init7",
+	"__initcall_sync_state_resume_initcall7",
+	"__initcall_deferred_probe_initcall7",
+	"__initcall_regulatory_init_db7",
+	"__initcall_clk_disable_unused7s",
+	"__initcall_con_initcon",
+	"__initcall_end",
+	"__initcall_univ8250_console_initcon",
+	"END_OF_INITCALL_ORDER_ARRAY_DUMMY_ENTRY"
+};
diff -ruN pc/src/lib/wifi/lx_emul/shadow/kernel/softirq.c world/src/lib/wifi_ath9k/lx_emul/shadow/kernel/softirq.c
--- pc/src/lib/wifi/lx_emul/shadow/kernel/softirq.c	1970-01-01 00:00:00.000000000 +0000
+++ world/src/lib/wifi_ath9k/lx_emul/shadow/kernel/softirq.c	2023-01-15 13:49:43.962974151 +0000
@@ -0,0 +1,1046 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ *	linux/kernel/softirq.c
+ *
+ *	Copyright (C) 1992 Linus Torvalds
+ *
+ *	Rewritten. Old one was good in 2.2, but in 2.3 it was immoral. --ANK (990903)
+ */
+
+ /* Tasklet section re-worked for Genode lx_emul by Colin Parker, 2022 */
+
+#define pr_fmt(fmt) KBUILD_MODNAME ": " fmt
+
+#include <linux/export.h>
+#include <linux/kernel_stat.h>
+#include <linux/interrupt.h>
+#include <linux/init.h>
+#include <linux/local_lock.h>
+#include <linux/mm.h>
+#include <linux/notifier.h>
+#include <linux/percpu.h>
+#include <linux/cpu.h>
+#include <linux/freezer.h>
+#include <linux/kthread.h>
+#include <linux/rcupdate.h>
+#include <linux/ftrace.h>
+#include <linux/smp.h>
+#include <linux/smpboot.h>
+#include <linux/tick.h>
+#include <linux/irq.h>
+#include <linux/wait_bit.h>
+
+#include <asm/softirq_stack.h>
+
+#define CREATE_TRACE_POINTS
+#include <trace/events/irq.h>
+
+/*
+   - No shared variables, all the data are CPU local.
+   - If a softirq needs serialization, let it serialize itself
+     by its own spinlocks.
+   - Even if softirq is serialized, only local cpu is marked for
+     execution. Hence, we get something sort of weak cpu binding.
+     Though it is still not clear, will it result in better locality
+     or will not.
+
+   Examples:
+   - NET RX softirq. It is multithreaded and does not require
+     any global serialization.
+   - NET TX softirq. It kicks software netdevice queues, hence
+     it is logically serialized per device, but this serialization
+     is invisible to common code.
+   - Tasklets: serialized wrt itself.
+ */
+
+#ifndef __ARCH_IRQ_STAT
+DEFINE_PER_CPU_ALIGNED(irq_cpustat_t, irq_stat);
+EXPORT_PER_CPU_SYMBOL(irq_stat);
+#endif
+
+static struct softirq_action softirq_vec[NR_SOFTIRQS] __cacheline_aligned_in_smp;
+
+DEFINE_PER_CPU(struct task_struct *, ksoftirqd);
+
+const char * const softirq_to_name[NR_SOFTIRQS] = {
+	"HI", "TIMER", "NET_TX", "NET_RX", "BLOCK", "IRQ_POLL",
+	"TASKLET", "SCHED", "HRTIMER", "RCU"
+};
+
+/*
+ * we cannot loop indefinitely here to avoid userspace starvation,
+ * but we also don't want to introduce a worst case 1/HZ latency
+ * to the pending events, so lets the scheduler to balance
+ * the softirq load for us.
+ */
+static void wakeup_softirqd(void)
+{
+	/* Interrupts are disabled: no need to stop preemption */
+	struct task_struct *tsk = __this_cpu_read(ksoftirqd);
+
+	if (tsk)
+		wake_up_process(tsk);
+}
+
+/*
+ * If ksoftirqd is scheduled, we do not want to process pending softirqs
+ * right now. Let ksoftirqd handle this at its own rate, to get fairness,
+ * unless we're doing some of the synchronous softirqs.
+ */
+#define SOFTIRQ_NOW_MASK ((1 << HI_SOFTIRQ) | (1 << TASKLET_SOFTIRQ))
+static bool ksoftirqd_running(unsigned long pending)
+{
+	struct task_struct *tsk = __this_cpu_read(ksoftirqd);
+
+	if (pending & SOFTIRQ_NOW_MASK)
+		return false;
+	return tsk && task_is_running(tsk) && !__kthread_should_park(tsk);
+}
+
+#ifdef CONFIG_TRACE_IRQFLAGS
+DEFINE_PER_CPU(int, hardirqs_enabled);
+DEFINE_PER_CPU(int, hardirq_context);
+EXPORT_PER_CPU_SYMBOL_GPL(hardirqs_enabled);
+EXPORT_PER_CPU_SYMBOL_GPL(hardirq_context);
+#endif
+
+/*
+ * SOFTIRQ_OFFSET usage:
+ *
+ * On !RT kernels 'count' is the preempt counter, on RT kernels this applies
+ * to a per CPU counter and to task::softirqs_disabled_cnt.
+ *
+ * - count is changed by SOFTIRQ_OFFSET on entering or leaving softirq
+ *   processing.
+ *
+ * - count is changed by SOFTIRQ_DISABLE_OFFSET (= 2 * SOFTIRQ_OFFSET)
+ *   on local_bh_disable or local_bh_enable.
+ *
+ * This lets us distinguish between whether we are currently processing
+ * softirq and whether we just have bh disabled.
+ */
+#ifdef CONFIG_PREEMPT_RT
+
+/*
+ * RT accounts for BH disabled sections in task::softirqs_disabled_cnt and
+ * also in per CPU softirq_ctrl::cnt. This is necessary to allow tasks in a
+ * softirq disabled section to be preempted.
+ *
+ * The per task counter is used for softirq_count(), in_softirq() and
+ * in_serving_softirqs() because these counts are only valid when the task
+ * holding softirq_ctrl::lock is running.
+ *
+ * The per CPU counter prevents pointless wakeups of ksoftirqd in case that
+ * the task which is in a softirq disabled section is preempted or blocks.
+ */
+struct softirq_ctrl {
+	local_lock_t	lock;
+	int		cnt;
+};
+
+static DEFINE_PER_CPU(struct softirq_ctrl, softirq_ctrl) = {
+	.lock	= INIT_LOCAL_LOCK(softirq_ctrl.lock),
+};
+
+/**
+ * local_bh_blocked() - Check for idle whether BH processing is blocked
+ *
+ * Returns false if the per CPU softirq::cnt is 0 otherwise true.
+ *
+ * This is invoked from the idle task to guard against false positive
+ * softirq pending warnings, which would happen when the task which holds
+ * softirq_ctrl::lock was the only running task on the CPU and blocks on
+ * some other lock.
+ */
+bool local_bh_blocked(void)
+{
+	return __this_cpu_read(softirq_ctrl.cnt) != 0;
+}
+
+void __local_bh_disable_ip(unsigned long ip, unsigned int cnt)
+{
+	unsigned long flags;
+	int newcnt;
+
+	WARN_ON_ONCE(in_hardirq());
+
+	/* First entry of a task into a BH disabled section? */
+	if (!current->softirq_disable_cnt) {
+		if (preemptible()) {
+			local_lock(&softirq_ctrl.lock);
+			/* Required to meet the RCU bottomhalf requirements. */
+			rcu_read_lock();
+		} else {
+			DEBUG_LOCKS_WARN_ON(this_cpu_read(softirq_ctrl.cnt));
+		}
+	}
+
+	/*
+	 * Track the per CPU softirq disabled state. On RT this is per CPU
+	 * state to allow preemption of bottom half disabled sections.
+	 */
+	newcnt = __this_cpu_add_return(softirq_ctrl.cnt, cnt);
+	/*
+	 * Reflect the result in the task state to prevent recursion on the
+	 * local lock and to make softirq_count() & al work.
+	 */
+	current->softirq_disable_cnt = newcnt;
+
+	if (IS_ENABLED(CONFIG_TRACE_IRQFLAGS) && newcnt == cnt) {
+		raw_local_irq_save(flags);
+		lockdep_softirqs_off(ip);
+		raw_local_irq_restore(flags);
+	}
+}
+EXPORT_SYMBOL(__local_bh_disable_ip);
+
+static void __local_bh_enable(unsigned int cnt, bool unlock)
+{
+	unsigned long flags;
+	int newcnt;
+
+	DEBUG_LOCKS_WARN_ON(current->softirq_disable_cnt !=
+			    this_cpu_read(softirq_ctrl.cnt));
+
+	if (IS_ENABLED(CONFIG_TRACE_IRQFLAGS) && softirq_count() == cnt) {
+		raw_local_irq_save(flags);
+		lockdep_softirqs_on(_RET_IP_);
+		raw_local_irq_restore(flags);
+	}
+
+	newcnt = __this_cpu_sub_return(softirq_ctrl.cnt, cnt);
+	current->softirq_disable_cnt = newcnt;
+
+	if (!newcnt && unlock) {
+		rcu_read_unlock();
+		local_unlock(&softirq_ctrl.lock);
+	}
+}
+
+void __local_bh_enable_ip(unsigned long ip, unsigned int cnt)
+{
+	bool preempt_on = preemptible();
+	unsigned long flags;
+	u32 pending;
+	int curcnt;
+
+	WARN_ON_ONCE(in_irq());
+	lockdep_assert_irqs_enabled();
+
+	local_irq_save(flags);
+	curcnt = __this_cpu_read(softirq_ctrl.cnt);
+
+	/*
+	 * If this is not reenabling soft interrupts, no point in trying to
+	 * run pending ones.
+	 */
+	if (curcnt != cnt)
+		goto out;
+
+	pending = local_softirq_pending();
+	if (!pending || ksoftirqd_running(pending))
+		goto out;
+
+	/*
+	 * If this was called from non preemptible context, wake up the
+	 * softirq daemon.
+	 */
+	if (!preempt_on) {
+		wakeup_softirqd();
+		goto out;
+	}
+
+	/*
+	 * Adjust softirq count to SOFTIRQ_OFFSET which makes
+	 * in_serving_softirq() become true.
+	 */
+	cnt = SOFTIRQ_OFFSET;
+	__local_bh_enable(cnt, false);
+	__do_softirq();
+
+out:
+	__local_bh_enable(cnt, preempt_on);
+	local_irq_restore(flags);
+}
+EXPORT_SYMBOL(__local_bh_enable_ip);
+
+/*
+ * Invoked from ksoftirqd_run() outside of the interrupt disabled section
+ * to acquire the per CPU local lock for reentrancy protection.
+ */
+static inline void ksoftirqd_run_begin(void)
+{
+	__local_bh_disable_ip(_RET_IP_, SOFTIRQ_OFFSET);
+	local_irq_disable();
+}
+
+/* Counterpart to ksoftirqd_run_begin() */
+static inline void ksoftirqd_run_end(void)
+{
+	__local_bh_enable(SOFTIRQ_OFFSET, true);
+	WARN_ON_ONCE(in_interrupt());
+	local_irq_enable();
+}
+
+static inline void softirq_handle_begin(void) { }
+static inline void softirq_handle_end(void) { }
+
+static inline bool should_wake_ksoftirqd(void)
+{
+	return !this_cpu_read(softirq_ctrl.cnt);
+}
+
+static inline void invoke_softirq(void)
+{
+	if (should_wake_ksoftirqd())
+		wakeup_softirqd();
+}
+
+#else /* CONFIG_PREEMPT_RT */
+
+/*
+ * This one is for softirq.c-internal use, where hardirqs are disabled
+ * legitimately:
+ */
+#ifdef CONFIG_TRACE_IRQFLAGS
+void __local_bh_disable_ip(unsigned long ip, unsigned int cnt)
+{
+	unsigned long flags;
+
+	WARN_ON_ONCE(in_irq());
+
+	raw_local_irq_save(flags);
+	/*
+	 * The preempt tracer hooks into preempt_count_add and will break
+	 * lockdep because it calls back into lockdep after SOFTIRQ_OFFSET
+	 * is set and before current->softirq_enabled is cleared.
+	 * We must manually increment preempt_count here and manually
+	 * call the trace_preempt_off later.
+	 */
+	__preempt_count_add(cnt);
+	/*
+	 * Were softirqs turned off above:
+	 */
+	if (softirq_count() == (cnt & SOFTIRQ_MASK))
+		lockdep_softirqs_off(ip);
+	raw_local_irq_restore(flags);
+
+	if (preempt_count() == cnt) {
+#ifdef CONFIG_DEBUG_PREEMPT
+		current->preempt_disable_ip = get_lock_parent_ip();
+#endif
+		trace_preempt_off(CALLER_ADDR0, get_lock_parent_ip());
+	}
+}
+EXPORT_SYMBOL(__local_bh_disable_ip);
+#endif /* CONFIG_TRACE_IRQFLAGS */
+
+static void __local_bh_enable(unsigned int cnt)
+{
+	lockdep_assert_irqs_disabled();
+
+	if (preempt_count() == cnt)
+		trace_preempt_on(CALLER_ADDR0, get_lock_parent_ip());
+
+	if (softirq_count() == (cnt & SOFTIRQ_MASK))
+		lockdep_softirqs_on(_RET_IP_);
+
+	__preempt_count_sub(cnt);
+}
+
+/*
+ * Special-case - softirqs can safely be enabled by __do_softirq(),
+ * without processing still-pending softirqs:
+ */
+void _local_bh_enable(void)
+{
+	WARN_ON_ONCE(in_irq());
+	__local_bh_enable(SOFTIRQ_DISABLE_OFFSET);
+}
+EXPORT_SYMBOL(_local_bh_enable);
+
+void __local_bh_enable_ip(unsigned long ip, unsigned int cnt)
+{
+	WARN_ON_ONCE(in_irq());
+	lockdep_assert_irqs_enabled();
+#ifdef CONFIG_TRACE_IRQFLAGS
+	local_irq_disable();
+#endif
+	/*
+	 * Are softirqs going to be turned on now:
+	 */
+	if (softirq_count() == SOFTIRQ_DISABLE_OFFSET)
+		lockdep_softirqs_on(ip);
+	/*
+	 * Keep preemption disabled until we are done with
+	 * softirq processing:
+	 */
+	__preempt_count_sub(cnt - 1);
+
+	if (unlikely(!in_interrupt() && local_softirq_pending())) {
+		/*
+		 * Run softirq if any pending. And do it in its own stack
+		 * as we may be calling this deep in a task call stack already.
+		 */
+		do_softirq();
+	}
+
+	preempt_count_dec();
+#ifdef CONFIG_TRACE_IRQFLAGS
+	local_irq_enable();
+#endif
+	preempt_check_resched();
+}
+EXPORT_SYMBOL(__local_bh_enable_ip);
+
+static inline void softirq_handle_begin(void)
+{
+	__local_bh_disable_ip(_RET_IP_, SOFTIRQ_OFFSET);
+}
+
+static inline void softirq_handle_end(void)
+{
+	__local_bh_enable(SOFTIRQ_OFFSET);
+	WARN_ON_ONCE(in_interrupt());
+}
+
+static inline void ksoftirqd_run_begin(void)
+{
+	local_irq_disable();
+}
+
+static inline void ksoftirqd_run_end(void)
+{
+	local_irq_enable();
+}
+
+static inline bool should_wake_ksoftirqd(void)
+{
+	return true;
+}
+
+static inline void invoke_softirq(void)
+{
+	if (ksoftirqd_running(local_softirq_pending()))
+		return;
+
+	if (!force_irqthreads || !__this_cpu_read(ksoftirqd)) {
+#ifdef CONFIG_HAVE_IRQ_EXIT_ON_IRQ_STACK
+		/*
+		 * We can safely execute softirq on the current stack if
+		 * it is the irq stack, because it should be near empty
+		 * at this stage.
+		 */
+		__do_softirq();
+#else
+		/*
+		 * Otherwise, irq_exit() is called on the task stack that can
+		 * be potentially deep already. So call softirq in its own stack
+		 * to prevent from any overrun.
+		 */
+		do_softirq_own_stack();
+#endif
+	} else {
+		wakeup_softirqd();
+	}
+}
+
+asmlinkage __visible void do_softirq(void)
+{
+	__u32 pending;
+	unsigned long flags;
+
+	if (in_interrupt())
+		return;
+
+	local_irq_save(flags);
+
+	pending = local_softirq_pending();
+
+	if (pending && !ksoftirqd_running(pending))
+		do_softirq_own_stack();
+
+	local_irq_restore(flags);
+}
+
+#endif /* !CONFIG_PREEMPT_RT */
+
+/*
+ * We restart softirq processing for at most MAX_SOFTIRQ_RESTART times,
+ * but break the loop if need_resched() is set or after 2 ms.
+ * The MAX_SOFTIRQ_TIME provides a nice upper bound in most cases, but in
+ * certain cases, such as stop_machine(), jiffies may cease to
+ * increment and so we need the MAX_SOFTIRQ_RESTART limit as
+ * well to make sure we eventually return from this method.
+ *
+ * These limits have been established via experimentation.
+ * The two things to balance is latency against fairness -
+ * we want to handle softirqs as soon as possible, but they
+ * should not be able to lock up the box.
+ */
+#define MAX_SOFTIRQ_TIME  msecs_to_jiffies(2)
+#define MAX_SOFTIRQ_RESTART 10
+
+#ifdef CONFIG_TRACE_IRQFLAGS
+/*
+ * When we run softirqs from irq_exit() and thus on the hardirq stack we need
+ * to keep the lockdep irq context tracking as tight as possible in order to
+ * not miss-qualify lock contexts and miss possible deadlocks.
+ */
+
+static inline bool lockdep_softirq_start(void)
+{
+	bool in_hardirq = false;
+
+	if (lockdep_hardirq_context()) {
+		in_hardirq = true;
+		lockdep_hardirq_exit();
+	}
+
+	lockdep_softirq_enter();
+
+	return in_hardirq;
+}
+
+static inline void lockdep_softirq_end(bool in_hardirq)
+{
+	lockdep_softirq_exit();
+
+	if (in_hardirq)
+		lockdep_hardirq_enter();
+}
+#else
+static inline bool lockdep_softirq_start(void) { return false; }
+static inline void lockdep_softirq_end(bool in_hardirq) { }
+#endif
+
+asmlinkage __visible void __softirq_entry __do_softirq(void)
+{
+	unsigned long end = jiffies + MAX_SOFTIRQ_TIME;
+	unsigned long old_flags = current->flags;
+	int max_restart = MAX_SOFTIRQ_RESTART;
+	struct softirq_action *h;
+	bool in_hardirq;
+	__u32 pending;
+	int softirq_bit;
+
+	/*
+	 * Mask out PF_MEMALLOC as the current task context is borrowed for the
+	 * softirq. A softirq handled, such as network RX, might set PF_MEMALLOC
+	 * again if the socket is related to swapping.
+	 */
+	current->flags &= ~PF_MEMALLOC;
+
+	pending = local_softirq_pending();
+
+	softirq_handle_begin();
+	in_hardirq = lockdep_softirq_start();
+	account_softirq_enter(current);
+
+restart:
+	/* Reset the pending bitmask before enabling irqs */
+	set_softirq_pending(0);
+
+	local_irq_enable();
+
+	h = softirq_vec;
+
+	while ((softirq_bit = ffs(pending))) {
+		unsigned int vec_nr;
+		int prev_count;
+
+		h += softirq_bit - 1;
+
+		vec_nr = h - softirq_vec;
+		prev_count = preempt_count();
+
+		kstat_incr_softirqs_this_cpu(vec_nr);
+
+		trace_softirq_entry(vec_nr);
+		h->action(h);
+		trace_softirq_exit(vec_nr);
+		if (unlikely(prev_count != preempt_count())) {
+			pr_err("huh, entered softirq %u %s %p with preempt_count %08x, exited with %08x?\n",
+			       vec_nr, softirq_to_name[vec_nr], h->action,
+			       prev_count, preempt_count());
+			preempt_count_set(prev_count);
+		}
+		h++;
+		pending >>= softirq_bit;
+	}
+
+	if (!IS_ENABLED(CONFIG_PREEMPT_RT) &&
+	    __this_cpu_read(ksoftirqd) == current)
+		rcu_softirq_qs();
+
+	local_irq_disable();
+
+	pending = local_softirq_pending();
+	if (pending) {
+		if (time_before(jiffies, end) && !need_resched() &&
+		    --max_restart)
+			goto restart;
+
+		wakeup_softirqd();
+	}
+
+	account_softirq_exit(current);
+	lockdep_softirq_end(in_hardirq);
+	softirq_handle_end();
+	current_restore_flags(old_flags, PF_MEMALLOC);
+}
+
+/**
+ * irq_enter_rcu - Enter an interrupt context with RCU watching
+ */
+void irq_enter_rcu(void)
+{
+	__irq_enter_raw();
+
+	if (is_idle_task(current) && (irq_count() == HARDIRQ_OFFSET))
+		tick_irq_enter();
+
+	account_hardirq_enter(current);
+}
+
+/**
+ * irq_enter - Enter an interrupt context including RCU update
+ */
+void irq_enter(void)
+{
+	rcu_irq_enter();
+	irq_enter_rcu();
+}
+
+static inline void tick_irq_exit(void)
+{
+#ifdef CONFIG_NO_HZ_COMMON
+	int cpu = smp_processor_id();
+
+	/* Make sure that timer wheel updates are propagated */
+	if ((idle_cpu(cpu) && !need_resched()) || tick_nohz_full_cpu(cpu)) {
+		if (!in_irq())
+			tick_nohz_irq_exit();
+	}
+#endif
+}
+
+static inline void __irq_exit_rcu(void)
+{
+#ifndef __ARCH_IRQ_EXIT_IRQS_DISABLED
+	local_irq_disable();
+#else
+	lockdep_assert_irqs_disabled();
+#endif
+	account_hardirq_exit(current);
+	preempt_count_sub(HARDIRQ_OFFSET);
+	if (!in_interrupt() && local_softirq_pending())
+		invoke_softirq();
+
+	tick_irq_exit();
+}
+
+/**
+ * irq_exit_rcu() - Exit an interrupt context without updating RCU
+ *
+ * Also processes softirqs if needed and possible.
+ */
+void irq_exit_rcu(void)
+{
+	__irq_exit_rcu();
+	 /* must be last! */
+	lockdep_hardirq_exit();
+}
+
+/**
+ * irq_exit - Exit an interrupt context, update RCU and lockdep
+ *
+ * Also processes softirqs if needed and possible.
+ */
+void irq_exit(void)
+{
+	__irq_exit_rcu();
+	rcu_irq_exit();
+	 /* must be last! */
+	lockdep_hardirq_exit();
+}
+
+/*
+ * This function must run with irqs disabled!
+ */
+inline void raise_softirq_irqoff(unsigned int nr)
+{
+	__raise_softirq_irqoff(nr);
+
+	/*
+	 * If we're in an interrupt or softirq, we're done
+	 * (this also catches softirq-disabled code). We will
+	 * actually run the softirq once we return from
+	 * the irq or softirq.
+	 *
+	 * Otherwise we wake up ksoftirqd to make sure we
+	 * schedule the softirq soon.
+	 */
+	if (!in_interrupt() && should_wake_ksoftirqd())
+		wakeup_softirqd();
+}
+
+void raise_softirq(unsigned int nr)
+{
+	unsigned long flags;
+
+	local_irq_save(flags);
+	raise_softirq_irqoff(nr);
+	local_irq_restore(flags);
+}
+
+void __raise_softirq_irqoff(unsigned int nr)
+{
+	lockdep_assert_irqs_disabled();
+	trace_softirq_raise(nr);
+	or_softirq_pending(1UL << nr);
+}
+
+void open_softirq(int nr, void (*action)(struct softirq_action *))
+{
+	softirq_vec[nr].action = action;
+}
+
+/*
+ * Tasklets (this part modified)
+ */
+
+
+void tasklet_setup(struct tasklet_struct * t,
+                   void (* callback)(struct tasklet_struct *))
+{
+	t->next = NULL;
+	t->state = 0;
+	atomic_set(&t->count, 0);
+	t->callback = callback;
+	t->use_callback = true;
+	t->data = 0;
+}
+
+void tasklet_kill(struct tasklet_struct *t)
+{
+	/* There's nothing to do, since tasklets in the emulator get run
+	synchronously */
+	(void) t;
+}
+
+void __tasklet_schedule(struct tasklet_struct * t)
+{
+	if (!atomic_read(&t->count)) {
+		if (test_and_clear_bit(TASKLET_STATE_SCHED, &t->state))
+			t->callback(t);
+	}
+}
+
+
+void __tasklet_hi_schedule(struct tasklet_struct * t)
+{
+	if (!atomic_read(&t->count)) {
+	if (test_and_clear_bit(TASKLET_STATE_SCHED, &t->state))
+		t->callback(t);
+	}
+}
+
+void __init softirq_init(void) { }
+
+void tasklet_unlock_wait(struct tasklet_struct *t) { }
+
+/*
+ * Old tasklet code
+ */
+#if 0
+struct tasklet_head {
+	struct tasklet_struct *head;
+	struct tasklet_struct **tail;
+};
+
+static DEFINE_PER_CPU(struct tasklet_head, tasklet_vec);
+static DEFINE_PER_CPU(struct tasklet_head, tasklet_hi_vec);
+
+static void __tasklet_schedule_common(struct tasklet_struct *t,
+				      struct tasklet_head __percpu *headp,
+				      unsigned int softirq_nr)
+{
+	struct tasklet_head *head;
+	unsigned long flags;
+
+	local_irq_save(flags);
+	head = this_cpu_ptr(headp);
+	t->next = NULL;
+	*head->tail = t;
+	head->tail = &(t->next);
+	raise_softirq_irqoff(softirq_nr);
+	local_irq_restore(flags);
+}
+
+void __tasklet_schedule(struct tasklet_struct *t)
+{
+	__tasklet_schedule_common(t, &tasklet_vec,
+				  TASKLET_SOFTIRQ);
+}
+EXPORT_SYMBOL(__tasklet_schedule);
+
+void __tasklet_hi_schedule(struct tasklet_struct *t)
+{
+	__tasklet_schedule_common(t, &tasklet_hi_vec,
+				  HI_SOFTIRQ);
+}
+EXPORT_SYMBOL(__tasklet_hi_schedule);
+
+static bool tasklet_clear_sched(struct tasklet_struct *t)
+{
+	if (test_and_clear_bit(TASKLET_STATE_SCHED, &t->state)) {
+		wake_up_var(&t->state);
+		return true;
+	}
+
+	WARN_ONCE(1, "tasklet SCHED state not set: %s %pS\n",
+		  t->use_callback ? "callback" : "func",
+		  t->use_callback ? (void *)t->callback : (void *)t->func);
+
+	return false;
+}
+
+static void tasklet_action_common(struct softirq_action *a,
+				  struct tasklet_head *tl_head,
+				  unsigned int softirq_nr)
+{
+	struct tasklet_struct *list;
+
+	local_irq_disable();
+	list = tl_head->head;
+	tl_head->head = NULL;
+	tl_head->tail = &tl_head->head;
+	local_irq_enable();
+
+	while (list) {
+		struct tasklet_struct *t = list;
+
+		list = list->next;
+
+		if (tasklet_trylock(t)) {
+			if (!atomic_read(&t->count)) {
+				if (tasklet_clear_sched(t)) {
+					if (t->use_callback)
+						t->callback(t);
+					else
+						t->func(t->data);
+				}
+				tasklet_unlock(t);
+				continue;
+			}
+			tasklet_unlock(t);
+		}
+
+		local_irq_disable();
+		t->next = NULL;
+		*tl_head->tail = t;
+		tl_head->tail = &t->next;
+		__raise_softirq_irqoff(softirq_nr);
+		local_irq_enable();
+	}
+}
+
+static __latent_entropy void tasklet_action(struct softirq_action *a)
+{
+	tasklet_action_common(a, this_cpu_ptr(&tasklet_vec), TASKLET_SOFTIRQ);
+}
+
+static __latent_entropy void tasklet_hi_action(struct softirq_action *a)
+{
+	tasklet_action_common(a, this_cpu_ptr(&tasklet_hi_vec), HI_SOFTIRQ);
+}
+
+void tasklet_setup(struct tasklet_struct *t,
+		   void (*callback)(struct tasklet_struct *))
+{
+	t->next = NULL;
+	t->state = 0;
+	atomic_set(&t->count, 0);
+	t->callback = callback;
+	t->use_callback = true;
+	t->data = 0;
+}
+EXPORT_SYMBOL(tasklet_setup);
+
+void tasklet_init(struct tasklet_struct *t,
+		  void (*func)(unsigned long), unsigned long data)
+{
+	t->next = NULL;
+	t->state = 0;
+	atomic_set(&t->count, 0);
+	t->func = func;
+	t->use_callback = false;
+	t->data = data;
+}
+EXPORT_SYMBOL(tasklet_init);
+
+#if defined(CONFIG_SMP) || defined(CONFIG_PREEMPT_RT)
+/*
+ * Do not use in new code. Waiting for tasklets from atomic contexts is
+ * error prone and should be avoided.
+ */
+void tasklet_unlock_spin_wait(struct tasklet_struct *t)
+{
+	while (test_bit(TASKLET_STATE_RUN, &(t)->state)) {
+		if (IS_ENABLED(CONFIG_PREEMPT_RT)) {
+			/*
+			 * Prevent a live lock when current preempted soft
+			 * interrupt processing or prevents ksoftirqd from
+			 * running. If the tasklet runs on a different CPU
+			 * then this has no effect other than doing the BH
+			 * disable/enable dance for nothing.
+			 */
+			local_bh_disable();
+			local_bh_enable();
+		} else {
+			cpu_relax();
+		}
+	}
+}
+EXPORT_SYMBOL(tasklet_unlock_spin_wait);
+#endif
+
+void tasklet_kill(struct tasklet_struct *t)
+{
+	if (in_interrupt())
+		pr_notice("Attempt to kill tasklet from interrupt\n");
+
+	while (test_and_set_bit(TASKLET_STATE_SCHED, &t->state))
+		wait_var_event(&t->state, !test_bit(TASKLET_STATE_SCHED, &t->state));
+
+	tasklet_unlock_wait(t);
+	tasklet_clear_sched(t);
+}
+EXPORT_SYMBOL(tasklet_kill);
+
+#if defined(CONFIG_SMP) || defined(CONFIG_PREEMPT_RT)
+void tasklet_unlock(struct tasklet_struct *t)
+{
+	smp_mb__before_atomic();
+	clear_bit(TASKLET_STATE_RUN, &t->state);
+	smp_mb__after_atomic();
+	wake_up_var(&t->state);
+}
+EXPORT_SYMBOL_GPL(tasklet_unlock);
+
+void tasklet_unlock_wait(struct tasklet_struct *t)
+{
+	wait_var_event(&t->state, !test_bit(TASKLET_STATE_RUN, &t->state));
+}
+EXPORT_SYMBOL_GPL(tasklet_unlock_wait);
+#endif
+
+void __init softirq_init(void)
+{
+	int cpu;
+
+	for_each_possible_cpu(cpu) {
+		per_cpu(tasklet_vec, cpu).tail =
+			&per_cpu(tasklet_vec, cpu).head;
+		per_cpu(tasklet_hi_vec, cpu).tail =
+			&per_cpu(tasklet_hi_vec, cpu).head;
+	}
+
+	open_softirq(TASKLET_SOFTIRQ, tasklet_action);
+	open_softirq(HI_SOFTIRQ, tasklet_hi_action);
+}
+
+static int ksoftirqd_should_run(unsigned int cpu)
+{
+	return local_softirq_pending();
+}
+
+static void run_ksoftirqd(unsigned int cpu)
+{
+	ksoftirqd_run_begin();
+	if (local_softirq_pending()) {
+		/*
+		 * We can safely run softirq on inline stack, as we are not deep
+		 * in the task stack here.
+		 */
+		__do_softirq();
+		ksoftirqd_run_end();
+		cond_resched();
+		return;
+	}
+	ksoftirqd_run_end();
+}
+
+#ifdef CONFIG_HOTPLUG_CPU
+static int takeover_tasklets(unsigned int cpu)
+{
+	/* CPU is dead, so no lock needed. */
+	local_irq_disable();
+
+	/* Find end, append list for that CPU. */
+	if (&per_cpu(tasklet_vec, cpu).head != per_cpu(tasklet_vec, cpu).tail) {
+		*__this_cpu_read(tasklet_vec.tail) = per_cpu(tasklet_vec, cpu).head;
+		__this_cpu_write(tasklet_vec.tail, per_cpu(tasklet_vec, cpu).tail);
+		per_cpu(tasklet_vec, cpu).head = NULL;
+		per_cpu(tasklet_vec, cpu).tail = &per_cpu(tasklet_vec, cpu).head;
+	}
+	raise_softirq_irqoff(TASKLET_SOFTIRQ);
+
+	if (&per_cpu(tasklet_hi_vec, cpu).head != per_cpu(tasklet_hi_vec, cpu).tail) {
+		*__this_cpu_read(tasklet_hi_vec.tail) = per_cpu(tasklet_hi_vec, cpu).head;
+		__this_cpu_write(tasklet_hi_vec.tail, per_cpu(tasklet_hi_vec, cpu).tail);
+		per_cpu(tasklet_hi_vec, cpu).head = NULL;
+		per_cpu(tasklet_hi_vec, cpu).tail = &per_cpu(tasklet_hi_vec, cpu).head;
+	}
+	raise_softirq_irqoff(HI_SOFTIRQ);
+
+	local_irq_enable();
+	return 0;
+}
+#else
+#define takeover_tasklets	NULL
+#endif /* CONFIG_HOTPLUG_CPU */
+
+static struct smp_hotplug_thread softirq_threads = {
+	.store			= &ksoftirqd,
+	.thread_should_run	= ksoftirqd_should_run,
+	.thread_fn		= run_ksoftirqd,
+	.thread_comm		= "ksoftirqd/%u",
+};
+
+static __init int spawn_ksoftirqd(void)
+{
+	cpuhp_setup_state_nocalls(CPUHP_SOFTIRQ_DEAD, "softirq:dead", NULL,
+				  takeover_tasklets);
+	BUG_ON(smpboot_register_percpu_thread(&softirq_threads));
+
+	return 0;
+}
+early_initcall(spawn_ksoftirqd);
+#endif /* 0 */
+
+/*
+ * [ These __weak aliases are kept in a separate compilation unit, so that
+ *   GCC does not inline them incorrectly. ]
+ */
+
+int __init __weak early_irq_init(void)
+{
+	return 0;
+}
+
+int __init __weak arch_probe_nr_irqs(void)
+{
+	return NR_IRQS_LEGACY;
+}
+
+int __init __weak arch_early_irq_init(void)
+{
+	return 0;
+}
+
+unsigned int __weak arch_dynirq_lower_bound(unsigned int from)
+{
+	return from;
+}
\ No newline at end of file
diff -ruN pc/src/lib/wifi/lx_emul.c world/src/lib/wifi_ath9k/lx_emul.c
--- pc/src/lib/wifi/lx_emul.c	2023-01-15 14:04:13.681040314 +0000
+++ world/src/lib/wifi_ath9k/lx_emul.c	2023-01-15 13:49:43.962974151 +0000
@@ -136,7 +136,6 @@
 
 #include <linux/firmware.h>
 
-#if 0
 struct firmware_work {
 	struct work_struct work;
 	struct firmware const *firmware;
@@ -154,7 +153,6 @@
 
 	kfree(fw_work);
 }
-#endif
 
 
 extern int lx_emul_request_firmware_nowait(const char *name, void *dest,
@@ -172,16 +170,17 @@
                                           void * context))
 {
 	struct firmware *fw = kzalloc(sizeof (struct firmware), GFP_KERNEL);
-#if 0
+
 	struct firmware_work *fw_work;
-#endif
+
 	bool reg_db;
+	(void) reg_db; /* prevent warning if unused */
 
 	if (lx_emul_request_firmware_nowait(name, &fw->data, &fw->size, true)) {
 		kfree(fw);
 		return -1;
 	}
-
+#if 0
 	/*
 	 * Normally we would schedule fw_work but for reasons not
 	 * yet understood doing so will lead to a page-fault. So
@@ -199,8 +198,8 @@
 	if (reg_db)
 		rtnl_lock();
 	return 0;
+#endif
 
-#if 0
 	fw_work = kzalloc(sizeof (struct firmware_work), GFP_KERNEL);
 	if (!fw_work) {
 		kfree(fw);
@@ -215,7 +214,6 @@
 	schedule_work(&fw_work->work);
 
 	return 0;
-#endif
 }
 
 
@@ -460,6 +458,8 @@
 	unsigned int const order = fragsz / PAGE_SIZE;
 	struct page *page = __alloc_pages(gfp_mask, order, 0, NULL);
 
+	(void)nc;
+
 	if (!page)
 		return NULL;
 
@@ -594,58 +594,8 @@
 		 */
 		case PCI_CFG_RETRY_TIMEOUT:
 			return 0;
-
-	/*
-	 * rtlwifi: "leave D3 mode"
-	 */
-	case 0x44:
-	case PCI_COMMAND:
-		return 0;
-	/*
-	 * rtlwifi: needed for enabling DMA 64bit support
-	 */
-	case 0x719:
-		return 0;
-	/*
-	 * rtlwifi: below are registers related to ASPM and PCI link
-	 *          control that we do not handle (yet).
-	 */
-	case 0x81:
-	case 0x98:
-		return 0;
 	};
-
-	return -1;
-}
-
-
-int pci_write_config_dword(const struct pci_dev * dev,int where,u32 val)
-{
-	switch (where) {
-	/*
-	 * ath9k: "Disable the bETRY_TIMEOUT register (0x41) to keep
-	 *        PCI Tx retries from interfering with C3 CPU state."
-	 */
-	case 0x40:
-		return 0;
-	}
-
-	return -1;
-}
-
-
-int pci_read_config_dword(const struct pci_dev * dev,int where,u32 * val)
-{
-	switch (where) {
-	/*
-	 * ath9k: "Disable the bETRY_TIMEOUT register (0x41) to keep
-	 *        PCI Tx retries from interfering with C3 CPU state."
-	 */
-	case 0x40:
-		return 0;
-	}
-
-	return -1;
+	lx_emul_trace_and_stop(__func__);
 }
 
 
@@ -655,82 +605,6 @@
 		case PCI_COMMAND:
 			*val = PCI_COMMAND_MASTER | PCI_COMMAND_MEMORY | PCI_COMMAND_IO;
 			return 0;
-	/*
-	 * rtlwifi: read but ignored
-	 */
-	case PCI_INTERRUPT_LINE:
-		*val = 0;
-		return 0;
 	};
-
-	return -1;
-}
-
-
-int pci_read_config_byte(const struct pci_dev * dev,int where,u8 * val)
-{
-	switch (where) {
-	/*
-	 * rtlwifi: apparently needed for device distinction
-	 */
-	case PCI_REVISION_ID:
-		*val = dev->revision;
-		return 0;
-	/*
-	 * rtlwifi: needed for enabling DMA 64bit support
-	 */
-	case 0x719:
-		*val = 0;
-		return 0;
-	/*
-	 * rtlwifi: below are registers related to ASPM and PCI link
-	 *          control that we do not handle (yet).
-	 */
-	case 0x80:
-	case 0x81:
-	case 0x98:
-		*val = 0;
-		return 0;
-	}
-
-	return -1;
-}
-
-
-void __iomem *pci_iomap(struct pci_dev *dev, int bar, unsigned long maxlen)
-{
-	struct resource *r;
-	unsigned long phys_addr;
-	unsigned long size;
-
-	if (!dev || bar > 5) {
-		printk("%s:%d: invalid request for dev: %p bar: %d\n",
-			   __func__, __LINE__, dev, bar);
-		return NULL;
-	}
-
-	printk("pci_iomap: request for dev: %s bar: %d\n", dev_name(&dev->dev), bar);
-
-	r = &dev->resource[bar];
-
-	phys_addr = r->start;
-	size      = r->end - r->start;
-
-	if (!phys_addr || !size)
-		return NULL;
-
-	return lx_emul_io_mem_map(phys_addr, size);
-}
-
-
-void __iomem *pcim_iomap(struct pci_dev *pdev, int bar, unsigned long maxlen)
-{
-	return pci_iomap(pdev, bar, maxlen);
-}
-
-
-void *dmam_alloc_attrs(struct device *dev, size_t size, dma_addr_t *dma_handle,
-                       gfp_t gfp, unsigned long attrs)
-{
-	return dma_alloc_attrs(dev, size, dma_handle, gfp, attrs);
+	lx_emul_trace_and_stop(__func__);
 }
diff -ruN pc/src/lib/wifi/lx_emul.h world/src/lib/wifi_ath9k/lx_emul.h
--- pc/src/lib/wifi/lx_emul.h	2022-05-27 12:45:41.996234498 +0000
+++ world/src/lib/wifi_ath9k/lx_emul.h	2023-01-15 13:49:43.962974151 +0000
@@ -28,8 +28,9 @@
 
 void lx_emul_time_udelay(unsigned long usec);
 
-int  lx_emul_rfkill_get_any(void);
-void lx_emul_rfkill_switch_all(int blocked);
+void         lx_emul_get_random_bytes(void *buf, unsigned long nbytes);
+unsigned int lx_emul_get_random_u32(void);
+
 
 #ifdef __cplusplus
 }
diff -ruN pc/src/lib/wifi/lx_socket_call.h world/src/lib/wifi_ath9k/lx_socket_call.h
--- pc/src/lib/wifi/lx_socket_call.h	2023-01-15 14:04:13.735039635 +0000
+++ world/src/lib/wifi_ath9k/lx_socket_call.h	2023-01-15 13:49:43.962974151 +0000
@@ -57,7 +57,7 @@
                        void const *optval, unsigned optlen);
 unsigned char const* lx_get_mac_addr(void);
 unsigned int lx_get_wifi_ifindex(const char *ifname);
-int lx_ioctl(unsigned long request, void *ifr);
+int lx_ioctl(unsigned long request, void * ifr);
 
 struct lx_poll_result
 {
diff -ruN pc/src/lib/wifi/lx_usb_wrapper.c world/src/lib/wifi_ath9k/lx_usb_wrapper.c
--- pc/src/lib/wifi/lx_usb_wrapper.c	1970-01-01 00:00:00.000000000 +0000
+++ world/src/lib/wifi_ath9k/lx_usb_wrapper.c	2023-01-15 13:49:43.962974151 +0000
@@ -0,0 +1,515 @@
+/**
+* \brief  Wrapper for linux usb structures
+* \author Colin Parker
+* \date   2021-07-02
+*/
+
+/*
+* Copyright (C) 2021 Colin Parker
+*
+* This file is distributed under the terms of the GNU General Public License
+* version 2.
+*/
+
+#include <linux/usb.h>
+
+static struct usb_driver lx_driver;
+static int driver_registered = 0;
+static void * cxx_context_ptr;
+
+DECLARE_WAIT_QUEUE_HEAD(usb_kill_urb_queue);
+
+
+int usb_register_driver(struct usb_driver * new_driver, struct module * owner,
+                        const char * mod_name)
+{
+	(void) owner;
+	(void) mod_name;
+
+	if (driver_registered) return -1;
+
+	printk("Genode emulation usb driver registered.\n");
+
+	driver_registered = 1;
+	lx_driver = *new_driver;
+
+	return 0;
+}
+
+
+struct usb_device * usb_get_dev(struct usb_device *dev)
+{
+	if (dev)
+		dev->dev.kobj.kref.refcount.refs.counter++;
+	return dev;
+}
+
+
+void usb_put_dev(struct usb_device *dev)
+{
+	if (dev)
+		dev->dev.kobj.kref.refcount.refs.counter--;
+}
+
+int cxx_usb_control_msg(void *, unsigned int, __u8, __u8, __u16, __u16, void *,
+                        __u16, int);
+
+int usb_control_msg(struct usb_device * dev, unsigned int pipe, __u8 request,
+					__u8 requesttype, __u16 value, __u16 index, void * data,
+					__u16 size, int timeout)
+{
+	return cxx_usb_control_msg(cxx_context_ptr, pipe, request, requesttype,
+                               value, index, data, size, timeout);
+}
+
+
+void usb_init_urb(struct urb *urb)
+{
+	if (urb) {
+		memset(urb, 0, sizeof(*urb));
+		kref_init(&urb->kref);
+		INIT_LIST_HEAD(&urb->urb_list);
+		INIT_LIST_HEAD(&urb->anchor_list);
+	}
+}
+
+
+enum { URB_ARRAY_SIZE = 256 };
+static struct urb urb_array[URB_ARRAY_SIZE];
+struct urb * usb_alloc_urb(int iso_packets, gfp_t mem_flags)
+{
+	static int urb_offset = 0;
+
+	int i;
+	int num_used = 0;
+	
+	(void) mem_flags;
+	if (iso_packets > 0) {
+		printk("Error: Isochronous USB not supported.");
+		return NULL;
+	}
+
+	for (i = 0; i < URB_ARRAY_SIZE; ++i) {
+		int elem = (i + urb_offset) % URB_ARRAY_SIZE;
+
+		if (urb_array[elem].kref.refcount.refs.counter == 0) {
+			urb_offset = (elem + 1) % URB_ARRAY_SIZE;
+			usb_init_urb(&urb_array[elem]);
+			atomic_set(&urb_array[elem].use_count, 0);
+			return &urb_array[elem];
+		}
+		else num_used++;
+	}
+	printk("usb_alloc_urb: num_used is %d, urb_offset is %d.\n",
+	       num_used, urb_offset);
+	printk("Error: No more URBs available.\n");
+	return NULL;
+}
+
+
+static void urb_destroy(struct kref * urb)
+{
+	(void)urb;
+}
+
+
+int cxx_usb_submit_urb(void * context_ptr, unsigned int pipe, void * buffer, u32 buf_size, void *urb);
+
+int usb_submit_urb(struct urb *urb, gfp_t mem_flags)
+{
+	int return_val;
+	(void) mem_flags;
+
+	if ( !urb || !urb->complete) return -EINVAL;
+
+	if ( atomic_read(&urb->reject) ) return -EPERM;
+
+	usb_get_urb(urb);
+	atomic_inc(&urb->use_count);
+
+	return_val = cxx_usb_submit_urb(cxx_context_ptr,
+	                                usb_pipeendpoint(urb->pipe),
+	                                urb->transfer_buffer,
+	                                urb->transfer_buffer_length, (void *)urb);
+	if (return_val) {
+		atomic_dec(&urb->use_count);
+		usb_put_urb(urb);
+	}
+	return return_val;
+}
+
+
+void lx_usb_do_urb_callback(void * in_urb, int succeeded, int inbound, void * buffer, int buf_size)
+{
+	struct urb * urb = (struct urb *)in_urb;
+
+	if (succeeded) {
+		urb->status = 0;
+		if (inbound) {
+			memcpy(urb->transfer_buffer, buffer, buf_size);
+		}
+	}
+	else urb->status = -1;
+	urb->actual_length = buf_size;
+
+	usb_unanchor_urb(urb);
+	urb->complete(urb);
+	atomic_dec(&urb->use_count);
+	wake_up(&usb_kill_urb_queue);
+	usb_put_urb(urb);
+}
+
+/* A single global device and its interface are allowed */
+static struct usb_host_interface ath9k_host_if = { 0 };
+static struct usb_device ath9k_usb_dev = { 0 };
+static struct usb_interface ath9k_usb_if = { 0 };
+static struct usb_device_id ath9k_dev_id = {USB_DEVICE(0, 0)};
+static struct usb_host_config ath9k_host_cfg = { 0 };
+
+
+int lx_usb_handle_connect(
+	uint16_t vend_id,
+	uint16_t prod_id,
+	void * if_desc, /* usb_interface_descriptor * */
+	void * cfg_desc, /* usb_config_descriptor * */
+	void * ep_array,
+	void * context_ptr)
+{	
+	static int device_registered = 0;
+	static int interface_registered = 0;
+	int err;
+
+	cxx_context_ptr = context_ptr;
+
+	/* Preparation of the usb_host_interface */
+	memcpy(&ath9k_host_if.desc, if_desc, sizeof(struct usb_host_interface));
+	ath9k_host_if.endpoint = ep_array;
+
+	/* Prepartion of the usb_device */
+	if ( !device_registered ) {
+		ath9k_usb_dev.devnum = 7; /* lucky number */
+		ath9k_usb_dev.actconfig = &ath9k_host_cfg;
+		dev_set_name(&ath9k_usb_dev.dev, "ath9k_usb_dev");
+		if ( ( err = device_register(&ath9k_usb_dev.dev) ) ) {
+			printk("Device register failed.\n");
+			return err;
+		}
+		device_registered = 1;
+	}
+
+	/* Preparation of the usb_interface */
+	if ( !interface_registered ) {
+		ath9k_usb_if.altsetting = &ath9k_host_if;
+		ath9k_usb_if.cur_altsetting = &ath9k_host_if;
+		ath9k_usb_if.num_altsetting = 1;
+		ath9k_usb_if.usb_dev = (struct device *)&ath9k_usb_dev;
+		ath9k_usb_if.dev.parent = &ath9k_usb_dev.dev;
+		dev_set_name(&ath9k_usb_if.dev, "ath9k_usb_if");
+		if ( ( err = device_register(&ath9k_usb_if.dev) ) ) {
+			printk("Device register failed creating interface.\n");
+			return err;
+		}
+		interface_registered = 1;
+	}
+	
+	/* Preparation of the usb_device id */
+	ath9k_dev_id.idVendor = vend_id;
+	ath9k_dev_id.idProduct = prod_id;
+
+	/* Preparation of the usb_host_config */
+	memcpy(&ath9k_host_cfg.desc, cfg_desc, sizeof(struct usb_config_descriptor));
+	ath9k_host_cfg.interface[0] = &ath9k_usb_if;
+
+	return lx_driver.probe(&ath9k_usb_if, &ath9k_dev_id);
+}
+
+
+void lx_usb_handle_disconnect(void)
+{
+	lx_driver.disconnect(&ath9k_usb_if);
+}
+
+
+size_t lx_usb_host_endpoint_size(void)
+{
+	return sizeof(struct usb_host_endpoint);
+}
+
+
+void * lx_usb_host_to_epdesc(void *in_host)
+{
+	struct usb_host_endpoint *in_host_cast = (struct usb_host_endpoint *)in_host;
+	return (void *)&in_host_cast->desc;
+}
+
+
+void lx_usb_setup_urb(void * urb, void * ep)
+{
+	struct urb * urb_ptr = (struct urb *)urb;
+
+	urb_ptr->ep = (struct usb_host_endpoint *)ep;
+}
+
+
+static struct cred _usb_task_cred;
+
+/* Based on init_task in lx_emul/start.c */
+struct task_struct usb_comp_task = {
+	.__state         = 0,
+	.usage           = REFCOUNT_INIT(2),
+	.flags           = PF_KTHREAD,
+	.prio            = MAX_PRIO - 20,
+	.static_prio     = MAX_PRIO - 20,
+	.normal_prio     = MAX_PRIO - 20,
+	.policy          = SCHED_NORMAL,
+	.cpus_ptr        = &usb_comp_task.cpus_mask,
+	.cpus_mask       = CPU_MASK_ALL,
+	.nr_cpus_allowed = 1,
+	.mm              = NULL,
+	.active_mm       = NULL,
+	.tasks           = LIST_HEAD_INIT(usb_comp_task.tasks),
+	.real_parent     = &usb_comp_task,
+	.parent          = &usb_comp_task,
+	.children        = LIST_HEAD_INIT(usb_comp_task.children),
+	.sibling         = LIST_HEAD_INIT(usb_comp_task.sibling),
+	.group_leader    = &usb_comp_task,
+	.comm            = "lxemul_usb",
+	.thread          = INIT_THREAD,
+	.pending         = {
+		.list   = LIST_HEAD_INIT(usb_comp_task.pending.list),
+		.signal = {{0}}
+	},
+	.blocked         = {{0}},
+	.cred            = &_usb_task_cred,
+};
+void * lx_emul_usb_comp_struct = &usb_comp_task;
+
+struct task_struct usb_conn_task = {
+	.__state         = 0,
+	.usage           = REFCOUNT_INIT(2),
+	.flags           = PF_KTHREAD,
+	.prio            = MAX_PRIO - 20,
+	.static_prio     = MAX_PRIO - 20,
+	.normal_prio     = MAX_PRIO - 20,
+	.policy          = SCHED_NORMAL,
+	.cpus_ptr        = &usb_conn_task.cpus_mask,
+	.cpus_mask       = CPU_MASK_ALL,
+	.nr_cpus_allowed = 1,
+	.mm              = NULL,
+	.active_mm       = NULL,
+	.tasks           = LIST_HEAD_INIT(usb_conn_task.tasks),
+	.real_parent     = &usb_conn_task,
+	.parent          = &usb_conn_task,
+	.children        = LIST_HEAD_INIT(usb_conn_task.children),
+	.sibling         = LIST_HEAD_INIT(usb_conn_task.sibling),
+	.group_leader    = &usb_conn_task,
+	.comm            = "lxemul_usb",
+	.thread          = INIT_THREAD,
+	.pending         = {
+		.list   = LIST_HEAD_INIT(usb_conn_task.pending.list),
+		.signal = {{0}}
+	},
+	.blocked         = {{0}},
+	.cred            = &_usb_task_cred,
+};
+
+void * lx_emul_usb_conn_struct = &usb_conn_task;
+
+/* from drivers/usb/core/usb.c */
+struct usb_interface *usb_ifnum_to_if(const struct usb_device *dev,
+				      unsigned ifnum)
+{
+	struct usb_host_config *config = dev->actconfig;
+	int i;
+
+	if (!config)
+		return NULL;
+	for (i = 0; i < config->desc.bNumInterfaces; i++)
+	{
+		if (config->interface[i]->altsetting[0]
+				.desc.bInterfaceNumber == ifnum)
+			return config->interface[i];
+	}
+
+	return NULL;
+}
+
+
+/* These from usb/core/urb.c */
+
+/**
+ * usb_get_urb - increments the reference count of the urb
+ * @urb: pointer to the urb to modify, may be NULL
+ *
+ * This must be  called whenever a urb is transferred from a device driver to a
+ * host controller driver.  This allows proper reference counting to happen
+ * for urbs.
+ *
+ * Return: A pointer to the urb with the incremented reference counter.
+ */
+struct urb *usb_get_urb(struct urb *urb)
+{
+	/*size_t addr_diff = (size_t)urb - (size_t)urb_array;*/
+	
+	if (urb)
+		kref_get(&urb->kref);
+	
+	return urb;
+}
+
+/**
+ * usb_free_urb - frees the memory used by a urb when all users of it are finished
+ * @urb: pointer to the urb to free, may be NULL
+ *
+ * Must be called when a user of a urb is finished with it.  When the last user
+ * of the urb calls this function, the memory of the urb is freed.
+ *
+ * Note: The transfer buffer associated with the urb is not freed unless the
+ * URB_FREE_BUFFER transfer flag is set.
+ */
+void usb_free_urb(struct urb *urb)
+{
+	/*size_t addr_diff = (size_t)urb - (size_t)urb_array;*/
+	
+	if (urb)
+		kref_put(&urb->kref, urb_destroy);
+}
+
+/**
+ * usb_anchor_urb - anchors an URB while it is processed
+ * @urb: pointer to the urb to anchor
+ * @anchor: pointer to the anchor
+ *
+ * This can be called to have access to URBs which are to be executed
+ * without bothering to track them
+ */
+void usb_anchor_urb(struct urb *urb, struct usb_anchor *anchor)
+{
+	unsigned long flags;
+
+	spin_lock_irqsave(&anchor->lock, flags);
+	usb_get_urb(urb);
+	list_add_tail(&urb->anchor_list, &anchor->urb_list);
+	urb->anchor = anchor;
+
+	if (unlikely(anchor->poisoned))
+		atomic_inc(&urb->reject);
+
+	spin_unlock_irqrestore(&anchor->lock, flags);
+}
+
+static int usb_anchor_check_wakeup(struct usb_anchor *anchor)
+{
+	return atomic_read(&anchor->suspend_wakeups) == 0 &&
+		list_empty(&anchor->urb_list);
+}
+
+/* Callers must hold anchor->lock */
+static void __usb_unanchor_urb(struct urb *urb, struct usb_anchor *anchor)
+{
+	urb->anchor = NULL;
+	list_del(&urb->anchor_list);
+	usb_put_urb(urb);
+	if (usb_anchor_check_wakeup(anchor))
+		wake_up(&anchor->wait);
+}
+
+/**
+ * usb_unanchor_urb - unanchors an URB
+ * @urb: pointer to the urb to anchor
+ *
+ * Call this to stop the system keeping track of this URB
+ */
+void usb_unanchor_urb(struct urb *urb)
+{
+	unsigned long flags;
+	struct usb_anchor *anchor;
+
+	if (!urb)
+		return;
+
+	anchor = urb->anchor;
+	if (!anchor)
+		return;
+
+	spin_lock_irqsave(&anchor->lock, flags);
+	/*
+	 * At this point, we could be competing with another thread which
+	 * has the same intention. To protect the urb from being unanchored
+	 * twice, only the winner of the race gets the job.
+	 */
+	if (likely(anchor == urb->anchor))
+		__usb_unanchor_urb(urb, anchor);
+	spin_unlock_irqrestore(&anchor->lock, flags);
+}
+
+/* above */
+/* DECLARE_WAIT_QUEUE_HEAD(usb_kill_urb_queue); */
+
+/**
+ * usb_kill_urb - cancel a transfer request and wait for it to finish
+ * @urb: pointer to URB describing a previously submitted request,
+ *	may be NULL
+ *
+ * This routine cancels an in-progress request.  It is guaranteed that
+ * upon return all completion handlers will have finished and the URB
+ * will be totally idle and available for reuse.  These features make
+ * this an ideal way to stop I/O in a disconnect() callback or close()
+ * function.  If the request has not already finished or been unlinked
+ * the completion handler will see urb->status == -ENOENT.
+ *
+ * While the routine is running, attempts to resubmit the URB will fail
+ * with error -EPERM.  Thus even if the URB's completion handler always
+ * tries to resubmit, it will not succeed and the URB will become idle.
+ *
+ * The URB must not be deallocated while this routine is running.  In
+ * particular, when a driver calls this routine, it must insure that the
+ * completion handler cannot deallocate the URB.
+ *
+ * This routine may not be used in an interrupt context (such as a bottom
+ * half or a completion handler), or when holding a spinlock, or in other
+ * situations where the caller can't schedule().
+ *
+ * This routine should not be called by a driver after its disconnect
+ * method has returned.
+ */
+void usb_kill_urb(struct urb *urb)
+{
+	might_sleep();
+	if (!(urb && urb->dev && urb->ep))
+		return;
+	atomic_inc(&urb->reject);
+
+	wait_event(usb_kill_urb_queue, atomic_read(&urb->use_count) == 0);
+
+	atomic_dec(&urb->reject);
+}
+
+/**
+ * usb_kill_anchored_urbs - cancel transfer requests en masse
+ * @anchor: anchor the requests are bound to
+ *
+ * this allows all outstanding URBs to be killed starting
+ * from the back of the queue
+ *
+ * This routine should not be called by a driver after its disconnect
+ * method has returned.
+ */
+void usb_kill_anchored_urbs(struct usb_anchor *anchor)
+{
+	struct urb *victim;
+
+	spin_lock_irq(&anchor->lock);
+	while (!list_empty(&anchor->urb_list)) {
+		victim = list_entry(anchor->urb_list.prev, struct urb,
+				    anchor_list);
+		/* we must make sure the URB isn't freed before we kill it*/
+		usb_get_urb(victim);
+		spin_unlock_irq(&anchor->lock);
+		/* this will unanchor the URB */
+		usb_kill_urb(victim);
+		usb_put_urb(victim);
+		spin_lock_irq(&anchor->lock);
+	}
+	spin_unlock_irq(&anchor->lock);
+}
\ No newline at end of file
diff -ruN pc/src/lib/wifi/random.cc world/src/lib/wifi_ath9k/random.cc
--- pc/src/lib/wifi/random.cc	1970-01-01 00:00:00.000000000 +0000
+++ world/src/lib/wifi_ath9k/random.cc	2023-01-15 13:49:43.962974151 +0000
@@ -0,0 +1,111 @@
+/*
+ * \brief  Linux random emulation code
+ * \author Josef Soentgen
+ * \date   2016-10-19
+ *
+ * For all intents and purposes this random back end should be treated
+ * as a gloryfied counter.
+ */
+
+/*
+ * Copyright (C) 2016-2021 Genode Labs GmbH
+ *
+ * This file is distributed under the terms of the GNU General Public License
+ * version 2.
+ */
+
+/* Genode includes */
+#include <base/log.h>
+#include <base/fixed_stdint.h>
+#include <util/string.h>
+
+
+using Genode::uint64_t;
+
+/*
+ * Xoroshiro128+ written in 2014-2016 by Sebastiano Vigna (vigna@acm.org)
+ *
+ * (see http://xoroshiro.di.unimi.it/xorshift128plus.c and
+ *      http://xoroshiro.di.unimi.it/splitmix64.c)
+ */
+
+struct Xoroshiro
+{
+	uint64_t seed;
+
+	uint64_t splitmix64()
+	{
+		uint64_t z = (seed += __UINT64_C(0x9E3779B97F4A7C15));
+		z = (z ^ (z >> 30)) * __UINT64_C(0xBF58476D1CE4E5B9);
+		z = (z ^ (z >> 27)) * __UINT64_C(0x94D049BB133111EB);
+		return z ^ (z >> 31);
+	}
+
+	Xoroshiro(uint64_t seed) : seed(seed)
+	{
+		s[0] = splitmix64();
+		s[1] = splitmix64();
+	}
+
+	uint64_t s[2];
+
+	static uint64_t rotl(uint64_t const x, int k) {
+		return (x << k) | (x >> (64 - k));
+	}
+
+	uint64_t get()
+	{
+		uint64_t const s0 = s[0];
+		uint64_t       s1 = s[1];
+		uint64_t const result = s0 + s1;
+
+		s1 ^= s0;
+
+		s[0] = rotl(s0, 55) ^ s1 ^ (s1 << 14);
+		s[1] = rotl(s1, 36);
+
+		return result;
+	}
+};
+
+
+static Xoroshiro &xoroshiro()
+{
+	static Xoroshiro inst(0x636864324d766931);
+	return inst;
+}
+
+
+/********************
+ ** linux/random.h **
+ ********************/
+
+extern "C" void lx_emul_get_random_bytes(void *buf, unsigned long nbytes)
+{
+	if (!buf || !nbytes)
+		return;
+
+	char *p = reinterpret_cast<char*>(buf);
+
+	unsigned long const rounds = nbytes / 8;
+	for (unsigned long i = 0; i < rounds; i++) {
+		uint64_t const v = xoroshiro().get();
+
+		Genode::memcpy(p, &v, 8);
+		p += 8;
+	}
+
+	unsigned long const remain = nbytes - rounds * 8;
+	if (!remain) {
+		return;
+	}
+
+	uint64_t const v = xoroshiro().get();
+	Genode::memcpy(p, &v, remain);
+}
+
+
+extern "C" unsigned int lx_emul_get_random_u32(void)
+{
+	return (unsigned int)xoroshiro().get();
+}
diff -ruN pc/src/lib/wifi/socket_call.cc world/src/lib/wifi_ath9k/socket_call.cc
--- pc/src/lib/wifi/socket_call.cc	2023-01-15 14:04:13.735039635 +0000
+++ world/src/lib/wifi_ath9k/socket_call.cc	2023-01-15 13:49:43.962974151 +0000
@@ -772,8 +772,8 @@
 	_call.ioctl.request            = request;
 	_call.ioctl.ifr                = ifr;
 	_call.ioctl.reply              = 0;
-
+	
 	_socket->submit_and_block();
 
 	return _call.ioctl.reply;
-}
+}
\ No newline at end of file
diff -ruN pc/src/lib/wifi/spec/x86_32/dep.list world/src/lib/wifi_ath9k/spec/x86_32/dep.list
--- pc/src/lib/wifi/spec/x86_32/dep.list	2022-05-27 12:45:41.996234498 +0000
+++ world/src/lib/wifi_ath9k/spec/x86_32/dep.list	2023-01-15 13:49:43.962974151 +0000
@@ -1,24 +1,1267 @@
-arch/x86/include/asm/checksum_32.h
-arch/x86/include/asm/cmpxchg_32.h
-arch/x86/include/asm/numa_32.h
-arch/x86/include/asm/page_32.h
-arch/x86/include/asm/page_32_types.h
-arch/x86/include/asm/pgtable-2level_types.h
-arch/x86/include/asm/pgtable_32_areas.h
-arch/x86/include/asm/pgtable_32_types.h
-arch/x86/include/asm/user_32.h
-arch/x86/include/uapi/asm/posix_types_32.h
-certs/system_keyring.c
-include/asm-generic/asm-prototypes.h
-include/asm-generic/bitops/fls64.h
-include/asm-generic/pgtable-nopmd.h
-include/asm-generic/pgtable-nopud.h
-include/crypto/pkcs7.h
-include/crypto/public_key.h
-include/keys/asymmetric-type.h
-include/keys/system_keyring.h
-include/linux/key-type.h
-include/linux/keyctl.h
-include/linux/oid_registry.h
-include/uapi/linux/keyctl.h
-kernel/time/tick-broadcast.c
+arch/x86/include/asm/acenv.h
+arch/x86/include/asm/acpi.h
+arch/x86/include/asm/alternative.h
+arch/x86/include/asm/apicdef.h
+arch/x86/include/asm/arch_hweight.h
+arch/x86/include/asm/asm.h
+arch/x86/include/asm/atomic.h
+arch/x86/include/asm/atomic64_64.h
+arch/x86/include/asm/barrier.h
+arch/x86/include/asm/bitops.h
+arch/x86/include/asm/bug.h
+arch/x86/include/asm/cache.h
+arch/x86/include/asm/cacheflush.h
+arch/x86/include/asm/checksum.h
+arch/x86/include/asm/checksum_64.h
+arch/x86/include/asm/clocksource.h
+arch/x86/include/asm/cmpxchg.h
+arch/x86/include/asm/cmpxchg_64.h
+arch/x86/include/asm/compat.h
+arch/x86/include/asm/cpu_entry_area.h
+arch/x86/include/asm/cpufeatures.h
+arch/x86/include/asm/cpumask.h
+arch/x86/include/asm/delay.h
+arch/x86/include/asm/desc.h
+arch/x86/include/asm/desc_defs.h
+arch/x86/include/asm/device.h
+arch/x86/include/asm/disabled-features.h
+arch/x86/include/asm/div64.h
+arch/x86/include/asm/dma.h
+arch/x86/include/asm/elf.h
+arch/x86/include/asm/emergency-restart.h
+arch/x86/include/asm/exec.h
+arch/x86/include/asm/extable.h
+arch/x86/include/asm/fixmap.h
+arch/x86/include/asm/fpu/api.h
+arch/x86/include/asm/fpu/types.h
+arch/x86/include/asm/fsgsbase.h
+arch/x86/include/asm/ftrace.h
+arch/x86/include/asm/hardirq.h
+arch/x86/include/asm/hw_breakpoint.h
+arch/x86/include/asm/hw_irq.h
+arch/x86/include/asm/intel_ds.h
+arch/x86/include/asm/invpcid.h
+arch/x86/include/asm/irq.h
+arch/x86/include/asm/irq_vectors.h
+arch/x86/include/asm/irq_work.h
+arch/x86/include/asm/irqdomain.h
+arch/x86/include/asm/ist.h
+arch/x86/include/asm/jailhouse_para.h
+arch/x86/include/asm/kaslr.h
+arch/x86/include/asm/kdebug.h
+arch/x86/include/asm/kgdb.h
+arch/x86/include/asm/kprobes.h
+arch/x86/include/asm/kvm_para.h
+arch/x86/include/asm/linkage.h
+arch/x86/include/asm/local.h
+arch/x86/include/asm/math_emu.h
+arch/x86/include/asm/mem_encrypt.h
+arch/x86/include/asm/memtype.h
+arch/x86/include/asm/mmu.h
+arch/x86/include/asm/mmu_context.h
+arch/x86/include/asm/module.h
+arch/x86/include/asm/mpspec.h
+arch/x86/include/asm/mpspec_def.h
+arch/x86/include/asm/msi.h
+arch/x86/include/asm/msr-index.h
+arch/x86/include/asm/msr.h
+arch/x86/include/asm/nmi.h
+arch/x86/include/asm/nops.h
+arch/x86/include/asm/numa.h
+arch/x86/include/asm/orc_types.h
+arch/x86/include/asm/page_64_types.h
+arch/x86/include/asm/page_types.h
+arch/x86/include/asm/paravirt.h
+arch/x86/include/asm/pci.h
+arch/x86/include/asm/pci_x86.h
+arch/x86/include/asm/percpu.h
+arch/x86/include/asm/perf_event.h
+arch/x86/include/asm/pgtable_64_types.h
+arch/x86/include/asm/pgtable_areas.h
+arch/x86/include/asm/pgtable_types.h
+arch/x86/include/asm/posix_types.h
+arch/x86/include/asm/preempt.h
+arch/x86/include/asm/processor-flags.h
+arch/x86/include/asm/processor.h
+arch/x86/include/asm/proto.h
+arch/x86/include/asm/pti.h
+arch/x86/include/asm/ptrace.h
+arch/x86/include/asm/required-features.h
+arch/x86/include/asm/rmwcc.h
+arch/x86/include/asm/segment.h
+arch/x86/include/asm/set_memory.h
+arch/x86/include/asm/shmparam.h
+arch/x86/include/asm/signal.h
+arch/x86/include/asm/smap.h
+arch/x86/include/asm/smp.h
+arch/x86/include/asm/sparsemem.h
+arch/x86/include/asm/stacktrace.h
+arch/x86/include/asm/static_call.h
+arch/x86/include/asm/string.h
+arch/x86/include/asm/string_64.h
+arch/x86/include/asm/syscall_wrapper.h
+arch/x86/include/asm/text-patching.h
+arch/x86/include/asm/thread_info.h
+arch/x86/include/asm/timex.h
+arch/x86/include/asm/tlb.h
+arch/x86/include/asm/tlbbatch.h
+arch/x86/include/asm/tlbflush.h
+arch/x86/include/asm/topology.h
+arch/x86/include/asm/trace_clock.h
+arch/x86/include/asm/tsc.h
+arch/x86/include/asm/uaccess.h
+arch/x86/include/asm/unistd.h
+arch/x86/include/asm/unwind_hints.h
+arch/x86/include/asm/user.h
+arch/x86/include/asm/user32.h
+arch/x86/include/asm/user_64.h
+arch/x86/include/asm/vdso.h
+arch/x86/include/asm/vdso/clocksource.h
+arch/x86/include/asm/vdso/processor.h
+arch/x86/include/asm/vga.h
+arch/x86/include/asm/vmalloc.h
+arch/x86/include/asm/vmxfeatures.h
+arch/x86/include/asm/word-at-a-time.h
+arch/x86/include/asm/x86_init.h
+arch/x86/include/uapi/asm/auxvec.h
+arch/x86/include/uapi/asm/bitsperlong.h
+arch/x86/include/uapi/asm/bootparam.h
+arch/x86/include/uapi/asm/byteorder.h
+arch/x86/include/uapi/asm/hw_breakpoint.h
+arch/x86/include/uapi/asm/ist.h
+arch/x86/include/uapi/asm/kvm_para.h
+arch/x86/include/uapi/asm/ldt.h
+arch/x86/include/uapi/asm/mman.h
+arch/x86/include/uapi/asm/msr.h
+arch/x86/include/uapi/asm/perf_regs.h
+arch/x86/include/uapi/asm/posix_types_64.h
+arch/x86/include/uapi/asm/processor-flags.h
+arch/x86/include/uapi/asm/ptrace-abi.h
+arch/x86/include/uapi/asm/ptrace.h
+arch/x86/include/uapi/asm/sembuf.h
+arch/x86/include/uapi/asm/shmbuf.h
+arch/x86/include/uapi/asm/sigcontext.h
+arch/x86/include/uapi/asm/siginfo.h
+arch/x86/include/uapi/asm/signal.h
+arch/x86/include/uapi/asm/stat.h
+arch/x86/include/uapi/asm/swab.h
+arch/x86/include/uapi/asm/unistd.h
+arch/x86/include/uapi/asm/vsyscall.h
+certs/common.h
+crypto/internal.h
+drivers/base/base.h
+drivers/base/power/power.h
+drivers/base/trace.h
+drivers/leds/leds.h
+drivers/net/wireless/ath/ath9k/ani.h
+drivers/net/wireless/ath/ath.h
+drivers/net/wireless/ath/ath9k/ar5008_initvals.h
+drivers/net/wireless/ath/ath9k/ar9001_initvals.h
+drivers/net/wireless/ath/ath9k/ar9002_initvals.h
+drivers/net/wireless/ath/ath9k/ar9002_phy.h
+drivers/net/wireless/ath/ath9k/ar9003_2p2_initvals.h
+drivers/net/wireless/ath/ath9k/ar9003_aic.h
+drivers/net/wireless/ath/ath9k/ar9003_buffalo_initvals.h
+drivers/net/wireless/ath/ath9k/ar9003_eeprom.h
+drivers/net/wireless/ath/ath9k/ar9003_mac.h
+drivers/net/wireless/ath/ath9k/ar9003_mci.h
+drivers/net/wireless/ath/ath9k/ar9003_phy.h
+drivers/net/wireless/ath/ath9k/ar9003_rtt.h
+drivers/net/wireless/ath/ath9k/ar9330_1p1_initvals.h
+drivers/net/wireless/ath/ath9k/ar9330_1p2_initvals.h
+drivers/net/wireless/ath/ath9k/ar9340_initvals.h
+drivers/net/wireless/ath/ath9k/ar9462_2p0_initvals.h
+drivers/net/wireless/ath/ath9k/ar9462_2p1_initvals.h
+drivers/net/wireless/ath/ath9k/ar9485_initvals.h
+drivers/net/wireless/ath/ath9k/ar953x_initvals.h
+drivers/net/wireless/ath/ath9k/ar955x_1p0_initvals.h
+drivers/net/wireless/ath/ath9k/ar9565_1p0_initvals.h
+drivers/net/wireless/ath/ath9k/ar9565_1p1_initvals.h
+drivers/net/wireless/ath/ath9k/ar956x_initvals.h
+drivers/net/wireless/ath/ath9k/ar9580_1p0_initvals.h
+drivers/net/wireless/ath/ath9k/ath9k.h
+drivers/net/wireless/ath/ath9k/btcoex.h
+drivers/net/wireless/ath/ath9k/calib.h
+drivers/net/wireless/ath/ath9k/common-beacon.h
+drivers/net/wireless/ath/ath9k/common-debug.h
+drivers/net/wireless/ath/ath9k/common-init.h
+drivers/net/wireless/ath/ath9k/common-spectral.h
+drivers/net/wireless/ath/ath9k/common.h
+drivers/net/wireless/ath/ath9k/debug.h
+drivers/net/wireless/ath/ath9k/dfs.h
+drivers/net/wireless/ath/ath9k/dfs_debug.h
+drivers/net/wireless/ath/ath9k/dynack.h
+drivers/net/wireless/ath/ath9k/eeprom.h
+drivers/net/wireless/ath/ath9k/hif_usb.h
+drivers/net/wireless/ath/ath9k/htc.h
+drivers/net/wireless/ath/ath9k/htc_hst.h
+drivers/net/wireless/ath/ath9k/hw-ops.h
+drivers/net/wireless/ath/ath9k/hw.h
+drivers/net/wireless/ath/ath9k/mac.h
+drivers/net/wireless/ath/ath9k/mci.h
+drivers/net/wireless/ath/ath9k/phy.h
+drivers/net/wireless/ath/ath9k/reg.h
+drivers/net/wireless/ath/ath9k/reg_aic.h
+drivers/net/wireless/ath/ath9k/reg_mci.h
+drivers/net/wireless/ath/ath9k/reg_wow.h
+drivers/net/wireless/ath/ath9k/wmi.h
+drivers/net/wireless/ath/dfs_pattern_detector.h
+drivers/net/wireless/ath/reg.h
+drivers/net/wireless/ath/regd.h
+drivers/net/wireless/ath/regd_common.h
+drivers/net/wireless/ath/spectral_common.h
+drivers/net/wireless/ath/trace.h
+drivers/pci/pci.h
+drivers/pci/pcie/portdrv.h
+include/acpi/acbuffer.h
+include/acpi/acconfig.h
+include/acpi/acexcep.h
+include/acpi/acnames.h
+include/acpi/acoutput.h
+include/acpi/acpi.h
+include/acpi/acpi_bus.h
+include/acpi/acpi_drivers.h
+include/acpi/acpi_io.h
+include/acpi/acpi_numa.h
+include/acpi/acpiosxf.h
+include/acpi/acpixf.h
+include/acpi/acrestyp.h
+include/acpi/actbl.h
+include/acpi/actbl1.h
+include/acpi/actbl2.h
+include/acpi/actbl3.h
+include/acpi/actypes.h
+include/acpi/pdc_intel.h
+include/acpi/platform/acenv.h
+include/acpi/platform/acenvex.h
+include/acpi/platform/acgcc.h
+include/acpi/platform/acgccex.h
+include/acpi/platform/aclinux.h
+include/acpi/platform/aclinuxex.h
+include/asm-generic/atomic-instrumented.h
+include/asm-generic/atomic-long.h
+include/asm-generic/barrier.h
+include/asm-generic/bitops/const_hweight.h
+include/asm-generic/bitops/ext2-atomic-setbit.h
+include/asm-generic/bitops/find.h
+include/asm-generic/bitops/instrumented-atomic.h
+include/asm-generic/bitops/instrumented-lock.h
+include/asm-generic/bitops/instrumented-non-atomic.h
+include/asm-generic/bitops/le.h
+include/asm-generic/bitops/sched.h
+include/asm-generic/bitsperlong.h
+include/asm-generic/bug.h
+include/asm-generic/cacheflush.h
+include/asm-generic/compat.h
+include/asm-generic/delay.h
+include/asm-generic/div64.h
+include/asm-generic/early_ioremap.h
+include/asm-generic/error-injection.h
+include/asm-generic/fixmap.h
+include/asm-generic/getorder.h
+include/asm-generic/int-ll64.h
+include/asm-generic/io.h
+include/asm-generic/ioctl.h
+include/asm-generic/iomap.h
+include/asm-generic/irq_regs.h
+include/asm-generic/kmap_size.h
+include/asm-generic/kprobes.h
+include/asm-generic/local64.h
+include/asm-generic/logic_io.h
+include/asm-generic/mmiowb.h
+include/asm-generic/mmu_context.h
+include/asm-generic/module.h
+include/asm-generic/param.h
+include/asm-generic/pci.h
+include/asm-generic/pci_iomap.h
+include/asm-generic/percpu.h
+include/asm-generic/pgtable-nop4d.h
+include/asm-generic/resource.h
+include/asm-generic/rwonce.h
+include/asm-generic/sections.h
+include/asm-generic/set_memory.h
+include/asm-generic/termios.h
+include/asm-generic/tlb.h
+include/asm-generic/topology.h
+include/asm-generic/unaligned.h
+include/crypto/acompress.h
+include/crypto/aead.h
+include/crypto/aes.h
+include/crypto/akcipher.h
+include/crypto/algapi.h
+include/crypto/arc4.h
+include/crypto/b128ops.h
+include/crypto/ctr.h
+include/crypto/drbg.h
+include/crypto/gcm.h
+include/crypto/gf128mul.h
+include/crypto/ghash.h
+include/crypto/hash.h
+include/crypto/hash_info.h
+include/crypto/internal/acompress.h
+include/crypto/internal/aead.h
+include/crypto/internal/akcipher.h
+include/crypto/internal/cipher.h
+include/crypto/internal/geniv.h
+include/crypto/internal/hash.h
+include/crypto/internal/kpp.h
+include/crypto/internal/rng.h
+include/crypto/internal/scompress.h
+include/crypto/internal/simd.h
+include/crypto/internal/skcipher.h
+include/crypto/kpp.h
+include/crypto/md5.h
+include/crypto/null.h
+include/crypto/rng.h
+include/crypto/scatterwalk.h
+include/crypto/sha1.h
+include/crypto/sha2.h
+include/crypto/sha256_base.h
+include/crypto/skcipher.h
+include/crypto/streebog.h
+include/dt-bindings/leds/common.h
+include/linux/acpi.h
+include/linux/acpi_iort.h
+include/linux/aer.h
+include/linux/alarmtimer.h
+include/linux/align.h
+include/linux/apm_bios.h
+include/linux/arch_topology.h
+include/linux/asn1.h
+include/linux/asn1_ber_bytecode.h
+include/linux/asn1_decoder.h
+include/linux/assoc_array.h
+include/linux/async.h
+include/linux/ath9k_platform.h
+include/linux/atomic-arch-fallback.h
+include/linux/atomic.h
+include/linux/audit.h
+include/linux/auxvec.h
+include/linux/average.h
+include/linux/backing-dev-defs.h
+include/linux/binfmts.h
+include/linux/bio.h
+include/linux/bit_spinlock.h
+include/linux/bitfield.h
+include/linux/bitmap.h
+include/linux/bitops.h
+include/linux/bitrev.h
+include/linux/bits.h
+include/linux/blk-cgroup.h
+include/linux/blk_types.h
+include/linux/blkdev.h
+include/linux/bottom_half.h
+include/linux/bpf-cgroup.h
+include/linux/bpf-netns.h
+include/linux/bpf.h
+include/linux/bpf_local_storage.h
+include/linux/bpf_trace.h
+include/linux/bpfptr.h
+include/linux/bsearch.h
+include/linux/bsg.h
+include/linux/btf_ids.h
+include/linux/bug.h
+include/linux/build_bug.h
+include/linux/buildid.h
+include/linux/bvec.h
+include/linux/byteorder/generic.h
+include/linux/byteorder/little_endian.h
+include/linux/cache.h
+include/linux/capability.h
+include/linux/cc_platform.h
+include/linux/cdev.h
+include/linux/cfi.h
+include/linux/cgroup-defs.h
+include/linux/cgroup.h
+include/linux/clk-provider.h
+include/linux/clk.h
+include/linux/clk/clk-conf.h
+include/linux/clockchips.h
+include/linux/clocksource.h
+include/linux/clocksource_ids.h
+include/linux/compat.h
+include/linux/compiler-gcc.h
+include/linux/compiler.h
+include/linux/compiler_attributes.h
+include/linux/compiler_types.h
+include/linux/completion.h
+include/linux/component.h
+include/linux/console.h
+include/linux/console_struct.h
+include/linux/consolemap.h
+include/linux/const.h
+include/linux/context_tracking.h
+include/linux/context_tracking_state.h
+include/linux/cookie.h
+include/linux/cpu.h
+include/linux/cpu_rmap.h
+include/linux/cpufreq.h
+include/linux/cpuhotplug.h
+include/linux/cpuidle.h
+include/linux/cpumask.h
+include/linux/cpuset.h
+include/linux/crash_core.h
+include/linux/crash_dump.h
+include/linux/crc32.h
+include/linux/crc32poly.h
+include/linux/cred.h
+include/linux/crypto.h
+include/linux/ctype.h
+include/linux/dax.h
+include/linux/dcache.h
+include/linux/debug_locks.h
+include/linux/debugfs.h
+include/linux/debugobjects.h
+include/linux/delay.h
+include/linux/delayacct.h
+include/linux/delayed_call.h
+include/linux/dev_printk.h
+include/linux/devcoredump.h
+include/linux/device.h
+include/linux/device/bus.h
+include/linux/device/class.h
+include/linux/device/driver.h
+include/linux/dma-direction.h
+include/linux/dma-map-ops.h
+include/linux/dma-mapping.h
+include/linux/dmaengine.h
+include/linux/dmapool.h
+include/linux/dmi.h
+include/linux/dqblk_qtree.h
+include/linux/dqblk_v1.h
+include/linux/dqblk_v2.h
+include/linux/dynamic_debug.h
+include/linux/dynamic_queue_limits.h
+include/linux/edd.h
+include/linux/elevator.h
+include/linux/elf-randomize.h
+include/linux/elf.h
+include/linux/elfcore.h
+include/linux/energy_model.h
+include/linux/err.h
+include/linux/errname.h
+include/linux/errno.h
+include/linux/error-injection.h
+include/linux/errqueue.h
+include/linux/errseq.h
+include/linux/etherdevice.h
+include/linux/ethtool.h
+include/linux/ethtool_netlink.h
+include/linux/eventfd.h
+include/linux/export.h
+include/linux/fault-inject-usercopy.h
+include/linux/fault-inject.h
+include/linux/fcntl.h
+include/linux/file.h
+include/linux/filter.h
+include/linux/fips.h
+include/linux/firmware.h
+include/linux/flex_proportions.h
+include/linux/freelist.h
+include/linux/freezer.h
+include/linux/fs.h
+include/linux/fs_context.h
+include/linux/fs_types.h
+include/linux/ftrace.h
+include/linux/ftrace_irq.h
+include/linux/fwnode.h
+include/linux/gcd.h
+include/linux/genetlink.h
+include/linux/genhd.h
+include/linux/gfp.h
+include/linux/gpio/consumer.h
+include/linux/gpio.h
+include/linux/hardirq.h
+include/linux/hash.h
+include/linux/hashtable.h
+include/linux/highmem-internal.h
+include/linux/highmem.h
+include/linux/highuid.h
+include/linux/hrtimer.h
+include/linux/hrtimer_defs.h
+include/linux/huge_mm.h
+include/linux/hugetlb.h
+include/linux/hugetlb_inline.h
+include/linux/hw_random.h
+include/linux/hypervisor.h
+include/linux/icmpv6.h
+include/linux/idr.h
+include/linux/ieee80211.h
+include/linux/if_arp.h
+include/linux/if_bridge.h
+include/linux/if_ether.h
+include/linux/if_link.h
+include/linux/if_macvlan.h
+include/linux/if_tun.h
+include/linux/if_tunnel.h
+include/linux/if_vlan.h
+include/linux/in.h
+include/linux/in6.h
+include/linux/indirect_call_wrapper.h
+include/linux/inet.h
+include/linux/inetdevice.h
+include/linux/init.h
+include/linux/init_task.h
+include/linux/instrumentation.h
+include/linux/instrumented.h
+include/linux/interrupt.h
+include/linux/interval_tree.h
+include/linux/io.h
+include/linux/iocontext.h
+include/linux/iopoll.h
+include/linux/ioport.h
+include/linux/ioprio.h
+include/linux/ip.h
+include/linux/ipc.h
+include/linux/ipv6.h
+include/linux/ipv6_route.h
+include/linux/irq.h
+include/linux/irq_work.h
+include/linux/irqchip.h
+include/linux/irqdesc.h
+include/linux/irqdomain.h
+include/linux/irqflags.h
+include/linux/irqhandler.h
+include/linux/irqnr.h
+include/linux/irqreturn.h
+include/linux/jhash.h
+include/linux/jiffies.h
+include/linux/jump_label.h
+include/linux/jump_label_ratelimit.h
+include/linux/kallsyms.h
+include/linux/kasan-checks.h
+include/linux/kasan.h
+include/linux/kconfig.h
+include/linux/kcov.h
+include/linux/kcsan-checks.h
+include/linux/kcsan.h
+include/linux/kdebug.h
+include/linux/kdev_t.h
+include/linux/kern_levels.h
+include/linux/kernel.h
+include/linux/kernel_read_file.h
+include/linux/kernel_stat.h
+include/linux/kernfs.h
+include/linux/kexec.h
+include/linux/key.h
+include/linux/kgdb.h
+include/linux/klist.h
+include/linux/kmemleak.h
+include/linux/kmod.h
+include/linux/kmsg_dump.h
+include/linux/kobject.h
+include/linux/kobject_ns.h
+include/linux/kprobes.h
+include/linux/kref.h
+include/linux/kstrtox.h
+include/linux/kthread.h
+include/linux/ktime.h
+include/linux/kvm_para.h
+include/linux/latencytop.h
+include/linux/leds.h
+include/linux/limits.h
+include/linux/linkage.h
+include/linux/linkmode.h
+include/linux/list.h
+include/linux/list_bl.h
+include/linux/list_lru.h
+include/linux/list_nulls.h
+include/linux/list_sort.h
+include/linux/livepatch.h
+include/linux/llist.h
+include/linux/local_lock.h
+include/linux/local_lock_internal.h
+include/linux/lockdep.h
+include/linux/lockdep_types.h
+include/linux/lockref.h
+include/linux/log2.h
+include/linux/logic_pio.h
+include/linux/math.h
+include/linux/math64.h
+include/linux/mdio.h
+include/linux/mem_encrypt.h
+include/linux/memblock.h
+include/linux/memcontrol.h
+include/linux/memory_hotplug.h
+include/linux/mempolicy.h
+include/linux/mempool.h
+include/linux/memremap.h
+include/linux/migrate.h
+include/linux/migrate_mode.h
+include/linux/mii.h
+include/linux/mii_timestamper.h
+include/linux/minmax.h
+include/linux/mm.h
+include/linux/mm_types.h
+include/linux/mm_types_task.h
+include/linux/mman.h
+include/linux/mmap_lock.h
+include/linux/mmdebug.h
+include/linux/mmu_context.h
+include/linux/mmu_notifier.h
+include/linux/mmzone.h
+include/linux/mod_devicetable.h
+include/linux/module.h
+include/linux/moduleparam.h
+include/linux/mount.h
+include/linux/mpls.h
+include/linux/msi.h
+include/linux/mutex.h
+include/linux/net.h
+include/linux/netdev_features.h
+include/linux/netdevice.h
+include/linux/netfilter.h
+include/linux/netfilter_defs.h
+include/linux/netfilter_ingress.h
+include/linux/netlink.h
+include/linux/netpoll.h
+include/linux/nfs_fs_i.h
+include/linux/nls.h
+include/linux/nmi.h
+include/linux/node.h
+include/linux/nodemask.h
+include/linux/nospec.h
+include/linux/notifier.h
+include/linux/ns_common.h
+include/linux/nsproxy.h
+include/linux/numa.h
+include/linux/nvmem-consumer.h
+include/linux/nvmem-provider.h
+include/linux/objtool.h
+include/linux/of.h
+include/linux/of_address.h
+include/linux/of_clk.h
+include/linux/of_device.h
+include/linux/of_fdt.h
+include/linux/of_graph.h
+include/linux/of_irq.h
+include/linux/of_net.h
+include/linux/of_pci.h
+include/linux/of_platform.h
+include/linux/once.h
+include/linux/once_lite.h
+include/linux/osq_lock.h
+include/linux/overflow.h
+include/linux/page-flags-layout.h
+include/linux/page-flags.h
+include/linux/page_counter.h
+include/linux/page_ext.h
+include/linux/page_ref.h
+include/linux/pageblock-flags.h
+include/linux/pagemap.h
+include/linux/panic.h
+include/linux/panic_notifier.h
+include/linux/path.h
+include/linux/pci-dma-compat.h
+include/linux/pci.h
+include/linux/pci_hotplug.h
+include/linux/pci_ids.h
+include/linux/percpu-defs.h
+include/linux/percpu-refcount.h
+include/linux/percpu-rwsem.h
+include/linux/percpu.h
+include/linux/percpu_counter.h
+include/linux/perf_event.h
+include/linux/perf_regs.h
+include/linux/personality.h
+include/linux/pfn.h
+include/linux/phy.h
+include/linux/phylink.h
+include/linux/pid.h
+include/linux/pid_namespace.h
+include/linux/pinctrl/devinfo.h
+include/linux/pipe_fs_i.h
+include/linux/pkeys.h
+include/linux/platform_data/dsa.h
+include/linux/platform_device.h
+include/linux/plist.h
+include/linux/pm.h
+include/linux/pm_domain.h
+include/linux/pm_qos.h
+include/linux/pm_runtime.h
+include/linux/pm_wakeup.h
+include/linux/poison.h
+include/linux/poll.h
+include/linux/posix-timers.h
+include/linux/pps_kernel.h
+include/linux/prandom.h
+include/linux/preempt.h
+include/linux/prefetch.h
+include/linux/printk.h
+include/linux/proc_fs.h
+include/linux/proc_ns.h
+include/linux/processor.h
+include/linux/profile.h
+include/linux/projid.h
+include/linux/property.h
+include/linux/pseudo_fs.h
+include/linux/psi.h
+include/linux/psi_types.h
+include/linux/ptp_classify.h
+include/linux/ptp_clock_kernel.h
+include/linux/ptr_ring.h
+include/linux/ptrace.h
+include/linux/pvclock_gtod.h
+include/linux/quota.h
+include/linux/radix-tree.h
+include/linux/random.h
+include/linux/range.h
+include/linux/ratelimit.h
+include/linux/ratelimit_types.h
+include/linux/rbtree.h
+include/linux/rbtree_augmented.h
+include/linux/rbtree_latch.h
+include/linux/rcu_segcblist.h
+include/linux/rcu_sync.h
+include/linux/rculist.h
+include/linux/rculist_bl.h
+include/linux/rculist_nulls.h
+include/linux/rcupdate.h
+include/linux/rcupdate_wait.h
+include/linux/rcutiny.h
+include/linux/rcuwait.h
+include/linux/reboot.h
+include/linux/refcount.h
+include/linux/resource.h
+include/linux/resource_ext.h
+include/linux/restart_block.h
+include/linux/rfkill.h
+include/linux/rhashtable-types.h
+include/linux/rhashtable.h
+include/linux/ring_buffer.h
+include/linux/rtc.h
+include/linux/rtnetlink.h
+include/linux/rwlock.h
+include/linux/rwlock_types.h
+include/linux/rwsem.h
+include/linux/sbitmap.h
+include/linux/scatterlist.h
+include/linux/sched.h
+include/linux/sched/autogroup.h
+include/linux/sched/clock.h
+include/linux/sched/coredump.h
+include/linux/sched/cpufreq.h
+include/linux/sched/cputime.h
+include/linux/sched/deadline.h
+include/linux/sched/debug.h
+include/linux/sched/hotplug.h
+include/linux/sched/idle.h
+include/linux/sched/init.h
+include/linux/sched/isolation.h
+include/linux/sched/jobctl.h
+include/linux/sched/loadavg.h
+include/linux/sched/mm.h
+include/linux/sched/nohz.h
+include/linux/sched/numa_balancing.h
+include/linux/sched/prio.h
+include/linux/sched/rt.h
+include/linux/sched/signal.h
+include/linux/sched/smt.h
+include/linux/sched/stat.h
+include/linux/sched/sysctl.h
+include/linux/sched/task.h
+include/linux/sched/task_stack.h
+include/linux/sched/topology.h
+include/linux/sched/types.h
+include/linux/sched/user.h
+include/linux/sched/wake_q.h
+include/linux/sched/xacct.h
+include/linux/sched_clock.h
+include/linux/screen_info.h
+include/linux/sctp.h
+include/linux/seccomp.h
+include/linux/securebits.h
+include/linux/security.h
+include/linux/sem.h
+include/linux/semaphore.h
+include/linux/seq_buf.h
+include/linux/seq_file.h
+include/linux/seq_file_net.h
+include/linux/seqlock.h
+include/linux/set_memory.h
+include/linux/shm.h
+include/linux/shrinker.h
+include/linux/signal.h
+include/linux/signal_types.h
+include/linux/siphash.h
+include/linux/sizes.h
+include/linux/skb_array.h
+include/linux/skbuff.h
+include/linux/slab.h
+include/linux/smp.h
+include/linux/smp_types.h
+include/linux/smpboot.h
+include/linux/sock_diag.h
+include/linux/socket.h
+include/linux/sockptr.h
+include/linux/sort.h
+include/linux/spinlock.h
+include/linux/spinlock_api_up.h
+include/linux/spinlock_types.h
+include/linux/spinlock_types_up.h
+include/linux/spinlock_up.h
+include/linux/splice.h
+include/linux/srcu.h
+include/linux/srcutiny.h
+include/linux/stackdepot.h
+include/linux/stacktrace.h
+include/linux/stat.h
+include/linux/static_call.h
+include/linux/static_call_types.h
+include/linux/static_key.h
+include/linux/stddef.h
+include/linux/stop_machine.h
+include/linux/string.h
+include/linux/string_helpers.h
+include/linux/stringhash.h
+include/linux/stringify.h
+include/linux/suspend.h
+include/linux/swab.h
+include/linux/swait.h
+include/linux/swap.h
+include/linux/sync_core.h
+include/linux/syscall_user_dispatch.h
+include/linux/syscalls.h
+include/linux/syscore_ops.h
+include/linux/sysctl.h
+include/linux/sysfs.h
+include/linux/sysrq.h
+include/linux/task_io_accounting.h
+include/linux/task_work.h
+include/linux/tcp.h
+include/linux/textsearch.h
+include/linux/thermal.h
+include/linux/thread_info.h
+include/linux/threads.h
+include/linux/tick.h
+include/linux/time.h
+include/linux/time32.h
+include/linux/time64.h
+include/linux/timecounter.h
+include/linux/timekeeper_internal.h
+include/linux/timekeeping.h
+include/linux/timer.h
+include/linux/timerqueue.h
+include/linux/timex.h
+include/linux/topology.h
+include/linux/trace.h
+include/linux/trace_clock.h
+include/linux/trace_events.h
+include/linux/trace_recursion.h
+include/linux/trace_seq.h
+include/linux/tracepoint-defs.h
+include/linux/tracepoint.h
+include/linux/tsacct_kern.h
+include/linux/tty.h
+include/linux/tty_driver.h
+include/linux/tty_ldisc.h
+include/linux/typecheck.h
+include/linux/types.h
+include/linux/u64_stats_sync.h
+include/linux/uaccess.h
+include/linux/udp.h
+include/linux/uidgid.h
+include/linux/uio.h
+include/linux/umh.h
+include/linux/unaligned/packed_struct.h
+include/linux/units.h
+include/linux/uprobes.h
+include/linux/user.h
+include/linux/user_namespace.h
+include/linux/userfaultfd_k.h
+include/linux/utsname.h
+include/linux/uuid.h
+include/linux/verification.h
+include/linux/vgaarb.h
+include/linux/virtio.h
+include/linux/virtio_byteorder.h
+include/linux/virtio_config.h
+include/linux/virtio_net.h
+include/linux/vm_event_item.h
+include/linux/vmalloc.h
+include/linux/vmpressure.h
+include/linux/vmstat.h
+include/linux/vt.h
+include/linux/vt_kern.h
+include/linux/vtime.h
+include/linux/wait.h
+include/linux/wait_bit.h
+include/linux/win_minmax.h
+include/linux/wireless.h
+include/linux/workqueue.h
+include/linux/writeback.h
+include/linux/ww_mutex.h
+include/linux/xarray.h
+include/linux/xattr.h
+include/net/Space.h
+include/net/act_api.h
+include/net/addrconf.h
+include/net/arp.h
+include/net/bpf_sk_storage.h
+include/net/busy_poll.h
+include/net/cfg80211-wext.h
+include/net/cfg80211.h
+include/net/checksum.h
+include/net/cls_cgroup.h
+include/net/codel.h
+include/net/codel_impl.h
+include/net/compat.h
+include/net/devlink.h
+include/net/dsa.h
+include/net/dsfield.h
+include/net/dst.h
+include/net/dst_cache.h
+include/net/dst_metadata.h
+include/net/dst_ops.h
+include/net/fib_notifier.h
+include/net/fib_rules.h
+include/net/flow.h
+include/net/flow_dissector.h
+include/net/flow_offload.h
+include/net/fq.h
+include/net/fq_impl.h
+include/net/gen_stats.h
+include/net/genetlink.h
+include/net/gro.h
+include/net/gro_cells.h
+include/net/ieee80211_radiotap.h
+include/net/if_inet6.h
+include/net/inet_connection_sock.h
+include/net/inet_ecn.h
+include/net/inet_frag.h
+include/net/inet_hashtables.h
+include/net/inet_sock.h
+include/net/inet_timewait_sock.h
+include/net/inetpeer.h
+include/net/ip.h
+include/net/ip6_checksum.h
+include/net/ip6_fib.h
+include/net/ip_fib.h
+include/net/ip_tunnels.h
+include/net/ipv6.h
+include/net/ipv6_stubs.h
+include/net/iw_handler.h
+include/net/l3mdev.h
+include/net/lwtunnel.h
+include/net/mac80211.h
+include/net/mpls.h
+include/net/mptcp.h
+include/net/ndisc.h
+include/net/neighbour.h
+include/net/net_namespace.h
+include/net/netlink.h
+include/net/netns/bpf.h
+include/net/netns/can.h
+include/net/netns/core.h
+include/net/netns/generic.h
+include/net/netns/hash.h
+include/net/netns/ieee802154_6lowpan.h
+include/net/netns/ipv4.h
+include/net/netns/ipv6.h
+include/net/netns/mib.h
+include/net/netns/mpls.h
+include/net/netns/netfilter.h
+include/net/netns/nexthop.h
+include/net/netns/nftables.h
+include/net/netns/packet.h
+include/net/netns/sctp.h
+include/net/netns/smc.h
+include/net/netns/unix.h
+include/net/netns/x_tables.h
+include/net/netns/xdp.h
+include/net/netns/xfrm.h
+include/net/netprio_cgroup.h
+include/net/page_pool.h
+include/net/pkt_cls.h
+include/net/pkt_sched.h
+include/net/protocol.h
+include/net/regulatory.h
+include/net/request_sock.h
+include/net/route.h
+include/net/rtnetlink.h
+include/net/sch_generic.h
+include/net/scm.h
+include/net/snmp.h
+include/net/sock.h
+include/net/sock_reuseport.h
+include/net/switchdev.h
+include/net/tcp.h
+include/net/tcp_states.h
+include/net/timewait_sock.h
+include/net/tso.h
+include/net/udp.h
+include/net/udp_tunnel.h
+include/net/wext.h
+include/net/xdp.h
+include/net/xdp_priv.h
+include/net/xdp_sock.h
+include/net/xdp_sock_drv.h
+include/net/xfrm.h
+include/net/xsk_buff_pool.h
+include/trace/define_trace.h
+include/trace/events/irq.h
+include/trace/events/napi.h
+include/trace/events/net.h
+include/trace/events/netlink.h
+include/trace/events/power.h
+include/trace/events/qdisc.h
+include/trace/events/sched.h
+include/trace/events/skb.h
+include/trace/events/sock.h
+include/trace/events/timer.h
+include/trace/events/tlb.h
+include/trace/events/workqueue.h
+include/trace/events/xdp.h
+include/trace/syscall.h
+include/uapi/asm-generic/bitsperlong.h
+include/uapi/asm-generic/bpf_perf_event.h
+include/uapi/asm-generic/errno-base.h
+include/uapi/asm-generic/errno.h
+include/uapi/asm-generic/fcntl.h
+include/uapi/asm-generic/hugetlb_encode.h
+include/uapi/asm-generic/int-ll64.h
+include/uapi/asm-generic/ioctl.h
+include/uapi/asm-generic/ioctls.h
+include/uapi/asm-generic/ipcbuf.h
+include/uapi/asm-generic/mman-common.h
+include/uapi/asm-generic/mman.h
+include/uapi/asm-generic/param.h
+include/uapi/asm-generic/poll.h
+include/uapi/asm-generic/posix_types.h
+include/uapi/asm-generic/resource.h
+include/uapi/asm-generic/shmbuf.h
+include/uapi/asm-generic/siginfo.h
+include/uapi/asm-generic/signal-defs.h
+include/uapi/asm-generic/socket.h
+include/uapi/asm-generic/sockios.h
+include/uapi/asm-generic/termbits.h
+include/uapi/asm-generic/termios.h
+include/uapi/asm-generic/types.h
+include/uapi/linux/aio_abi.h
+include/uapi/linux/apm_bios.h
+include/uapi/linux/audit.h
+include/uapi/linux/auxvec.h
+include/uapi/linux/binfmts.h
+include/uapi/linux/blkzoned.h
+include/uapi/linux/bpf.h
+include/uapi/linux/bpf_common.h
+include/uapi/linux/bpf_perf_event.h
+include/uapi/linux/bsg.h
+include/uapi/linux/btf.h
+include/uapi/linux/byteorder/little_endian.h
+include/uapi/linux/capability.h
+include/uapi/linux/cgroupstats.h
+include/uapi/linux/const.h
+include/uapi/linux/cryptouser.h
+include/uapi/linux/devlink.h
+include/uapi/linux/dqblk_xfs.h
+include/uapi/linux/edd.h
+include/uapi/linux/elf-em.h
+include/uapi/linux/elf.h
+include/uapi/linux/errno.h
+include/uapi/linux/errqueue.h
+include/uapi/linux/ethtool.h
+include/uapi/linux/ethtool_netlink.h
+include/uapi/linux/eventpoll.h
+include/uapi/linux/fcntl.h
+include/uapi/linux/fib_rules.h
+include/uapi/linux/filter.h
+include/uapi/linux/fs.h
+include/uapi/linux/gen_stats.h
+include/uapi/linux/genetlink.h
+include/uapi/linux/hash_info.h
+include/uapi/linux/hdlc/ioctl.h
+include/uapi/linux/icmpv6.h
+include/uapi/linux/if.h
+include/uapi/linux/if_addr.h
+include/uapi/linux/if_arp.h
+include/uapi/linux/if_bonding.h
+include/uapi/linux/if_bridge.h
+include/uapi/linux/if_ether.h
+include/uapi/linux/if_link.h
+include/uapi/linux/if_packet.h
+include/uapi/linux/if_tun.h
+include/uapi/linux/if_tunnel.h
+include/uapi/linux/if_vlan.h
+include/uapi/linux/if_xdp.h
+include/uapi/linux/in.h
+include/uapi/linux/in6.h
+include/uapi/linux/in_route.h
+include/uapi/linux/ioctl.h
+include/uapi/linux/ip.h
+include/uapi/linux/ipc.h
+include/uapi/linux/ipsec.h
+include/uapi/linux/ipv6.h
+include/uapi/linux/ipv6_route.h
+include/uapi/linux/irqnr.h
+include/uapi/linux/kcov.h
+include/uapi/linux/kd.h
+include/uapi/linux/kdev_t.h
+include/uapi/linux/kernel.h
+include/uapi/linux/kexec.h
+include/uapi/linux/kvm_para.h
+include/uapi/linux/libc-compat.h
+include/uapi/linux/limits.h
+include/uapi/linux/lwtunnel.h
+include/uapi/linux/magic.h
+include/uapi/linux/major.h
+include/uapi/linux/mdio.h
+include/uapi/linux/membarrier.h
+include/uapi/linux/mempolicy.h
+include/uapi/linux/mii.h
+include/uapi/linux/mman.h
+include/uapi/linux/mpls.h
+include/uapi/linux/neighbour.h
+include/uapi/linux/net.h
+include/uapi/linux/net_namespace.h
+include/uapi/linux/net_tstamp.h
+include/uapi/linux/netdevice.h
+include/uapi/linux/netfilter.h
+include/uapi/linux/netfilter/nf_tables.h
+include/uapi/linux/netlink.h
+include/uapi/linux/nl80211.h
+include/uapi/linux/openat2.h
+include/uapi/linux/param.h
+include/uapi/linux/pci.h
+include/uapi/linux/pci_regs.h
+include/uapi/linux/perf_event.h
+include/uapi/linux/personality.h
+include/uapi/linux/pfkeyv2.h
+include/uapi/linux/pkt_cls.h
+include/uapi/linux/pkt_sched.h
+include/uapi/linux/poll.h
+include/uapi/linux/posix_types.h
+include/uapi/linux/pps.h
+include/uapi/linux/ptp_clock.h
+include/uapi/linux/ptrace.h
+include/uapi/linux/quota.h
+include/uapi/linux/random.h
+include/uapi/linux/reboot.h
+include/uapi/linux/resource.h
+include/uapi/linux/rfkill.h
+include/uapi/linux/route.h
+include/uapi/linux/rseq.h
+include/uapi/linux/rtc.h
+include/uapi/linux/rtnetlink.h
+include/uapi/linux/sched.h
+include/uapi/linux/sched/types.h
+include/uapi/linux/screen_info.h
+include/uapi/linux/sctp.h
+include/uapi/linux/seccomp.h
+include/uapi/linux/securebits.h
+include/uapi/linux/sem.h
+include/uapi/linux/shm.h
+include/uapi/linux/signal.h
+include/uapi/linux/snmp.h
+include/uapi/linux/sock_diag.h
+include/uapi/linux/socket.h
+include/uapi/linux/sockios.h
+include/uapi/linux/stat.h
+include/uapi/linux/stddef.h
+include/uapi/linux/string.h
+include/uapi/linux/swab.h
+include/uapi/linux/sysctl.h
+include/uapi/linux/sysinfo.h
+include/uapi/linux/taskstats.h
+include/uapi/linux/tcp.h
+include/uapi/linux/termios.h
+include/uapi/linux/thermal.h
+include/uapi/linux/time.h
+include/uapi/linux/time_types.h
+include/uapi/linux/timex.h
+include/uapi/linux/tty.h
+include/uapi/linux/tty_flags.h
+include/uapi/linux/types.h
+include/uapi/linux/udp.h
+include/uapi/linux/uio.h
+include/uapi/linux/uleds.h
+include/uapi/linux/un.h
+include/uapi/linux/unistd.h
+include/uapi/linux/utsname.h
+include/uapi/linux/uuid.h
+include/uapi/linux/virtio_config.h
+include/uapi/linux/virtio_ids.h
+include/uapi/linux/virtio_net.h
+include/uapi/linux/virtio_types.h
+include/uapi/linux/vmcore.h
+include/uapi/linux/vt.h
+include/uapi/linux/wait.h
+include/uapi/linux/wireless.h
+include/uapi/linux/xattr.h
+include/uapi/linux/xfrm.h
+include/uapi/video/edid.h
+include/vdso/bits.h
+include/vdso/clocksource.h
+include/vdso/const.h
+include/vdso/jiffies.h
+include/vdso/ktime.h
+include/vdso/limits.h
+include/vdso/math64.h
+include/vdso/time.h
+include/vdso/time32.h
+include/vdso/time64.h
+include/video/edid.h
+include/video/vga.h
+kernel/irq/debug.h
+kernel/irq/internals.h
+kernel/irq/settings.h
+kernel/locking/lock_events.h
+kernel/locking/lock_events_list.h
+kernel/locking/mutex.h
+kernel/sched/autogroup.h
+kernel/sched/cpudeadline.h
+kernel/sched/cpupri.h
+kernel/sched/features.h
+kernel/sched/sched.h
+kernel/sched/stats.h
+kernel/smpboot.h
+kernel/time/ntp_internal.h
+kernel/time/tick-internal.h
+kernel/time/tick-sched.h
+kernel/time/timekeeping.h
+kernel/time/timekeeping_internal.h
+kernel/workqueue_internal.h
+lib/crc32defs.h
+lib/kstrtox.h
+mm/internal.h
+mm/slab.h
+net/core/datagram.h
+net/core/net-sysfs.h
+net/ethtool/common.h
+net/mac80211/aead_api.h
+net/mac80211/aes_ccm.h
+net/mac80211/aes_cmac.h
+net/mac80211/aes_gcm.h
+net/mac80211/aes_gmac.h
+net/mac80211/debug.h
+net/mac80211/debugfs.h
+net/mac80211/debugfs_key.h
+net/mac80211/debugfs_netdev.h
+net/mac80211/debugfs_sta.h
+net/mac80211/driver-ops.h
+net/mac80211/fils_aead.h
+net/mac80211/ieee80211_i.h
+net/mac80211/key.h
+net/mac80211/led.h
+net/mac80211/mesh.h
+net/mac80211/michael.h
+net/mac80211/rate.h
+net/mac80211/rc80211_minstrel_ht.h
+net/mac80211/sta_info.h
+net/mac80211/tkip.h
+net/mac80211/trace.h
+net/mac80211/trace_msg.h
+net/mac80211/wep.h
+net/mac80211/wme.h
+net/mac80211/wpa.h
+net/netlink/af_netlink.h
+net/packet/internal.h
+net/rfkill/rfkill.h
+net/wireless/core.h
+net/wireless/debugfs.h
+net/wireless/nl80211.h
+net/wireless/rdev-ops.h
+net/wireless/reg.h
+net/wireless/sysfs.h
+net/wireless/trace.h
+net/wireless/wext-compat.h
diff -ruN pc/src/lib/wifi/spec/x86_32/source.list world/src/lib/wifi_ath9k/spec/x86_32/source.list
--- pc/src/lib/wifi/spec/x86_32/source.list	2023-01-15 14:04:13.681040314 +0000
+++ world/src/lib/wifi_ath9k/spec/x86_32/source.list	2023-01-15 13:49:43.963974138 +0000
@@ -1,5 +1,89 @@
-arch/x86/lib/hweight.S
-certs/common.c
+net/core/datagram.c
+net/core/dev.c
+net/core/dev_addr_lists.c
+net/core/dev_ioctl.c
+net/core/link_watch.c
+net/core/net-sysfs.c
+net/core/net_namespace.c
+net/core/rtnetlink.c
+net/core/skbuff.c
+net/core/sock.c
+net/core/xdp.c
+
+net/ethernet/eth.c
+
+net/ethtool/common.c
+
+net/mac80211/aead_api.c
+net/mac80211/aes_cmac.c
+net/mac80211/aes_gmac.c
+net/mac80211/agg-rx.c
+net/mac80211/agg-tx.c
+net/mac80211/airtime.c
+net/mac80211/cfg.c
+net/mac80211/chan.c
+net/mac80211/driver-ops.c
+net/mac80211/ethtool.c
+net/mac80211/fils_aead.c
+net/mac80211/he.c
+net/mac80211/ht.c
+net/mac80211/ibss.c
+net/mac80211/iface.c
+net/mac80211/key.c
+net/mac80211/main.c
+net/mac80211/michael.c
+net/mac80211/mlme.c
+net/mac80211/ocb.c
+net/mac80211/offchannel.c
+net/mac80211/rate.c
+net/mac80211/rc80211_minstrel_ht.c
+net/mac80211/rx.c
+net/mac80211/s1g.c
+net/mac80211/scan.c
+net/mac80211/spectmgmt.c
+net/mac80211/sta_info.c
+net/mac80211/status.c
+net/mac80211/tdls.c
+net/mac80211/tkip.c
+net/mac80211/trace.c
+net/mac80211/tx.c
+net/mac80211/util.c
+net/mac80211/vht.c
+net/mac80211/wep.c
+net/mac80211/wme.c
+net/mac80211/wpa.c
+
+net/wireless/ap.c
+net/wireless/chan.c
+net/wireless/core.c
+net/wireless/ethtool.c
+net/wireless/ibss.c
+net/wireless/mesh.c
+net/wireless/mlme.c
+net/wireless/nl80211.c
+net/wireless/ocb.c
+net/wireless/pmsr.c
+net/wireless/radiotap.c
+net/wireless/reg.c
+net/wireless/scan.c
+net/wireless/sme.c
+net/wireless/sysfs.c
+net/wireless/trace.c
+net/wireless/util.c
+
+net/netlink/af_netlink.c
+net/netlink/genetlink.c
+net/netlink/policy.c
+
+net/packet/af_packet.c
+
+net/rfkill/core.c
+
+net/socket.c
+
+net/sched/sch_generic.c
+net/sched/sch_mq.c
+
 crypto/acompress.c
 crypto/aead.c
 crypto/aes_generic.c
@@ -29,6 +113,52 @@
 crypto/shash.c
 crypto/skcipher.c
 crypto/testmgr.c
+
+lib/siphash.c
+lib/crc32.c
+lib/crypto/aes.c
+lib/nlattr.c
+lib/dynamic_queue_limits.c
+
+drivers/leds/led-core.c
+drivers/leds/led-class.c
+drivers/net/wireless/ath/ath9k/htc_drv_init.c
+drivers/net/wireless/ath/ath9k/hif_usb.c
+drivers/net/wireless/ath/ath9k/htc_drv_gpio.c
+drivers/net/wireless/ath/ath9k/htc_drv_beacon.c
+drivers/net/wireless/ath/ath9k/htc_hst.c
+drivers/net/wireless/ath/ath9k/common-init.c
+drivers/net/wireless/ath/ath9k/wmi.c
+drivers/net/wireless/ath/ath9k/common.c
+drivers/net/wireless/ath/ath9k/htc_drv_main.c
+drivers/net/wireless/ath/ath9k/htc_drv_txrx.c
+drivers/net/wireless/ath/ath9k/common-beacon.c
+drivers/net/wireless/ath/ath9k/ani.c
+drivers/net/wireless/ath/ath9k/hw.c
+drivers/net/wireless/ath/ath9k/mac.c
+drivers/net/wireless/ath/ath9k/eeprom.c
+drivers/net/wireless/ath/ath9k/calib.c
+drivers/net/wireless/ath/hw.c
+drivers/net/wireless/ath/main.c
+drivers/net/wireless/ath/ath9k/ar9003_mac.c
+drivers/net/wireless/ath/ath9k/ar9002_hw.c
+drivers/net/wireless/ath/ath9k/ar9003_hw.c
+drivers/net/wireless/ath/key.c
+drivers/net/wireless/ath/regd.c
+drivers/net/wireless/ath/ath9k/ar5008_phy.c
+drivers/net/wireless/ath/ath9k/ar9002_phy.c
+drivers/net/wireless/ath/ath9k/ar9003_phy.c
+drivers/net/wireless/ath/ath9k/ar9003_calib.c
+drivers/net/wireless/ath/ath9k/ar9002_mac.c
+drivers/net/wireless/ath/ath9k/ar9002_calib.c
+drivers/net/wireless/ath/ath9k/eeprom_4k.c
+drivers/net/wireless/ath/ath9k/eeprom_9287.c
+drivers/net/wireless/ath/ath9k/ar9003_eeprom.c
+drivers/net/wireless/ath/ath9k/eeprom_def.c
+drivers/net/wireless/ath/ath9k/ar9003_paprd.c
+
+drivers/pci/pci-driver.c
+
 drivers/base/bus.c
 drivers/base/class.c
 drivers/base/component.c
@@ -38,106 +168,7 @@
 drivers/base/driver.c
 drivers/base/platform.c
 drivers/base/property.c
-drivers/clk/clk-devres.c
-drivers/net/Space.c
-drivers/net/loopback.c
-drivers/net/wireless/intel/iwlwifi/cfg/1000.c
-drivers/net/wireless/intel/iwlwifi/cfg/2000.c
-drivers/net/wireless/intel/iwlwifi/cfg/22000.c
-drivers/net/wireless/intel/iwlwifi/cfg/5000.c
-drivers/net/wireless/intel/iwlwifi/cfg/6000.c
-drivers/net/wireless/intel/iwlwifi/cfg/7000.c
-drivers/net/wireless/intel/iwlwifi/cfg/8000.c
-drivers/net/wireless/intel/iwlwifi/cfg/9000.c
-drivers/net/wireless/intel/iwlwifi/dvm/calib.c
-drivers/net/wireless/intel/iwlwifi/dvm/devices.c
-drivers/net/wireless/intel/iwlwifi/dvm/lib.c
-drivers/net/wireless/intel/iwlwifi/dvm/mac80211.c
-drivers/net/wireless/intel/iwlwifi/dvm/main.c
-drivers/net/wireless/intel/iwlwifi/dvm/power.c
-drivers/net/wireless/intel/iwlwifi/dvm/rs.c
-drivers/net/wireless/intel/iwlwifi/dvm/rx.c
-drivers/net/wireless/intel/iwlwifi/dvm/rxon.c
-drivers/net/wireless/intel/iwlwifi/dvm/scan.c
-drivers/net/wireless/intel/iwlwifi/dvm/sta.c
-drivers/net/wireless/intel/iwlwifi/dvm/tt.c
-drivers/net/wireless/intel/iwlwifi/dvm/tx.c
-drivers/net/wireless/intel/iwlwifi/dvm/ucode.c
-drivers/net/wireless/intel/iwlwifi/fw/acpi.c
-drivers/net/wireless/intel/iwlwifi/fw/dbg.c
-drivers/net/wireless/intel/iwlwifi/fw/dump.c
-drivers/net/wireless/intel/iwlwifi/fw/img.c
-drivers/net/wireless/intel/iwlwifi/fw/init.c
-drivers/net/wireless/intel/iwlwifi/fw/notif-wait.c
-drivers/net/wireless/intel/iwlwifi/fw/paging.c
-drivers/net/wireless/intel/iwlwifi/fw/pnvm.c
-drivers/net/wireless/intel/iwlwifi/fw/smem.c
-drivers/net/wireless/intel/iwlwifi/iwl-dbg-tlv.c
-drivers/net/wireless/intel/iwlwifi/iwl-debug.c
-drivers/net/wireless/intel/iwlwifi/iwl-drv.c
-drivers/net/wireless/intel/iwlwifi/iwl-eeprom-parse.c
-drivers/net/wireless/intel/iwlwifi/iwl-eeprom-read.c
-drivers/net/wireless/intel/iwlwifi/iwl-io.c
-drivers/net/wireless/intel/iwlwifi/iwl-nvm-parse.c
-drivers/net/wireless/intel/iwlwifi/iwl-phy-db.c
-drivers/net/wireless/intel/iwlwifi/iwl-trans.c
-drivers/net/wireless/intel/iwlwifi/mvm/binding.c
-drivers/net/wireless/intel/iwlwifi/mvm/coex.c
-drivers/net/wireless/intel/iwlwifi/mvm/ftm-initiator.c
-drivers/net/wireless/intel/iwlwifi/mvm/ftm-responder.c
-drivers/net/wireless/intel/iwlwifi/mvm/fw.c
-drivers/net/wireless/intel/iwlwifi/mvm/mac-ctxt.c
-drivers/net/wireless/intel/iwlwifi/mvm/mac80211.c
-drivers/net/wireless/intel/iwlwifi/mvm/nvm.c
-drivers/net/wireless/intel/iwlwifi/mvm/offloading.c
-drivers/net/wireless/intel/iwlwifi/mvm/ops.c
-drivers/net/wireless/intel/iwlwifi/mvm/phy-ctxt.c
-drivers/net/wireless/intel/iwlwifi/mvm/power.c
-drivers/net/wireless/intel/iwlwifi/mvm/quota.c
-drivers/net/wireless/intel/iwlwifi/mvm/rfi.c
-drivers/net/wireless/intel/iwlwifi/mvm/rs-fw.c
-drivers/net/wireless/intel/iwlwifi/mvm/rs.c
-drivers/net/wireless/intel/iwlwifi/mvm/rx.c
-drivers/net/wireless/intel/iwlwifi/mvm/rxmq.c
-drivers/net/wireless/intel/iwlwifi/mvm/scan.c
-drivers/net/wireless/intel/iwlwifi/mvm/sf.c
-drivers/net/wireless/intel/iwlwifi/mvm/sta.c
-drivers/net/wireless/intel/iwlwifi/mvm/tdls.c
-drivers/net/wireless/intel/iwlwifi/mvm/time-event.c
-drivers/net/wireless/intel/iwlwifi/mvm/tt.c
-drivers/net/wireless/intel/iwlwifi/mvm/tx.c
-drivers/net/wireless/intel/iwlwifi/mvm/utils.c
-drivers/net/wireless/intel/iwlwifi/pcie/ctxt-info-gen3.c
-drivers/net/wireless/intel/iwlwifi/pcie/ctxt-info.c
-drivers/net/wireless/intel/iwlwifi/pcie/drv.c
-drivers/net/wireless/intel/iwlwifi/pcie/rx.c
-drivers/net/wireless/intel/iwlwifi/pcie/trans-gen2.c
-drivers/net/wireless/intel/iwlwifi/pcie/trans.c
-drivers/net/wireless/intel/iwlwifi/pcie/tx-gen2.c
-drivers/net/wireless/intel/iwlwifi/pcie/tx.c
-drivers/net/wireless/intel/iwlwifi/queue/tx.c
-drivers/net/wireless/realtek/rtlwifi/base.c
-drivers/net/wireless/realtek/rtlwifi/cam.c
-drivers/net/wireless/realtek/rtlwifi/core.c
-drivers/net/wireless/realtek/rtlwifi/debug.c
-drivers/net/wireless/realtek/rtlwifi/efuse.c
-drivers/net/wireless/realtek/rtlwifi/pci.c
-drivers/net/wireless/realtek/rtlwifi/ps.c
-drivers/net/wireless/realtek/rtlwifi/rc.c
-drivers/net/wireless/realtek/rtlwifi/regd.c
-drivers/net/wireless/realtek/rtlwifi/rtl8188ee/dm.c
-drivers/net/wireless/realtek/rtlwifi/rtl8188ee/fw.c
-drivers/net/wireless/realtek/rtlwifi/rtl8188ee/hw.c
-drivers/net/wireless/realtek/rtlwifi/rtl8188ee/led.c
-drivers/net/wireless/realtek/rtlwifi/rtl8188ee/phy.c
-drivers/net/wireless/realtek/rtlwifi/rtl8188ee/pwrseq.c
-drivers/net/wireless/realtek/rtlwifi/rtl8188ee/rf.c
-drivers/net/wireless/realtek/rtlwifi/rtl8188ee/sw.c
-drivers/net/wireless/realtek/rtlwifi/rtl8188ee/table.c
-drivers/net/wireless/realtek/rtlwifi/rtl8188ee/trx.c
-drivers/net/wireless/realtek/rtlwifi/stats.c
-drivers/pci/pci-driver.c
-fs/nls/nls_base.c
+
 kernel/irq/chip.c
 kernel/irq/devres.c
 kernel/irq/handle.c
@@ -145,20 +176,13 @@
 kernel/irq/irqdomain.c
 kernel/irq/manage.c
 kernel/irq/resend.c
-kernel/kthread.c
 kernel/locking/mutex.c
-kernel/locking/osq_lock.c
 kernel/locking/rwsem.c
-kernel/notifier.c
-kernel/panic.c
-kernel/resource.c
 kernel/sched/clock.c
 kernel/sched/completion.c
 kernel/sched/swait.c
 kernel/sched/wait.c
 kernel/sched/wait_bit.c
-kernel/smpboot.c
-kernel/softirq.c
 kernel/time/clockevents.c
 kernel/time/clocksource.c
 kernel/time/hrtimer.c
@@ -168,118 +192,35 @@
 kernel/time/tick-common.c
 kernel/time/tick-oneshot.c
 kernel/time/tick-sched.c
-kernel/time/time.c
 kernel/time/timeconv.c
 kernel/time/timecounter.c
 kernel/time/timekeeping.c
-kernel/time/timer.c
+kernel/time/time.c
 kernel/time/timer_list.c
+kernel/time/timer.c
+kernel/kthread.c
+kernel/notifier.c
 kernel/workqueue.c
-lib/asn1_decoder.c
 lib/bitmap.c
-lib/bsearch.c
-lib/crc32.c
-lib/crypto/aes.c
 lib/ctype.c
 lib/debug_locks.c
-lib/dynamic_queue_limits.c
 lib/find_bit.c
 lib/hexdump.c
 lib/idr.c
-lib/iomap.c
 lib/irq_regs.c
 lib/kasprintf.c
 lib/klist.c
 lib/kobject.c
-lib/kstrtox.c
 lib/list_sort.c
-lib/math/div64.c
-lib/nlattr.c
 lib/radix-tree.c
 lib/rbtree.c
-lib/refcount.c
-lib/rhashtable.c
 lib/scatterlist.c
-lib/siphash.c
 lib/sort.c
 lib/string.c
+lib/kstrtox.c
 lib/timerqueue.c
 lib/vsprintf.c
 lib/xarray.c
-mm/mempool.c
+lib/rhashtable.c
 mm/util.c
-net/core/datagram.c
-net/core/dev.c
-net/core/dev_addr_lists.c
-net/core/link_watch.c
-net/core/net-sysfs.c
-net/core/net_namespace.c
-net/core/rtnetlink.c
-net/core/skbuff.c
-net/core/sock.c
-net/core/xdp.c
-net/ethernet/eth.c
-net/ethtool/common.c
-net/mac80211/aead_api.c
-net/mac80211/aes_cmac.c
-net/mac80211/aes_gmac.c
-net/mac80211/agg-rx.c
-net/mac80211/agg-tx.c
-net/mac80211/airtime.c
-net/mac80211/cfg.c
-net/mac80211/chan.c
-net/mac80211/driver-ops.c
-net/mac80211/ethtool.c
-net/mac80211/fils_aead.c
-net/mac80211/he.c
-net/mac80211/ht.c
-net/mac80211/ibss.c
-net/mac80211/iface.c
-net/mac80211/key.c
-net/mac80211/main.c
-net/mac80211/michael.c
-net/mac80211/mlme.c
-net/mac80211/ocb.c
-net/mac80211/offchannel.c
-net/mac80211/rate.c
-net/mac80211/rc80211_minstrel_ht.c
-net/mac80211/rx.c
-net/mac80211/s1g.c
-net/mac80211/scan.c
-net/mac80211/spectmgmt.c
-net/mac80211/sta_info.c
-net/mac80211/status.c
-net/mac80211/tdls.c
-net/mac80211/tkip.c
-net/mac80211/trace.c
-net/mac80211/tx.c
-net/mac80211/util.c
-net/mac80211/vht.c
-net/mac80211/wep.c
-net/mac80211/wme.c
-net/mac80211/wpa.c
-net/netlink/af_netlink.c
-net/netlink/genetlink.c
-net/netlink/policy.c
-net/packet/af_packet.c
-net/rfkill/core.c
-net/sched/sch_generic.c
-net/sched/sch_mq.c
-net/socket.c
-net/wireless/ap.c
-net/wireless/chan.c
-net/wireless/core.c
-net/wireless/ethtool.c
-net/wireless/ibss.c
-net/wireless/mesh.c
-net/wireless/mlme.c
-net/wireless/nl80211.c
-net/wireless/ocb.c
-net/wireless/pmsr.c
-net/wireless/radiotap.c
-net/wireless/reg.c
-net/wireless/scan.c
-net/wireless/sme.c
-net/wireless/sysfs.c
-net/wireless/trace.c
-net/wireless/util.c
+arch/x86/lib/hweight.S
diff -ruN pc/src/lib/wifi/spec/x86_64/dep.list world/src/lib/wifi_ath9k/spec/x86_64/dep.list
--- pc/src/lib/wifi/spec/x86_64/dep.list	2022-05-27 12:45:41.996234498 +0000
+++ world/src/lib/wifi_ath9k/spec/x86_64/dep.list	2023-01-15 13:49:43.963974138 +0000
@@ -1,12 +1,1267 @@
+arch/x86/include/asm/acenv.h
+arch/x86/include/asm/acpi.h
+arch/x86/include/asm/alternative.h
+arch/x86/include/asm/apicdef.h
+arch/x86/include/asm/arch_hweight.h
+arch/x86/include/asm/asm.h
+arch/x86/include/asm/atomic.h
 arch/x86/include/asm/atomic64_64.h
+arch/x86/include/asm/barrier.h
+arch/x86/include/asm/bitops.h
+arch/x86/include/asm/bug.h
+arch/x86/include/asm/cache.h
+arch/x86/include/asm/cacheflush.h
+arch/x86/include/asm/checksum.h
 arch/x86/include/asm/checksum_64.h
+arch/x86/include/asm/clocksource.h
+arch/x86/include/asm/cmpxchg.h
 arch/x86/include/asm/cmpxchg_64.h
+arch/x86/include/asm/compat.h
+arch/x86/include/asm/cpu_entry_area.h
+arch/x86/include/asm/cpufeatures.h
+arch/x86/include/asm/cpumask.h
+arch/x86/include/asm/delay.h
+arch/x86/include/asm/desc.h
+arch/x86/include/asm/desc_defs.h
+arch/x86/include/asm/device.h
+arch/x86/include/asm/disabled-features.h
+arch/x86/include/asm/div64.h
+arch/x86/include/asm/dma.h
+arch/x86/include/asm/elf.h
+arch/x86/include/asm/emergency-restart.h
+arch/x86/include/asm/exec.h
+arch/x86/include/asm/extable.h
+arch/x86/include/asm/fixmap.h
+arch/x86/include/asm/fpu/api.h
+arch/x86/include/asm/fpu/types.h
+arch/x86/include/asm/fsgsbase.h
+arch/x86/include/asm/ftrace.h
+arch/x86/include/asm/hardirq.h
+arch/x86/include/asm/hw_breakpoint.h
+arch/x86/include/asm/hw_irq.h
+arch/x86/include/asm/intel_ds.h
+arch/x86/include/asm/invpcid.h
+arch/x86/include/asm/irq.h
+arch/x86/include/asm/irq_vectors.h
+arch/x86/include/asm/irq_work.h
+arch/x86/include/asm/irqdomain.h
+arch/x86/include/asm/ist.h
+arch/x86/include/asm/jailhouse_para.h
 arch/x86/include/asm/kaslr.h
+arch/x86/include/asm/kdebug.h
+arch/x86/include/asm/kgdb.h
+arch/x86/include/asm/kprobes.h
+arch/x86/include/asm/kvm_para.h
+arch/x86/include/asm/linkage.h
+arch/x86/include/asm/local.h
+arch/x86/include/asm/math_emu.h
+arch/x86/include/asm/mem_encrypt.h
+arch/x86/include/asm/memtype.h
+arch/x86/include/asm/mmu.h
+arch/x86/include/asm/mmu_context.h
+arch/x86/include/asm/module.h
+arch/x86/include/asm/mpspec.h
+arch/x86/include/asm/mpspec_def.h
+arch/x86/include/asm/msi.h
+arch/x86/include/asm/msr-index.h
+arch/x86/include/asm/msr.h
+arch/x86/include/asm/nmi.h
+arch/x86/include/asm/nops.h
+arch/x86/include/asm/numa.h
+arch/x86/include/asm/orc_types.h
 arch/x86/include/asm/page_64_types.h
+arch/x86/include/asm/page_types.h
+arch/x86/include/asm/paravirt.h
+arch/x86/include/asm/pci.h
+arch/x86/include/asm/pci_x86.h
+arch/x86/include/asm/percpu.h
+arch/x86/include/asm/perf_event.h
 arch/x86/include/asm/pgtable_64_types.h
+arch/x86/include/asm/pgtable_areas.h
+arch/x86/include/asm/pgtable_types.h
+arch/x86/include/asm/posix_types.h
+arch/x86/include/asm/preempt.h
+arch/x86/include/asm/processor-flags.h
+arch/x86/include/asm/processor.h
+arch/x86/include/asm/proto.h
+arch/x86/include/asm/pti.h
+arch/x86/include/asm/ptrace.h
+arch/x86/include/asm/required-features.h
+arch/x86/include/asm/rmwcc.h
+arch/x86/include/asm/segment.h
+arch/x86/include/asm/set_memory.h
+arch/x86/include/asm/shmparam.h
+arch/x86/include/asm/signal.h
+arch/x86/include/asm/smap.h
+arch/x86/include/asm/smp.h
 arch/x86/include/asm/sparsemem.h
+arch/x86/include/asm/stacktrace.h
+arch/x86/include/asm/static_call.h
+arch/x86/include/asm/string.h
 arch/x86/include/asm/string_64.h
+arch/x86/include/asm/syscall_wrapper.h
+arch/x86/include/asm/text-patching.h
+arch/x86/include/asm/thread_info.h
+arch/x86/include/asm/timex.h
+arch/x86/include/asm/tlb.h
+arch/x86/include/asm/tlbbatch.h
+arch/x86/include/asm/tlbflush.h
+arch/x86/include/asm/topology.h
+arch/x86/include/asm/trace_clock.h
+arch/x86/include/asm/tsc.h
+arch/x86/include/asm/uaccess.h
+arch/x86/include/asm/unistd.h
+arch/x86/include/asm/unwind_hints.h
+arch/x86/include/asm/user.h
+arch/x86/include/asm/user32.h
 arch/x86/include/asm/user_64.h
+arch/x86/include/asm/vdso.h
+arch/x86/include/asm/vdso/clocksource.h
+arch/x86/include/asm/vdso/processor.h
+arch/x86/include/asm/vga.h
+arch/x86/include/asm/vmalloc.h
+arch/x86/include/asm/vmxfeatures.h
+arch/x86/include/asm/word-at-a-time.h
+arch/x86/include/asm/x86_init.h
+arch/x86/include/uapi/asm/auxvec.h
+arch/x86/include/uapi/asm/bitsperlong.h
+arch/x86/include/uapi/asm/bootparam.h
+arch/x86/include/uapi/asm/byteorder.h
+arch/x86/include/uapi/asm/hw_breakpoint.h
+arch/x86/include/uapi/asm/ist.h
+arch/x86/include/uapi/asm/kvm_para.h
+arch/x86/include/uapi/asm/ldt.h
+arch/x86/include/uapi/asm/mman.h
+arch/x86/include/uapi/asm/msr.h
+arch/x86/include/uapi/asm/perf_regs.h
 arch/x86/include/uapi/asm/posix_types_64.h
+arch/x86/include/uapi/asm/processor-flags.h
+arch/x86/include/uapi/asm/ptrace-abi.h
+arch/x86/include/uapi/asm/ptrace.h
+arch/x86/include/uapi/asm/sembuf.h
+arch/x86/include/uapi/asm/shmbuf.h
+arch/x86/include/uapi/asm/sigcontext.h
+arch/x86/include/uapi/asm/siginfo.h
+arch/x86/include/uapi/asm/signal.h
+arch/x86/include/uapi/asm/stat.h
+arch/x86/include/uapi/asm/swab.h
+arch/x86/include/uapi/asm/unistd.h
 arch/x86/include/uapi/asm/vsyscall.h
+certs/common.h
+crypto/internal.h
+drivers/base/base.h
+drivers/base/power/power.h
+drivers/base/trace.h
+drivers/leds/leds.h
+drivers/net/wireless/ath/ath9k/ani.h
+drivers/net/wireless/ath/ath.h
+drivers/net/wireless/ath/ath9k/ar5008_initvals.h
+drivers/net/wireless/ath/ath9k/ar9001_initvals.h
+drivers/net/wireless/ath/ath9k/ar9002_initvals.h
+drivers/net/wireless/ath/ath9k/ar9002_phy.h
+drivers/net/wireless/ath/ath9k/ar9003_2p2_initvals.h
+drivers/net/wireless/ath/ath9k/ar9003_aic.h
+drivers/net/wireless/ath/ath9k/ar9003_buffalo_initvals.h
+drivers/net/wireless/ath/ath9k/ar9003_eeprom.h
+drivers/net/wireless/ath/ath9k/ar9003_mac.h
+drivers/net/wireless/ath/ath9k/ar9003_mci.h
+drivers/net/wireless/ath/ath9k/ar9003_phy.h
+drivers/net/wireless/ath/ath9k/ar9003_rtt.h
+drivers/net/wireless/ath/ath9k/ar9330_1p1_initvals.h
+drivers/net/wireless/ath/ath9k/ar9330_1p2_initvals.h
+drivers/net/wireless/ath/ath9k/ar9340_initvals.h
+drivers/net/wireless/ath/ath9k/ar9462_2p0_initvals.h
+drivers/net/wireless/ath/ath9k/ar9462_2p1_initvals.h
+drivers/net/wireless/ath/ath9k/ar9485_initvals.h
+drivers/net/wireless/ath/ath9k/ar953x_initvals.h
+drivers/net/wireless/ath/ath9k/ar955x_1p0_initvals.h
+drivers/net/wireless/ath/ath9k/ar9565_1p0_initvals.h
+drivers/net/wireless/ath/ath9k/ar9565_1p1_initvals.h
+drivers/net/wireless/ath/ath9k/ar956x_initvals.h
+drivers/net/wireless/ath/ath9k/ar9580_1p0_initvals.h
+drivers/net/wireless/ath/ath9k/ath9k.h
+drivers/net/wireless/ath/ath9k/btcoex.h
+drivers/net/wireless/ath/ath9k/calib.h
+drivers/net/wireless/ath/ath9k/common-beacon.h
+drivers/net/wireless/ath/ath9k/common-debug.h
+drivers/net/wireless/ath/ath9k/common-init.h
+drivers/net/wireless/ath/ath9k/common-spectral.h
+drivers/net/wireless/ath/ath9k/common.h
+drivers/net/wireless/ath/ath9k/debug.h
+drivers/net/wireless/ath/ath9k/dfs.h
+drivers/net/wireless/ath/ath9k/dfs_debug.h
+drivers/net/wireless/ath/ath9k/dynack.h
+drivers/net/wireless/ath/ath9k/eeprom.h
+drivers/net/wireless/ath/ath9k/hif_usb.h
+drivers/net/wireless/ath/ath9k/htc.h
+drivers/net/wireless/ath/ath9k/htc_hst.h
+drivers/net/wireless/ath/ath9k/hw-ops.h
+drivers/net/wireless/ath/ath9k/hw.h
+drivers/net/wireless/ath/ath9k/mac.h
+drivers/net/wireless/ath/ath9k/mci.h
+drivers/net/wireless/ath/ath9k/phy.h
+drivers/net/wireless/ath/ath9k/reg.h
+drivers/net/wireless/ath/ath9k/reg_aic.h
+drivers/net/wireless/ath/ath9k/reg_mci.h
+drivers/net/wireless/ath/ath9k/reg_wow.h
+drivers/net/wireless/ath/ath9k/wmi.h
+drivers/net/wireless/ath/dfs_pattern_detector.h
+drivers/net/wireless/ath/reg.h
+drivers/net/wireless/ath/regd.h
+drivers/net/wireless/ath/regd_common.h
+drivers/net/wireless/ath/spectral_common.h
+drivers/net/wireless/ath/trace.h
+drivers/pci/pci.h
+drivers/pci/pcie/portdrv.h
+include/acpi/acbuffer.h
+include/acpi/acconfig.h
+include/acpi/acexcep.h
+include/acpi/acnames.h
+include/acpi/acoutput.h
+include/acpi/acpi.h
+include/acpi/acpi_bus.h
+include/acpi/acpi_drivers.h
+include/acpi/acpi_io.h
+include/acpi/acpi_numa.h
+include/acpi/acpiosxf.h
+include/acpi/acpixf.h
+include/acpi/acrestyp.h
+include/acpi/actbl.h
+include/acpi/actbl1.h
+include/acpi/actbl2.h
+include/acpi/actbl3.h
+include/acpi/actypes.h
+include/acpi/pdc_intel.h
+include/acpi/platform/acenv.h
+include/acpi/platform/acenvex.h
+include/acpi/platform/acgcc.h
+include/acpi/platform/acgccex.h
+include/acpi/platform/aclinux.h
+include/acpi/platform/aclinuxex.h
+include/asm-generic/atomic-instrumented.h
+include/asm-generic/atomic-long.h
+include/asm-generic/barrier.h
+include/asm-generic/bitops/const_hweight.h
+include/asm-generic/bitops/ext2-atomic-setbit.h
+include/asm-generic/bitops/find.h
+include/asm-generic/bitops/instrumented-atomic.h
+include/asm-generic/bitops/instrumented-lock.h
+include/asm-generic/bitops/instrumented-non-atomic.h
+include/asm-generic/bitops/le.h
+include/asm-generic/bitops/sched.h
+include/asm-generic/bitsperlong.h
+include/asm-generic/bug.h
+include/asm-generic/cacheflush.h
+include/asm-generic/compat.h
+include/asm-generic/delay.h
 include/asm-generic/div64.h
+include/asm-generic/early_ioremap.h
+include/asm-generic/error-injection.h
+include/asm-generic/fixmap.h
+include/asm-generic/getorder.h
+include/asm-generic/int-ll64.h
+include/asm-generic/io.h
+include/asm-generic/ioctl.h
+include/asm-generic/iomap.h
+include/asm-generic/irq_regs.h
+include/asm-generic/kmap_size.h
+include/asm-generic/kprobes.h
+include/asm-generic/local64.h
+include/asm-generic/logic_io.h
+include/asm-generic/mmiowb.h
+include/asm-generic/mmu_context.h
+include/asm-generic/module.h
+include/asm-generic/param.h
+include/asm-generic/pci.h
+include/asm-generic/pci_iomap.h
+include/asm-generic/percpu.h
+include/asm-generic/pgtable-nop4d.h
+include/asm-generic/resource.h
+include/asm-generic/rwonce.h
+include/asm-generic/sections.h
+include/asm-generic/set_memory.h
+include/asm-generic/termios.h
+include/asm-generic/tlb.h
+include/asm-generic/topology.h
+include/asm-generic/unaligned.h
+include/crypto/acompress.h
+include/crypto/aead.h
+include/crypto/aes.h
+include/crypto/akcipher.h
+include/crypto/algapi.h
+include/crypto/arc4.h
+include/crypto/b128ops.h
+include/crypto/ctr.h
+include/crypto/drbg.h
+include/crypto/gcm.h
+include/crypto/gf128mul.h
+include/crypto/ghash.h
+include/crypto/hash.h
+include/crypto/hash_info.h
+include/crypto/internal/acompress.h
+include/crypto/internal/aead.h
+include/crypto/internal/akcipher.h
+include/crypto/internal/cipher.h
+include/crypto/internal/geniv.h
+include/crypto/internal/hash.h
+include/crypto/internal/kpp.h
+include/crypto/internal/rng.h
+include/crypto/internal/scompress.h
+include/crypto/internal/simd.h
+include/crypto/internal/skcipher.h
+include/crypto/kpp.h
+include/crypto/md5.h
+include/crypto/null.h
+include/crypto/rng.h
+include/crypto/scatterwalk.h
+include/crypto/sha1.h
+include/crypto/sha2.h
+include/crypto/sha256_base.h
+include/crypto/skcipher.h
+include/crypto/streebog.h
+include/dt-bindings/leds/common.h
+include/linux/acpi.h
+include/linux/acpi_iort.h
+include/linux/aer.h
+include/linux/alarmtimer.h
+include/linux/align.h
+include/linux/apm_bios.h
+include/linux/arch_topology.h
+include/linux/asn1.h
+include/linux/asn1_ber_bytecode.h
+include/linux/asn1_decoder.h
+include/linux/assoc_array.h
+include/linux/async.h
+include/linux/ath9k_platform.h
+include/linux/atomic-arch-fallback.h
+include/linux/atomic.h
+include/linux/audit.h
+include/linux/auxvec.h
+include/linux/average.h
+include/linux/backing-dev-defs.h
+include/linux/binfmts.h
+include/linux/bio.h
+include/linux/bit_spinlock.h
+include/linux/bitfield.h
+include/linux/bitmap.h
+include/linux/bitops.h
+include/linux/bitrev.h
+include/linux/bits.h
+include/linux/blk-cgroup.h
+include/linux/blk_types.h
+include/linux/blkdev.h
+include/linux/bottom_half.h
+include/linux/bpf-cgroup.h
+include/linux/bpf-netns.h
+include/linux/bpf.h
+include/linux/bpf_local_storage.h
+include/linux/bpf_trace.h
+include/linux/bpfptr.h
+include/linux/bsearch.h
+include/linux/bsg.h
+include/linux/btf_ids.h
+include/linux/bug.h
+include/linux/build_bug.h
+include/linux/buildid.h
+include/linux/bvec.h
+include/linux/byteorder/generic.h
+include/linux/byteorder/little_endian.h
+include/linux/cache.h
+include/linux/capability.h
+include/linux/cc_platform.h
+include/linux/cdev.h
+include/linux/cfi.h
+include/linux/cgroup-defs.h
+include/linux/cgroup.h
+include/linux/clk-provider.h
+include/linux/clk.h
+include/linux/clk/clk-conf.h
+include/linux/clockchips.h
+include/linux/clocksource.h
+include/linux/clocksource_ids.h
+include/linux/compat.h
+include/linux/compiler-gcc.h
+include/linux/compiler.h
+include/linux/compiler_attributes.h
+include/linux/compiler_types.h
+include/linux/completion.h
+include/linux/component.h
+include/linux/console.h
+include/linux/console_struct.h
+include/linux/consolemap.h
+include/linux/const.h
+include/linux/context_tracking.h
+include/linux/context_tracking_state.h
+include/linux/cookie.h
+include/linux/cpu.h
+include/linux/cpu_rmap.h
+include/linux/cpufreq.h
+include/linux/cpuhotplug.h
+include/linux/cpuidle.h
+include/linux/cpumask.h
+include/linux/cpuset.h
+include/linux/crash_core.h
+include/linux/crash_dump.h
+include/linux/crc32.h
+include/linux/crc32poly.h
+include/linux/cred.h
+include/linux/crypto.h
+include/linux/ctype.h
+include/linux/dax.h
+include/linux/dcache.h
+include/linux/debug_locks.h
+include/linux/debugfs.h
+include/linux/debugobjects.h
+include/linux/delay.h
+include/linux/delayacct.h
+include/linux/delayed_call.h
+include/linux/dev_printk.h
+include/linux/devcoredump.h
+include/linux/device.h
+include/linux/device/bus.h
+include/linux/device/class.h
+include/linux/device/driver.h
+include/linux/dma-direction.h
+include/linux/dma-map-ops.h
+include/linux/dma-mapping.h
+include/linux/dmaengine.h
+include/linux/dmapool.h
+include/linux/dmi.h
+include/linux/dqblk_qtree.h
+include/linux/dqblk_v1.h
+include/linux/dqblk_v2.h
+include/linux/dynamic_debug.h
+include/linux/dynamic_queue_limits.h
+include/linux/edd.h
+include/linux/elevator.h
+include/linux/elf-randomize.h
+include/linux/elf.h
+include/linux/elfcore.h
+include/linux/energy_model.h
+include/linux/err.h
+include/linux/errname.h
+include/linux/errno.h
+include/linux/error-injection.h
+include/linux/errqueue.h
+include/linux/errseq.h
+include/linux/etherdevice.h
+include/linux/ethtool.h
+include/linux/ethtool_netlink.h
+include/linux/eventfd.h
+include/linux/export.h
+include/linux/fault-inject-usercopy.h
+include/linux/fault-inject.h
+include/linux/fcntl.h
+include/linux/file.h
+include/linux/filter.h
+include/linux/fips.h
+include/linux/firmware.h
+include/linux/flex_proportions.h
+include/linux/freelist.h
+include/linux/freezer.h
+include/linux/fs.h
+include/linux/fs_context.h
+include/linux/fs_types.h
+include/linux/ftrace.h
+include/linux/ftrace_irq.h
+include/linux/fwnode.h
+include/linux/gcd.h
+include/linux/genetlink.h
+include/linux/genhd.h
+include/linux/gfp.h
+include/linux/gpio/consumer.h
+include/linux/gpio.h
+include/linux/hardirq.h
+include/linux/hash.h
+include/linux/hashtable.h
+include/linux/highmem-internal.h
+include/linux/highmem.h
+include/linux/highuid.h
+include/linux/hrtimer.h
+include/linux/hrtimer_defs.h
+include/linux/huge_mm.h
+include/linux/hugetlb.h
+include/linux/hugetlb_inline.h
+include/linux/hw_random.h
+include/linux/hypervisor.h
+include/linux/icmpv6.h
+include/linux/idr.h
+include/linux/ieee80211.h
+include/linux/if_arp.h
+include/linux/if_bridge.h
+include/linux/if_ether.h
+include/linux/if_link.h
+include/linux/if_macvlan.h
+include/linux/if_tun.h
+include/linux/if_tunnel.h
+include/linux/if_vlan.h
+include/linux/in.h
+include/linux/in6.h
+include/linux/indirect_call_wrapper.h
+include/linux/inet.h
+include/linux/inetdevice.h
+include/linux/init.h
+include/linux/init_task.h
+include/linux/instrumentation.h
+include/linux/instrumented.h
+include/linux/interrupt.h
+include/linux/interval_tree.h
+include/linux/io.h
+include/linux/iocontext.h
+include/linux/iopoll.h
+include/linux/ioport.h
+include/linux/ioprio.h
+include/linux/ip.h
+include/linux/ipc.h
+include/linux/ipv6.h
+include/linux/ipv6_route.h
+include/linux/irq.h
+include/linux/irq_work.h
+include/linux/irqchip.h
+include/linux/irqdesc.h
+include/linux/irqdomain.h
+include/linux/irqflags.h
+include/linux/irqhandler.h
+include/linux/irqnr.h
+include/linux/irqreturn.h
+include/linux/jhash.h
+include/linux/jiffies.h
+include/linux/jump_label.h
+include/linux/jump_label_ratelimit.h
+include/linux/kallsyms.h
+include/linux/kasan-checks.h
+include/linux/kasan.h
+include/linux/kconfig.h
+include/linux/kcov.h
+include/linux/kcsan-checks.h
+include/linux/kcsan.h
+include/linux/kdebug.h
+include/linux/kdev_t.h
+include/linux/kern_levels.h
+include/linux/kernel.h
+include/linux/kernel_read_file.h
+include/linux/kernel_stat.h
+include/linux/kernfs.h
+include/linux/kexec.h
+include/linux/key.h
+include/linux/kgdb.h
+include/linux/klist.h
+include/linux/kmemleak.h
+include/linux/kmod.h
+include/linux/kmsg_dump.h
+include/linux/kobject.h
+include/linux/kobject_ns.h
+include/linux/kprobes.h
+include/linux/kref.h
+include/linux/kstrtox.h
+include/linux/kthread.h
+include/linux/ktime.h
+include/linux/kvm_para.h
+include/linux/latencytop.h
+include/linux/leds.h
+include/linux/limits.h
+include/linux/linkage.h
+include/linux/linkmode.h
+include/linux/list.h
+include/linux/list_bl.h
+include/linux/list_lru.h
+include/linux/list_nulls.h
+include/linux/list_sort.h
+include/linux/livepatch.h
+include/linux/llist.h
+include/linux/local_lock.h
+include/linux/local_lock_internal.h
+include/linux/lockdep.h
+include/linux/lockdep_types.h
+include/linux/lockref.h
+include/linux/log2.h
+include/linux/logic_pio.h
+include/linux/math.h
+include/linux/math64.h
+include/linux/mdio.h
+include/linux/mem_encrypt.h
+include/linux/memblock.h
+include/linux/memcontrol.h
+include/linux/memory_hotplug.h
+include/linux/mempolicy.h
+include/linux/mempool.h
+include/linux/memremap.h
+include/linux/migrate.h
+include/linux/migrate_mode.h
+include/linux/mii.h
+include/linux/mii_timestamper.h
+include/linux/minmax.h
+include/linux/mm.h
+include/linux/mm_types.h
+include/linux/mm_types_task.h
+include/linux/mman.h
+include/linux/mmap_lock.h
+include/linux/mmdebug.h
+include/linux/mmu_context.h
+include/linux/mmu_notifier.h
+include/linux/mmzone.h
+include/linux/mod_devicetable.h
+include/linux/module.h
+include/linux/moduleparam.h
+include/linux/mount.h
+include/linux/mpls.h
+include/linux/msi.h
+include/linux/mutex.h
+include/linux/net.h
+include/linux/netdev_features.h
+include/linux/netdevice.h
+include/linux/netfilter.h
+include/linux/netfilter_defs.h
+include/linux/netfilter_ingress.h
+include/linux/netlink.h
+include/linux/netpoll.h
+include/linux/nfs_fs_i.h
+include/linux/nls.h
+include/linux/nmi.h
+include/linux/node.h
+include/linux/nodemask.h
+include/linux/nospec.h
+include/linux/notifier.h
+include/linux/ns_common.h
+include/linux/nsproxy.h
+include/linux/numa.h
+include/linux/nvmem-consumer.h
+include/linux/nvmem-provider.h
+include/linux/objtool.h
+include/linux/of.h
+include/linux/of_address.h
+include/linux/of_clk.h
+include/linux/of_device.h
+include/linux/of_fdt.h
+include/linux/of_graph.h
+include/linux/of_irq.h
+include/linux/of_net.h
+include/linux/of_pci.h
+include/linux/of_platform.h
+include/linux/once.h
+include/linux/once_lite.h
+include/linux/osq_lock.h
+include/linux/overflow.h
+include/linux/page-flags-layout.h
+include/linux/page-flags.h
+include/linux/page_counter.h
+include/linux/page_ext.h
+include/linux/page_ref.h
+include/linux/pageblock-flags.h
+include/linux/pagemap.h
+include/linux/panic.h
+include/linux/panic_notifier.h
+include/linux/path.h
+include/linux/pci-dma-compat.h
+include/linux/pci.h
+include/linux/pci_hotplug.h
+include/linux/pci_ids.h
+include/linux/percpu-defs.h
+include/linux/percpu-refcount.h
+include/linux/percpu-rwsem.h
+include/linux/percpu.h
+include/linux/percpu_counter.h
+include/linux/perf_event.h
+include/linux/perf_regs.h
+include/linux/personality.h
+include/linux/pfn.h
+include/linux/phy.h
+include/linux/phylink.h
+include/linux/pid.h
+include/linux/pid_namespace.h
+include/linux/pinctrl/devinfo.h
+include/linux/pipe_fs_i.h
+include/linux/pkeys.h
+include/linux/platform_data/dsa.h
+include/linux/platform_device.h
+include/linux/plist.h
+include/linux/pm.h
+include/linux/pm_domain.h
+include/linux/pm_qos.h
+include/linux/pm_runtime.h
+include/linux/pm_wakeup.h
+include/linux/poison.h
+include/linux/poll.h
+include/linux/posix-timers.h
+include/linux/pps_kernel.h
+include/linux/prandom.h
+include/linux/preempt.h
+include/linux/prefetch.h
+include/linux/printk.h
+include/linux/proc_fs.h
+include/linux/proc_ns.h
+include/linux/processor.h
+include/linux/profile.h
+include/linux/projid.h
+include/linux/property.h
+include/linux/pseudo_fs.h
+include/linux/psi.h
+include/linux/psi_types.h
+include/linux/ptp_classify.h
+include/linux/ptp_clock_kernel.h
+include/linux/ptr_ring.h
+include/linux/ptrace.h
+include/linux/pvclock_gtod.h
+include/linux/quota.h
+include/linux/radix-tree.h
+include/linux/random.h
+include/linux/range.h
+include/linux/ratelimit.h
+include/linux/ratelimit_types.h
+include/linux/rbtree.h
+include/linux/rbtree_augmented.h
+include/linux/rbtree_latch.h
+include/linux/rcu_segcblist.h
+include/linux/rcu_sync.h
+include/linux/rculist.h
+include/linux/rculist_bl.h
+include/linux/rculist_nulls.h
+include/linux/rcupdate.h
+include/linux/rcupdate_wait.h
+include/linux/rcutiny.h
+include/linux/rcuwait.h
+include/linux/reboot.h
+include/linux/refcount.h
+include/linux/resource.h
+include/linux/resource_ext.h
+include/linux/restart_block.h
+include/linux/rfkill.h
+include/linux/rhashtable-types.h
+include/linux/rhashtable.h
+include/linux/ring_buffer.h
+include/linux/rtc.h
+include/linux/rtnetlink.h
+include/linux/rwlock.h
+include/linux/rwlock_types.h
+include/linux/rwsem.h
+include/linux/sbitmap.h
+include/linux/scatterlist.h
+include/linux/sched.h
+include/linux/sched/autogroup.h
+include/linux/sched/clock.h
+include/linux/sched/coredump.h
+include/linux/sched/cpufreq.h
+include/linux/sched/cputime.h
+include/linux/sched/deadline.h
+include/linux/sched/debug.h
+include/linux/sched/hotplug.h
+include/linux/sched/idle.h
+include/linux/sched/init.h
+include/linux/sched/isolation.h
+include/linux/sched/jobctl.h
+include/linux/sched/loadavg.h
+include/linux/sched/mm.h
+include/linux/sched/nohz.h
+include/linux/sched/numa_balancing.h
+include/linux/sched/prio.h
+include/linux/sched/rt.h
+include/linux/sched/signal.h
+include/linux/sched/smt.h
+include/linux/sched/stat.h
+include/linux/sched/sysctl.h
+include/linux/sched/task.h
+include/linux/sched/task_stack.h
+include/linux/sched/topology.h
+include/linux/sched/types.h
+include/linux/sched/user.h
+include/linux/sched/wake_q.h
+include/linux/sched/xacct.h
+include/linux/sched_clock.h
+include/linux/screen_info.h
+include/linux/sctp.h
+include/linux/seccomp.h
+include/linux/securebits.h
+include/linux/security.h
+include/linux/sem.h
+include/linux/semaphore.h
+include/linux/seq_buf.h
+include/linux/seq_file.h
+include/linux/seq_file_net.h
+include/linux/seqlock.h
+include/linux/set_memory.h
+include/linux/shm.h
+include/linux/shrinker.h
+include/linux/signal.h
+include/linux/signal_types.h
+include/linux/siphash.h
+include/linux/sizes.h
+include/linux/skb_array.h
+include/linux/skbuff.h
+include/linux/slab.h
+include/linux/smp.h
+include/linux/smp_types.h
+include/linux/smpboot.h
+include/linux/sock_diag.h
+include/linux/socket.h
+include/linux/sockptr.h
+include/linux/sort.h
+include/linux/spinlock.h
+include/linux/spinlock_api_up.h
+include/linux/spinlock_types.h
+include/linux/spinlock_types_up.h
+include/linux/spinlock_up.h
+include/linux/splice.h
+include/linux/srcu.h
+include/linux/srcutiny.h
+include/linux/stackdepot.h
+include/linux/stacktrace.h
+include/linux/stat.h
+include/linux/static_call.h
+include/linux/static_call_types.h
+include/linux/static_key.h
+include/linux/stddef.h
+include/linux/stop_machine.h
+include/linux/string.h
+include/linux/string_helpers.h
+include/linux/stringhash.h
+include/linux/stringify.h
+include/linux/suspend.h
+include/linux/swab.h
+include/linux/swait.h
+include/linux/swap.h
+include/linux/sync_core.h
+include/linux/syscall_user_dispatch.h
+include/linux/syscalls.h
+include/linux/syscore_ops.h
+include/linux/sysctl.h
+include/linux/sysfs.h
+include/linux/sysrq.h
+include/linux/task_io_accounting.h
+include/linux/task_work.h
+include/linux/tcp.h
+include/linux/textsearch.h
+include/linux/thermal.h
+include/linux/thread_info.h
+include/linux/threads.h
+include/linux/tick.h
+include/linux/time.h
+include/linux/time32.h
+include/linux/time64.h
+include/linux/timecounter.h
+include/linux/timekeeper_internal.h
+include/linux/timekeeping.h
+include/linux/timer.h
+include/linux/timerqueue.h
+include/linux/timex.h
+include/linux/topology.h
+include/linux/trace.h
+include/linux/trace_clock.h
+include/linux/trace_events.h
+include/linux/trace_recursion.h
+include/linux/trace_seq.h
+include/linux/tracepoint-defs.h
+include/linux/tracepoint.h
+include/linux/tsacct_kern.h
+include/linux/tty.h
+include/linux/tty_driver.h
+include/linux/tty_ldisc.h
+include/linux/typecheck.h
+include/linux/types.h
+include/linux/u64_stats_sync.h
+include/linux/uaccess.h
+include/linux/udp.h
+include/linux/uidgid.h
+include/linux/uio.h
+include/linux/umh.h
+include/linux/unaligned/packed_struct.h
+include/linux/units.h
+include/linux/uprobes.h
+include/linux/user.h
+include/linux/user_namespace.h
+include/linux/userfaultfd_k.h
+include/linux/utsname.h
+include/linux/uuid.h
+include/linux/verification.h
+include/linux/vgaarb.h
+include/linux/virtio.h
+include/linux/virtio_byteorder.h
+include/linux/virtio_config.h
+include/linux/virtio_net.h
+include/linux/vm_event_item.h
+include/linux/vmalloc.h
+include/linux/vmpressure.h
+include/linux/vmstat.h
+include/linux/vt.h
+include/linux/vt_kern.h
+include/linux/vtime.h
+include/linux/wait.h
+include/linux/wait_bit.h
+include/linux/win_minmax.h
+include/linux/wireless.h
+include/linux/workqueue.h
+include/linux/writeback.h
+include/linux/ww_mutex.h
+include/linux/xarray.h
+include/linux/xattr.h
+include/net/Space.h
+include/net/act_api.h
+include/net/addrconf.h
+include/net/arp.h
+include/net/bpf_sk_storage.h
+include/net/busy_poll.h
+include/net/cfg80211-wext.h
+include/net/cfg80211.h
+include/net/checksum.h
+include/net/cls_cgroup.h
+include/net/codel.h
+include/net/codel_impl.h
+include/net/compat.h
+include/net/devlink.h
+include/net/dsa.h
+include/net/dsfield.h
+include/net/dst.h
+include/net/dst_cache.h
+include/net/dst_metadata.h
+include/net/dst_ops.h
+include/net/fib_notifier.h
+include/net/fib_rules.h
+include/net/flow.h
+include/net/flow_dissector.h
+include/net/flow_offload.h
+include/net/fq.h
+include/net/fq_impl.h
+include/net/gen_stats.h
+include/net/genetlink.h
+include/net/gro.h
+include/net/gro_cells.h
+include/net/ieee80211_radiotap.h
+include/net/if_inet6.h
+include/net/inet_connection_sock.h
+include/net/inet_ecn.h
+include/net/inet_frag.h
+include/net/inet_hashtables.h
+include/net/inet_sock.h
+include/net/inet_timewait_sock.h
+include/net/inetpeer.h
+include/net/ip.h
+include/net/ip6_checksum.h
+include/net/ip6_fib.h
+include/net/ip_fib.h
+include/net/ip_tunnels.h
+include/net/ipv6.h
+include/net/ipv6_stubs.h
+include/net/iw_handler.h
+include/net/l3mdev.h
+include/net/lwtunnel.h
+include/net/mac80211.h
+include/net/mpls.h
+include/net/mptcp.h
+include/net/ndisc.h
+include/net/neighbour.h
+include/net/net_namespace.h
+include/net/netlink.h
+include/net/netns/bpf.h
+include/net/netns/can.h
+include/net/netns/core.h
+include/net/netns/generic.h
+include/net/netns/hash.h
+include/net/netns/ieee802154_6lowpan.h
+include/net/netns/ipv4.h
+include/net/netns/ipv6.h
+include/net/netns/mib.h
+include/net/netns/mpls.h
+include/net/netns/netfilter.h
+include/net/netns/nexthop.h
+include/net/netns/nftables.h
+include/net/netns/packet.h
+include/net/netns/sctp.h
+include/net/netns/smc.h
+include/net/netns/unix.h
+include/net/netns/x_tables.h
+include/net/netns/xdp.h
+include/net/netns/xfrm.h
+include/net/netprio_cgroup.h
+include/net/page_pool.h
+include/net/pkt_cls.h
+include/net/pkt_sched.h
+include/net/protocol.h
+include/net/regulatory.h
+include/net/request_sock.h
+include/net/route.h
+include/net/rtnetlink.h
+include/net/sch_generic.h
+include/net/scm.h
+include/net/snmp.h
+include/net/sock.h
+include/net/sock_reuseport.h
+include/net/switchdev.h
+include/net/tcp.h
+include/net/tcp_states.h
+include/net/timewait_sock.h
+include/net/tso.h
+include/net/udp.h
+include/net/udp_tunnel.h
+include/net/wext.h
+include/net/xdp.h
+include/net/xdp_priv.h
+include/net/xdp_sock.h
+include/net/xdp_sock_drv.h
+include/net/xfrm.h
+include/net/xsk_buff_pool.h
+include/trace/define_trace.h
+include/trace/events/irq.h
+include/trace/events/napi.h
+include/trace/events/net.h
+include/trace/events/netlink.h
+include/trace/events/power.h
+include/trace/events/qdisc.h
+include/trace/events/sched.h
+include/trace/events/skb.h
+include/trace/events/sock.h
+include/trace/events/timer.h
+include/trace/events/tlb.h
+include/trace/events/workqueue.h
+include/trace/events/xdp.h
+include/trace/syscall.h
+include/uapi/asm-generic/bitsperlong.h
+include/uapi/asm-generic/bpf_perf_event.h
+include/uapi/asm-generic/errno-base.h
+include/uapi/asm-generic/errno.h
+include/uapi/asm-generic/fcntl.h
+include/uapi/asm-generic/hugetlb_encode.h
+include/uapi/asm-generic/int-ll64.h
+include/uapi/asm-generic/ioctl.h
+include/uapi/asm-generic/ioctls.h
+include/uapi/asm-generic/ipcbuf.h
+include/uapi/asm-generic/mman-common.h
+include/uapi/asm-generic/mman.h
+include/uapi/asm-generic/param.h
+include/uapi/asm-generic/poll.h
+include/uapi/asm-generic/posix_types.h
+include/uapi/asm-generic/resource.h
+include/uapi/asm-generic/shmbuf.h
+include/uapi/asm-generic/siginfo.h
+include/uapi/asm-generic/signal-defs.h
+include/uapi/asm-generic/socket.h
+include/uapi/asm-generic/sockios.h
+include/uapi/asm-generic/termbits.h
+include/uapi/asm-generic/termios.h
+include/uapi/asm-generic/types.h
+include/uapi/linux/aio_abi.h
+include/uapi/linux/apm_bios.h
+include/uapi/linux/audit.h
+include/uapi/linux/auxvec.h
+include/uapi/linux/binfmts.h
+include/uapi/linux/blkzoned.h
+include/uapi/linux/bpf.h
+include/uapi/linux/bpf_common.h
+include/uapi/linux/bpf_perf_event.h
+include/uapi/linux/bsg.h
+include/uapi/linux/btf.h
+include/uapi/linux/byteorder/little_endian.h
+include/uapi/linux/capability.h
+include/uapi/linux/cgroupstats.h
+include/uapi/linux/const.h
+include/uapi/linux/cryptouser.h
+include/uapi/linux/devlink.h
+include/uapi/linux/dqblk_xfs.h
+include/uapi/linux/edd.h
+include/uapi/linux/elf-em.h
+include/uapi/linux/elf.h
+include/uapi/linux/errno.h
+include/uapi/linux/errqueue.h
+include/uapi/linux/ethtool.h
+include/uapi/linux/ethtool_netlink.h
+include/uapi/linux/eventpoll.h
+include/uapi/linux/fcntl.h
+include/uapi/linux/fib_rules.h
+include/uapi/linux/filter.h
+include/uapi/linux/fs.h
+include/uapi/linux/gen_stats.h
+include/uapi/linux/genetlink.h
+include/uapi/linux/hash_info.h
+include/uapi/linux/hdlc/ioctl.h
+include/uapi/linux/icmpv6.h
+include/uapi/linux/if.h
+include/uapi/linux/if_addr.h
+include/uapi/linux/if_arp.h
+include/uapi/linux/if_bonding.h
+include/uapi/linux/if_bridge.h
+include/uapi/linux/if_ether.h
+include/uapi/linux/if_link.h
+include/uapi/linux/if_packet.h
+include/uapi/linux/if_tun.h
+include/uapi/linux/if_tunnel.h
+include/uapi/linux/if_vlan.h
+include/uapi/linux/if_xdp.h
+include/uapi/linux/in.h
+include/uapi/linux/in6.h
+include/uapi/linux/in_route.h
+include/uapi/linux/ioctl.h
+include/uapi/linux/ip.h
+include/uapi/linux/ipc.h
+include/uapi/linux/ipsec.h
+include/uapi/linux/ipv6.h
+include/uapi/linux/ipv6_route.h
+include/uapi/linux/irqnr.h
+include/uapi/linux/kcov.h
+include/uapi/linux/kd.h
+include/uapi/linux/kdev_t.h
+include/uapi/linux/kernel.h
+include/uapi/linux/kexec.h
+include/uapi/linux/kvm_para.h
+include/uapi/linux/libc-compat.h
+include/uapi/linux/limits.h
+include/uapi/linux/lwtunnel.h
+include/uapi/linux/magic.h
+include/uapi/linux/major.h
+include/uapi/linux/mdio.h
+include/uapi/linux/membarrier.h
+include/uapi/linux/mempolicy.h
+include/uapi/linux/mii.h
+include/uapi/linux/mman.h
+include/uapi/linux/mpls.h
+include/uapi/linux/neighbour.h
+include/uapi/linux/net.h
+include/uapi/linux/net_namespace.h
+include/uapi/linux/net_tstamp.h
+include/uapi/linux/netdevice.h
+include/uapi/linux/netfilter.h
+include/uapi/linux/netfilter/nf_tables.h
+include/uapi/linux/netlink.h
+include/uapi/linux/nl80211.h
+include/uapi/linux/openat2.h
+include/uapi/linux/param.h
+include/uapi/linux/pci.h
+include/uapi/linux/pci_regs.h
+include/uapi/linux/perf_event.h
+include/uapi/linux/personality.h
+include/uapi/linux/pfkeyv2.h
+include/uapi/linux/pkt_cls.h
+include/uapi/linux/pkt_sched.h
+include/uapi/linux/poll.h
+include/uapi/linux/posix_types.h
+include/uapi/linux/pps.h
+include/uapi/linux/ptp_clock.h
+include/uapi/linux/ptrace.h
+include/uapi/linux/quota.h
+include/uapi/linux/random.h
+include/uapi/linux/reboot.h
+include/uapi/linux/resource.h
+include/uapi/linux/rfkill.h
+include/uapi/linux/route.h
+include/uapi/linux/rseq.h
+include/uapi/linux/rtc.h
+include/uapi/linux/rtnetlink.h
+include/uapi/linux/sched.h
+include/uapi/linux/sched/types.h
+include/uapi/linux/screen_info.h
+include/uapi/linux/sctp.h
+include/uapi/linux/seccomp.h
+include/uapi/linux/securebits.h
+include/uapi/linux/sem.h
+include/uapi/linux/shm.h
+include/uapi/linux/signal.h
+include/uapi/linux/snmp.h
+include/uapi/linux/sock_diag.h
+include/uapi/linux/socket.h
+include/uapi/linux/sockios.h
+include/uapi/linux/stat.h
+include/uapi/linux/stddef.h
+include/uapi/linux/string.h
+include/uapi/linux/swab.h
+include/uapi/linux/sysctl.h
+include/uapi/linux/sysinfo.h
+include/uapi/linux/taskstats.h
+include/uapi/linux/tcp.h
+include/uapi/linux/termios.h
+include/uapi/linux/thermal.h
+include/uapi/linux/time.h
+include/uapi/linux/time_types.h
+include/uapi/linux/timex.h
+include/uapi/linux/tty.h
+include/uapi/linux/tty_flags.h
+include/uapi/linux/types.h
+include/uapi/linux/udp.h
+include/uapi/linux/uio.h
+include/uapi/linux/uleds.h
+include/uapi/linux/un.h
+include/uapi/linux/unistd.h
+include/uapi/linux/utsname.h
+include/uapi/linux/uuid.h
+include/uapi/linux/virtio_config.h
+include/uapi/linux/virtio_ids.h
+include/uapi/linux/virtio_net.h
+include/uapi/linux/virtio_types.h
+include/uapi/linux/vmcore.h
+include/uapi/linux/vt.h
+include/uapi/linux/wait.h
+include/uapi/linux/wireless.h
+include/uapi/linux/xattr.h
+include/uapi/linux/xfrm.h
+include/uapi/video/edid.h
+include/vdso/bits.h
+include/vdso/clocksource.h
+include/vdso/const.h
+include/vdso/jiffies.h
+include/vdso/ktime.h
+include/vdso/limits.h
+include/vdso/math64.h
+include/vdso/time.h
+include/vdso/time32.h
+include/vdso/time64.h
+include/video/edid.h
+include/video/vga.h
+kernel/irq/debug.h
+kernel/irq/internals.h
+kernel/irq/settings.h
+kernel/locking/lock_events.h
+kernel/locking/lock_events_list.h
+kernel/locking/mutex.h
+kernel/sched/autogroup.h
+kernel/sched/cpudeadline.h
+kernel/sched/cpupri.h
+kernel/sched/features.h
+kernel/sched/sched.h
+kernel/sched/stats.h
+kernel/smpboot.h
+kernel/time/ntp_internal.h
+kernel/time/tick-internal.h
+kernel/time/tick-sched.h
+kernel/time/timekeeping.h
+kernel/time/timekeeping_internal.h
+kernel/workqueue_internal.h
+lib/crc32defs.h
+lib/kstrtox.h
+mm/internal.h
+mm/slab.h
+net/core/datagram.h
+net/core/net-sysfs.h
+net/ethtool/common.h
+net/mac80211/aead_api.h
+net/mac80211/aes_ccm.h
+net/mac80211/aes_cmac.h
+net/mac80211/aes_gcm.h
+net/mac80211/aes_gmac.h
+net/mac80211/debug.h
+net/mac80211/debugfs.h
+net/mac80211/debugfs_key.h
+net/mac80211/debugfs_netdev.h
+net/mac80211/debugfs_sta.h
+net/mac80211/driver-ops.h
+net/mac80211/fils_aead.h
+net/mac80211/ieee80211_i.h
+net/mac80211/key.h
+net/mac80211/led.h
+net/mac80211/mesh.h
+net/mac80211/michael.h
+net/mac80211/rate.h
+net/mac80211/rc80211_minstrel_ht.h
+net/mac80211/sta_info.h
+net/mac80211/tkip.h
+net/mac80211/trace.h
+net/mac80211/trace_msg.h
+net/mac80211/wep.h
+net/mac80211/wme.h
+net/mac80211/wpa.h
+net/netlink/af_netlink.h
+net/packet/internal.h
+net/rfkill/rfkill.h
+net/wireless/core.h
+net/wireless/debugfs.h
+net/wireless/nl80211.h
+net/wireless/rdev-ops.h
+net/wireless/reg.h
+net/wireless/sysfs.h
+net/wireless/trace.h
+net/wireless/wext-compat.h
diff -ruN pc/src/lib/wifi/spec/x86_64/source.list world/src/lib/wifi_ath9k/spec/x86_64/source.list
--- pc/src/lib/wifi/spec/x86_64/source.list	2023-01-15 14:04:13.681040314 +0000
+++ world/src/lib/wifi_ath9k/spec/x86_64/source.list	2023-01-15 13:49:43.963974138 +0000
@@ -1,5 +1,89 @@
-arch/x86/lib/hweight.S
-certs/common.c
+net/core/datagram.c
+net/core/dev.c
+net/core/dev_addr_lists.c
+net/core/dev_ioctl.c
+net/core/link_watch.c
+net/core/net-sysfs.c
+net/core/net_namespace.c
+net/core/rtnetlink.c
+net/core/skbuff.c
+net/core/sock.c
+net/core/xdp.c
+
+net/ethernet/eth.c
+
+net/ethtool/common.c
+
+net/mac80211/aead_api.c
+net/mac80211/aes_cmac.c
+net/mac80211/aes_gmac.c
+net/mac80211/agg-rx.c
+net/mac80211/agg-tx.c
+net/mac80211/airtime.c
+net/mac80211/cfg.c
+net/mac80211/chan.c
+net/mac80211/driver-ops.c
+net/mac80211/ethtool.c
+net/mac80211/fils_aead.c
+net/mac80211/he.c
+net/mac80211/ht.c
+net/mac80211/ibss.c
+net/mac80211/iface.c
+net/mac80211/key.c
+net/mac80211/main.c
+net/mac80211/michael.c
+net/mac80211/mlme.c
+net/mac80211/ocb.c
+net/mac80211/offchannel.c
+net/mac80211/rate.c
+net/mac80211/rc80211_minstrel_ht.c
+net/mac80211/rx.c
+net/mac80211/s1g.c
+net/mac80211/scan.c
+net/mac80211/spectmgmt.c
+net/mac80211/sta_info.c
+net/mac80211/status.c
+net/mac80211/tdls.c
+net/mac80211/tkip.c
+net/mac80211/trace.c
+net/mac80211/tx.c
+net/mac80211/util.c
+net/mac80211/vht.c
+net/mac80211/wep.c
+net/mac80211/wme.c
+net/mac80211/wpa.c
+
+net/wireless/ap.c
+net/wireless/chan.c
+net/wireless/core.c
+net/wireless/ethtool.c
+net/wireless/ibss.c
+net/wireless/mesh.c
+net/wireless/mlme.c
+net/wireless/nl80211.c
+net/wireless/ocb.c
+net/wireless/pmsr.c
+net/wireless/radiotap.c
+net/wireless/reg.c
+net/wireless/scan.c
+net/wireless/sme.c
+net/wireless/sysfs.c
+net/wireless/trace.c
+net/wireless/util.c
+
+net/netlink/af_netlink.c
+net/netlink/genetlink.c
+net/netlink/policy.c
+
+net/packet/af_packet.c
+
+net/rfkill/core.c
+
+net/socket.c
+
+net/sched/sch_generic.c
+net/sched/sch_mq.c
+
 crypto/acompress.c
 crypto/aead.c
 crypto/aes_generic.c
@@ -29,159 +113,62 @@
 crypto/shash.c
 crypto/skcipher.c
 crypto/testmgr.c
-drivers/base/bus.c
-drivers/base/class.c
-drivers/base/component.c
-drivers/base/core.c
-drivers/base/dd.c
-drivers/base/devres.c
-drivers/base/driver.c
-drivers/base/platform.c
-drivers/base/property.c
-drivers/clk/clk-devres.c
-drivers/net/Space.c
-drivers/net/loopback.c
-drivers/net/wireless/ath/dfs_pattern_detector.c
-drivers/net/wireless/ath/dfs_pri_detector.c
+
+lib/siphash.c
+lib/crc32.c
+lib/crypto/aes.c
+lib/nlattr.c
+lib/dynamic_queue_limits.c
+
+drivers/leds/led-core.c
+drivers/leds/led-class.c
+drivers/net/wireless/ath/ath9k/htc_drv_init.c
+drivers/net/wireless/ath/ath9k/hif_usb.c
+drivers/net/wireless/ath/ath9k/htc_drv_gpio.c
+drivers/net/wireless/ath/ath9k/htc_drv_beacon.c
+drivers/net/wireless/ath/ath9k/htc_hst.c
+drivers/net/wireless/ath/ath9k/common-init.c
+drivers/net/wireless/ath/ath9k/wmi.c
+drivers/net/wireless/ath/ath9k/common.c
+drivers/net/wireless/ath/ath9k/htc_drv_main.c
+drivers/net/wireless/ath/ath9k/htc_drv_txrx.c
+drivers/net/wireless/ath/ath9k/common-beacon.c
+drivers/net/wireless/ath/ath9k/ani.c
+drivers/net/wireless/ath/ath9k/hw.c
+drivers/net/wireless/ath/ath9k/mac.c
+drivers/net/wireless/ath/ath9k/eeprom.c
+drivers/net/wireless/ath/ath9k/calib.c
 drivers/net/wireless/ath/hw.c
-drivers/net/wireless/ath/key.c
 drivers/net/wireless/ath/main.c
+drivers/net/wireless/ath/ath9k/ar9003_mac.c
+drivers/net/wireless/ath/ath9k/ar9002_hw.c
+drivers/net/wireless/ath/ath9k/ar9003_hw.c
+drivers/net/wireless/ath/key.c
 drivers/net/wireless/ath/regd.c
-drivers/net/wireless/ath/ath9k/ani.c
-drivers/net/wireless/ath/ath9k/antenna.c
 drivers/net/wireless/ath/ath9k/ar5008_phy.c
-drivers/net/wireless/ath/ath9k/ar9002_calib.c
-drivers/net/wireless/ath/ath9k/ar9002_hw.c
-drivers/net/wireless/ath/ath9k/ar9002_mac.c
 drivers/net/wireless/ath/ath9k/ar9002_phy.c
-drivers/net/wireless/ath/ath9k/ar9003_aic.c
-drivers/net/wireless/ath/ath9k/ar9003_calib.c
-drivers/net/wireless/ath/ath9k/ar9003_eeprom.c
-drivers/net/wireless/ath/ath9k/ar9003_hw.c
-drivers/net/wireless/ath/ath9k/ar9003_mac.c
-drivers/net/wireless/ath/ath9k/ar9003_mci.c
-drivers/net/wireless/ath/ath9k/ar9003_paprd.c
 drivers/net/wireless/ath/ath9k/ar9003_phy.c
-drivers/net/wireless/ath/ath9k/ar9003_rtt.c
-drivers/net/wireless/ath/ath9k/beacon.c
-drivers/net/wireless/ath/ath9k/btcoex.c
-drivers/net/wireless/ath/ath9k/calib.c
-drivers/net/wireless/ath/ath9k/channel.c
-drivers/net/wireless/ath/ath9k/common-beacon.c
-drivers/net/wireless/ath/ath9k/common-init.c
-drivers/net/wireless/ath/ath9k/common.c
-drivers/net/wireless/ath/ath9k/eeprom.c
+drivers/net/wireless/ath/ath9k/ar9003_calib.c
+drivers/net/wireless/ath/ath9k/ar9002_mac.c
+drivers/net/wireless/ath/ath9k/ar9002_calib.c
 drivers/net/wireless/ath/ath9k/eeprom_4k.c
 drivers/net/wireless/ath/ath9k/eeprom_9287.c
+drivers/net/wireless/ath/ath9k/ar9003_eeprom.c
 drivers/net/wireless/ath/ath9k/eeprom_def.c
-drivers/net/wireless/ath/ath9k/gpio.c
-drivers/net/wireless/ath/ath9k/hw.c
-drivers/net/wireless/ath/ath9k/init.c
-drivers/net/wireless/ath/ath9k/link.c
-drivers/net/wireless/ath/ath9k/mac.c
-drivers/net/wireless/ath/ath9k/main.c
-drivers/net/wireless/ath/ath9k/mci.c
-drivers/net/wireless/ath/ath9k/pci.c
-drivers/net/wireless/ath/ath9k/recv.c
-drivers/net/wireless/ath/ath9k/wmi.c
-drivers/net/wireless/ath/ath9k/xmit.c
-drivers/net/wireless/intel/iwlwifi/cfg/1000.c
-drivers/net/wireless/intel/iwlwifi/cfg/2000.c
-drivers/net/wireless/intel/iwlwifi/cfg/22000.c
-drivers/net/wireless/intel/iwlwifi/cfg/5000.c
-drivers/net/wireless/intel/iwlwifi/cfg/6000.c
-drivers/net/wireless/intel/iwlwifi/cfg/7000.c
-drivers/net/wireless/intel/iwlwifi/cfg/8000.c
-drivers/net/wireless/intel/iwlwifi/cfg/9000.c
-drivers/net/wireless/intel/iwlwifi/dvm/calib.c
-drivers/net/wireless/intel/iwlwifi/dvm/devices.c
-drivers/net/wireless/intel/iwlwifi/dvm/lib.c
-drivers/net/wireless/intel/iwlwifi/dvm/mac80211.c
-drivers/net/wireless/intel/iwlwifi/dvm/main.c
-drivers/net/wireless/intel/iwlwifi/dvm/power.c
-drivers/net/wireless/intel/iwlwifi/dvm/rs.c
-drivers/net/wireless/intel/iwlwifi/dvm/rx.c
-drivers/net/wireless/intel/iwlwifi/dvm/rxon.c
-drivers/net/wireless/intel/iwlwifi/dvm/scan.c
-drivers/net/wireless/intel/iwlwifi/dvm/sta.c
-drivers/net/wireless/intel/iwlwifi/dvm/tt.c
-drivers/net/wireless/intel/iwlwifi/dvm/tx.c
-drivers/net/wireless/intel/iwlwifi/dvm/ucode.c
-drivers/net/wireless/intel/iwlwifi/fw/acpi.c
-drivers/net/wireless/intel/iwlwifi/fw/dbg.c
-drivers/net/wireless/intel/iwlwifi/fw/dump.c
-drivers/net/wireless/intel/iwlwifi/fw/img.c
-drivers/net/wireless/intel/iwlwifi/fw/init.c
-drivers/net/wireless/intel/iwlwifi/fw/notif-wait.c
-drivers/net/wireless/intel/iwlwifi/fw/paging.c
-drivers/net/wireless/intel/iwlwifi/fw/pnvm.c
-drivers/net/wireless/intel/iwlwifi/fw/smem.c
-drivers/net/wireless/intel/iwlwifi/iwl-dbg-tlv.c
-drivers/net/wireless/intel/iwlwifi/iwl-debug.c
-drivers/net/wireless/intel/iwlwifi/iwl-drv.c
-drivers/net/wireless/intel/iwlwifi/iwl-eeprom-parse.c
-drivers/net/wireless/intel/iwlwifi/iwl-eeprom-read.c
-drivers/net/wireless/intel/iwlwifi/iwl-io.c
-drivers/net/wireless/intel/iwlwifi/iwl-nvm-parse.c
-drivers/net/wireless/intel/iwlwifi/iwl-phy-db.c
-drivers/net/wireless/intel/iwlwifi/iwl-trans.c
-drivers/net/wireless/intel/iwlwifi/mvm/binding.c
-drivers/net/wireless/intel/iwlwifi/mvm/coex.c
-drivers/net/wireless/intel/iwlwifi/mvm/ftm-initiator.c
-drivers/net/wireless/intel/iwlwifi/mvm/ftm-responder.c
-drivers/net/wireless/intel/iwlwifi/mvm/fw.c
-drivers/net/wireless/intel/iwlwifi/mvm/mac-ctxt.c
-drivers/net/wireless/intel/iwlwifi/mvm/mac80211.c
-drivers/net/wireless/intel/iwlwifi/mvm/nvm.c
-drivers/net/wireless/intel/iwlwifi/mvm/offloading.c
-drivers/net/wireless/intel/iwlwifi/mvm/ops.c
-drivers/net/wireless/intel/iwlwifi/mvm/phy-ctxt.c
-drivers/net/wireless/intel/iwlwifi/mvm/power.c
-drivers/net/wireless/intel/iwlwifi/mvm/quota.c
-drivers/net/wireless/intel/iwlwifi/mvm/rfi.c
-drivers/net/wireless/intel/iwlwifi/mvm/rs-fw.c
-drivers/net/wireless/intel/iwlwifi/mvm/rs.c
-drivers/net/wireless/intel/iwlwifi/mvm/rx.c
-drivers/net/wireless/intel/iwlwifi/mvm/rxmq.c
-drivers/net/wireless/intel/iwlwifi/mvm/scan.c
-drivers/net/wireless/intel/iwlwifi/mvm/sf.c
-drivers/net/wireless/intel/iwlwifi/mvm/sta.c
-drivers/net/wireless/intel/iwlwifi/mvm/tdls.c
-drivers/net/wireless/intel/iwlwifi/mvm/time-event.c
-drivers/net/wireless/intel/iwlwifi/mvm/tt.c
-drivers/net/wireless/intel/iwlwifi/mvm/tx.c
-drivers/net/wireless/intel/iwlwifi/mvm/utils.c
-drivers/net/wireless/intel/iwlwifi/pcie/ctxt-info-gen3.c
-drivers/net/wireless/intel/iwlwifi/pcie/ctxt-info.c
-drivers/net/wireless/intel/iwlwifi/pcie/drv.c
-drivers/net/wireless/intel/iwlwifi/pcie/rx.c
-drivers/net/wireless/intel/iwlwifi/pcie/trans-gen2.c
-drivers/net/wireless/intel/iwlwifi/pcie/trans.c
-drivers/net/wireless/intel/iwlwifi/pcie/tx-gen2.c
-drivers/net/wireless/intel/iwlwifi/pcie/tx.c
-drivers/net/wireless/intel/iwlwifi/queue/tx.c
-drivers/net/wireless/realtek/rtlwifi/base.c
-drivers/net/wireless/realtek/rtlwifi/cam.c
-drivers/net/wireless/realtek/rtlwifi/core.c
-drivers/net/wireless/realtek/rtlwifi/debug.c
-drivers/net/wireless/realtek/rtlwifi/efuse.c
-drivers/net/wireless/realtek/rtlwifi/pci.c
-drivers/net/wireless/realtek/rtlwifi/ps.c
-drivers/net/wireless/realtek/rtlwifi/rc.c
-drivers/net/wireless/realtek/rtlwifi/regd.c
-drivers/net/wireless/realtek/rtlwifi/rtl8188ee/dm.c
-drivers/net/wireless/realtek/rtlwifi/rtl8188ee/fw.c
-drivers/net/wireless/realtek/rtlwifi/rtl8188ee/hw.c
-drivers/net/wireless/realtek/rtlwifi/rtl8188ee/led.c
-drivers/net/wireless/realtek/rtlwifi/rtl8188ee/phy.c
-drivers/net/wireless/realtek/rtlwifi/rtl8188ee/pwrseq.c
-drivers/net/wireless/realtek/rtlwifi/rtl8188ee/rf.c
-drivers/net/wireless/realtek/rtlwifi/rtl8188ee/sw.c
-drivers/net/wireless/realtek/rtlwifi/rtl8188ee/table.c
-drivers/net/wireless/realtek/rtlwifi/rtl8188ee/trx.c
-drivers/net/wireless/realtek/rtlwifi/stats.c
+drivers/net/wireless/ath/ath9k/ar9003_paprd.c
+
 drivers/pci/pci-driver.c
-fs/nls/nls_base.c
+
+drivers/base/bus.c
+drivers/base/class.c
+drivers/base/component.c
+drivers/base/core.c
+drivers/base/dd.c
+drivers/base/devres.c
+drivers/base/driver.c
+drivers/base/platform.c
+drivers/base/property.c
+
 kernel/irq/chip.c
 kernel/irq/devres.c
 kernel/irq/handle.c
@@ -189,20 +176,13 @@
 kernel/irq/irqdomain.c
 kernel/irq/manage.c
 kernel/irq/resend.c
-kernel/kthread.c
 kernel/locking/mutex.c
-kernel/locking/osq_lock.c
 kernel/locking/rwsem.c
-kernel/notifier.c
-kernel/panic.c
-kernel/resource.c
 kernel/sched/clock.c
 kernel/sched/completion.c
 kernel/sched/swait.c
 kernel/sched/wait.c
 kernel/sched/wait_bit.c
-kernel/smpboot.c
-kernel/softirq.c
 kernel/time/clockevents.c
 kernel/time/clocksource.c
 kernel/time/hrtimer.c
@@ -212,117 +192,35 @@
 kernel/time/tick-common.c
 kernel/time/tick-oneshot.c
 kernel/time/tick-sched.c
-kernel/time/time.c
 kernel/time/timeconv.c
 kernel/time/timecounter.c
 kernel/time/timekeeping.c
-kernel/time/timer.c
+kernel/time/time.c
 kernel/time/timer_list.c
+kernel/time/timer.c
+kernel/kthread.c
+kernel/notifier.c
 kernel/workqueue.c
-lib/asn1_decoder.c
 lib/bitmap.c
-lib/bsearch.c
-lib/crc32.c
-lib/crypto/aes.c
 lib/ctype.c
 lib/debug_locks.c
-lib/dynamic_queue_limits.c
 lib/find_bit.c
 lib/hexdump.c
 lib/idr.c
-lib/iomap.c
 lib/irq_regs.c
 lib/kasprintf.c
 lib/klist.c
 lib/kobject.c
-lib/kstrtox.c
 lib/list_sort.c
-lib/nlattr.c
 lib/radix-tree.c
 lib/rbtree.c
-lib/refcount.c
-lib/rhashtable.c
 lib/scatterlist.c
-lib/siphash.c
 lib/sort.c
 lib/string.c
+lib/kstrtox.c
 lib/timerqueue.c
 lib/vsprintf.c
 lib/xarray.c
-mm/mempool.c
+lib/rhashtable.c
 mm/util.c
-net/core/datagram.c
-net/core/dev.c
-net/core/dev_addr_lists.c
-net/core/link_watch.c
-net/core/net-sysfs.c
-net/core/net_namespace.c
-net/core/rtnetlink.c
-net/core/skbuff.c
-net/core/sock.c
-net/core/xdp.c
-net/ethernet/eth.c
-net/ethtool/common.c
-net/mac80211/aead_api.c
-net/mac80211/aes_cmac.c
-net/mac80211/aes_gmac.c
-net/mac80211/agg-rx.c
-net/mac80211/agg-tx.c
-net/mac80211/airtime.c
-net/mac80211/cfg.c
-net/mac80211/chan.c
-net/mac80211/driver-ops.c
-net/mac80211/ethtool.c
-net/mac80211/fils_aead.c
-net/mac80211/he.c
-net/mac80211/ht.c
-net/mac80211/ibss.c
-net/mac80211/iface.c
-net/mac80211/key.c
-net/mac80211/main.c
-net/mac80211/michael.c
-net/mac80211/mlme.c
-net/mac80211/ocb.c
-net/mac80211/offchannel.c
-net/mac80211/rate.c
-net/mac80211/rc80211_minstrel_ht.c
-net/mac80211/rx.c
-net/mac80211/s1g.c
-net/mac80211/scan.c
-net/mac80211/spectmgmt.c
-net/mac80211/sta_info.c
-net/mac80211/status.c
-net/mac80211/tdls.c
-net/mac80211/tkip.c
-net/mac80211/trace.c
-net/mac80211/tx.c
-net/mac80211/util.c
-net/mac80211/vht.c
-net/mac80211/wep.c
-net/mac80211/wme.c
-net/mac80211/wpa.c
-net/netlink/af_netlink.c
-net/netlink/genetlink.c
-net/netlink/policy.c
-net/packet/af_packet.c
-net/rfkill/core.c
-net/sched/sch_generic.c
-net/sched/sch_mq.c
-net/socket.c
-net/wireless/ap.c
-net/wireless/chan.c
-net/wireless/core.c
-net/wireless/ethtool.c
-net/wireless/ibss.c
-net/wireless/mesh.c
-net/wireless/mlme.c
-net/wireless/nl80211.c
-net/wireless/ocb.c
-net/wireless/pmsr.c
-net/wireless/radiotap.c
-net/wireless/reg.c
-net/wireless/scan.c
-net/wireless/sme.c
-net/wireless/sysfs.c
-net/wireless/trace.c
-net/wireless/util.c
+arch/x86/lib/hweight.S
diff -ruN pc/src/lib/wifi/symbol.map world/src/lib/wifi_ath9k/symbol.map
--- pc/src/lib/wifi/symbol.map	2022-04-27 10:23:44.726844160 +0000
+++ world/src/lib/wifi_ath9k/symbol.map	2023-01-15 13:49:43.963974138 +0000
@@ -12,7 +12,9 @@
 		socket_call;
 		/* rfkill interface */
 		_*wifi_*_rfkill*;
+		/* kick socket_call and uplink wakeup */
 		_*wifi_kick_*;
+		_*uplink_task_wakeup_*;
 
 		/* interface for libnl/wpa_driver_nl82011 */
 		wifi_if*;
diff -ruN pc/src/lib/wifi/time.cc world/src/lib/wifi_ath9k/time.cc
--- pc/src/lib/wifi/time.cc	2022-04-27 10:23:44.726844160 +0000
+++ world/src/lib/wifi_ath9k/time.cc	2023-01-15 13:49:43.963974138 +0000
@@ -17,8 +17,8 @@
 extern "C" void lx_emul_time_udelay(unsigned long usec);
 extern "C" void lx_emul_time_udelay(unsigned long usec)
 {
-	if (usec > 100)
-		Genode::error("Cannot delay that long ", usec, " microseconds");
+	if (usec > 1000)
+		Genode::warning("Should not delay for such a long time as ", usec, " microseconds");
 
 	unsigned long long start = Lx_kit::env().timer.curr_time().trunc_to_plain_us().value;
 	while (Lx_kit::env().timer.curr_time().trunc_to_plain_us().value < (start + usec)) { ; }
diff -ruN pc/src/lib/wifi/uplink.c world/src/lib/wifi_ath9k/uplink.c
--- pc/src/lib/wifi/uplink.c	2022-10-14 17:51:34.308692259 +0000
+++ world/src/lib/wifi_ath9k/uplink.c	2023-01-15 13:49:43.963974138 +0000
@@ -235,6 +235,8 @@
 	events.nb.notifier_call = uplink_netdev_event;
 	events.registered       = false;
 
+	register_netdevice_notifier(&events.nb);
+
 	for (;;) {
 
 		struct net_device *dev;
@@ -253,12 +255,14 @@
 				netdev_rx_handler_register(dev, handle_rx, NULL);
 
 			/* register notifier once */
+			#if 0
 			if (!events.registered) {
 				events.registered =
 					!register_netdevice_notifier_dev_net(dev,
 					                                     &events.nb,
 					                                     &events.nn);
 			}
+			#endif /* 0 */
 
 			/* respond to cable plug/unplug */
 			handle_create_uplink(dev);
diff -ruN pc/src/lib/wifi/wlan.cc world/src/lib/wifi_ath9k/wlan.cc
--- pc/src/lib/wifi/wlan.cc	2022-10-14 17:51:34.308692259 +0000
+++ world/src/lib/wifi_ath9k/wlan.cc	2023-01-15 13:49:43.963974138 +0000
@@ -27,6 +27,7 @@
 
 /* local includes */
 #include "lx_user.h"
+#include "wlan_usb.h"
 
 using namespace Genode;
 
@@ -76,16 +77,10 @@
 }
 
 
-extern "C" unsigned int wifi_ifindex(void)
-{
-	/* TODO replace with actual qyery */
-	return 2;
-}
-
-
 extern "C" char const *wifi_ifname(void)
 {
 	/* TODO replace with actual qyery */
+	/* But is it necessary? Will there every be more than one? */
 	return "wlan0";
 }
 
@@ -94,6 +89,7 @@
 	Env                    &_env;
 	Io_signal_handler<Wlan> _signal_handler { _env.ep(), *this,
 	                                          &Wlan::_handle_signal };
+	Wlan_usb _usb_extensions { _env };
 
 	void _handle_signal()
 	{
diff -ruN pc/src/lib/wifi/wlan_usb.cc world/src/lib/wifi_ath9k/wlan_usb.cc
--- pc/src/lib/wifi/wlan_usb.cc	1970-01-01 00:00:00.000000000 +0000
+++ world/src/lib/wifi_ath9k/wlan_usb.cc	2023-01-15 13:49:43.963974138 +0000
@@ -0,0 +1,391 @@
+/**
+* \brief  WLAN structure USB extensions
+* \author Colin Parker
+* \date   2022-06-04
+*/
+
+/*
+* Copyright (C) 2022 Colin Parker
+*
+* This file is distributed under the terms of the GNU General Public License
+* version 2.
+*/
+
+#include <lx_emul/task.h>
+
+#include "wlan_usb.h"
+
+extern "C" void   lx_usb_do_urb_callback(void * urb, int suceeded, int inbound,
+                                         void * buffer, int buf_size);
+extern "C" int    lx_usb_handle_connect(Genode::uint16_t vend_id,
+                                        Genode::uint16_t prod_id,
+                                        void * if_desc, void * cfg_desc,
+                                        void * ep_array, void * context_ptr);
+extern "C" void   lx_usb_handle_disconnect();										
+extern "C" void * lx_usb_host_to_epdesc(void * in_host);
+extern "C" void   lx_usb_setup_urb(void * urb, void * ep);
+
+void Genode::Wlan_usb::handle_state_change()
+{
+	static void * lx_ep_buffer = nullptr;
+	static size_t lx_ep_buffer_size = 0;
+	static bool inited = false;
+	int num_ep = 0;
+	
+	if (!inited) {
+		lx_usb_wrap.init();
+		inited = true;
+	}
+
+	if (!usb.plugged()) {
+		log("Device unplugged");
+	}
+	else {
+		log("Device plugged");
+		device.update_config();
+
+		Usb::Interface &iface = device.interface(0);
+
+		try { iface.claim(); }
+		catch (Usb::Session::Interface_already_claimed) {
+			error("Device already claimed");
+			return;
+		} catch (Usb::Session::Interface_not_found) {
+			error("Interface not found");
+			return;
+		}
+
+		num_ep = iface.current().num_endpoints;
+		if ( lx_ep_buffer_size != num_ep*lx_usb_wrap.endpoint_desc_size()) {
+			if ( lx_ep_buffer_size > 0) {
+				warning("Number of endpoints changed between connection!");
+				heap.free(lx_ep_buffer, lx_ep_buffer_size);
+			}
+			
+			lx_ep_buffer_size = num_ep*lx_usb_wrap.endpoint_desc_size();
+
+			try { lx_ep_buffer = heap.alloc(lx_ep_buffer_size); }
+			catch (Genode::Out_of_caps) {
+				error("Failed to allocate buffer for linux endpoint data"
+				" (out of caps).");
+				return;
+			}
+			catch (Genode::Out_of_ram) {
+				error("Failed to allocate buffer for linux endpoint data"
+				      " (out of ram).");
+				return;
+			}
+			catch (Ram_allocator::Denied) {
+				error("Failed to allocate buffer for linux endpoint data"
+				      " (denied).");
+				return;
+			}
+		}
+	}
+	int handle_result = lx_usb_wrap.handle_connect(lx_ep_buffer, num_ep,
+	                                               usb.plugged());
+
+	log("Result of handle_connect: ", handle_result);
+}
+
+bool Usb::Lx_wrapper::add_packet_with_urb(Packet_descriptor & p, void * urb,
+                                          int ep_index )
+{
+	int i;
+
+	for (i = 0; i < PACKET_URB_MAP_SIZE; ++i) {
+		int search = (i + next_packet) % PACKET_URB_MAP_SIZE;
+		if ( packet_map[search].complete == Packet_urb_map::AVAILABLE ) {
+			next_packet = (search + 1) % PACKET_URB_MAP_SIZE;
+			packet_map[search].p = p;
+			packet_map[search].urb = urb;
+			packet_map[search].ep_index = (Genode::uint8_t)ep_index;
+
+			if (ep_index == ep_val_for_intr_in) {
+				/* incoming interrupt must be queued */
+				if ( pending_incoming < max_incoming ) {
+					pending_incoming++;
+					packet_map[search].complete = Packet_urb_map::PENDING;
+					return false;
+				}
+				else {
+					queued_incoming++;
+					packet_map[search].complete = Packet_urb_map::QUEUED;
+					return true;
+				}
+			}
+			else {
+				packet_map[search].complete = Packet_urb_map::PENDING;
+				return false;
+			}
+		}
+	}
+	Genode::error("Attempt to add more packets than queue allows.");
+	throw -1;
+}
+
+bool Usb::Lx_wrapper::mark_packet_complete(Packet_descriptor & p)
+{
+	int i;
+	Usb::Interface & iface = _dev.interface(0);
+	void * packet = iface.content(p);
+
+	for (i = PACKET_URB_MAP_SIZE; i > 0; --i) {
+		int search = (i + next_packet) % PACKET_URB_MAP_SIZE;
+		void * search_packet = iface.content(packet_map[search].p);
+		if ((search_packet == packet) &&
+		    (packet_map[search].complete == Packet_urb_map::PENDING) )
+		{
+			packet_map[search].complete = Packet_urb_map::COMPLETE;
+			packet_map[search].p        = p;
+			return true;
+		}
+	}
+	return false;
+}
+
+void Usb::Lx_wrapper::send_completions()
+{
+	int i;
+	int saved_next_packet;
+
+	/* guard against device being disconnected */
+	if ( !_dev.config ) return; 
+	Usb::Interface & iface = _dev.interface(0);
+
+	do {
+		saved_next_packet = next_packet;
+		for (i = 0; i < PACKET_URB_MAP_SIZE; ++i) {
+			int search = (i + saved_next_packet) % PACKET_URB_MAP_SIZE;
+			if ( packet_map[search].complete == Packet_urb_map::COMPLETE) {
+				void * packet = iface.content(packet_map[search].p);
+				lx_usb_do_urb_callback(packet_map[search].urb,
+									packet_map[search].p.succeded,
+									packet_map[search].p.transfer.ep & 0x80,
+									packet,
+									packet_map[search].p.transfer.actual_size);
+				iface.release(packet_map[search].p);
+				if ( packet_map[search].ep_index == ep_val_for_intr_in ) {
+					pending_incoming--;
+				}
+				packet_map[search].complete = Packet_urb_map::AVAILABLE;
+			}
+			else if ( pending_incoming < max_incoming &&
+						packet_map[search].complete == Packet_urb_map::QUEUED)
+			{
+				packet_map[search].complete = Packet_urb_map::PENDING;
+				queued_incoming--;
+				pending_incoming++;
+				usb_submit_queued_urb(packet_map[search].p,
+				                      packet_map[search].ep_index);
+			}
+		}
+	} while (pending_incoming < max_incoming && queued_incoming > 0);
+}
+
+void Usb::Lx_wrapper::complete(Usb::Packet_descriptor & p)
+{	
+	Usb::Interface &iface = _dev.interface(0);
+
+	void * packet_content = iface.content(p);
+	if ( (packet_content == nullptr) ||
+	     (!mark_packet_complete(p)) ) {
+		if (_ctrl_status == PENDING) {
+			_ctrl_status = COMPLETE;
+			_ctrl_packet = p;
+		}
+		else {
+			Genode::log("No record of packet and no pending control transfer.");
+			Genode::log("Packet error is ", (int)p.error, " and succeded is ",
+			            p.succeded);
+		}
+	}
+	Genode::Signal_transmitter transmit_to_app_handler(app_completion_handler);
+	transmit_to_app_handler.submit();
+}
+
+int Usb::Lx_wrapper::handle_connect(void *endpoint_buffer, int num_ep,
+                                    bool connected)
+{
+	/* assumes that endpoint_buffer is allocated with the right size */
+	if (endpoint_buffer == nullptr)
+	{
+		return true;
+	}
+	else _endpoint_buffer = endpoint_buffer;
+
+	if (!connected) {
+		pending_disconnection = true;
+	}
+	else {
+		for (int i = 0; i < num_ep; ++i)
+		{
+			char *buffer_base = (char *)_endpoint_buffer
+			                    + i*lx_usb_host_endpoint_size();
+
+			auto buffer_desc = (Endpoint_descriptor *) lx_usb_host_to_epdesc(
+				(void *)buffer_base );
+
+			*buffer_desc = _dev.interface(0).current().endpoint(i);
+		}
+
+		pending_connection = true;
+	}
+
+	if(_connect_task) _connect_task->unblock();
+	Lx_kit::env().scheduler.schedule();
+
+	return _return_val;
+}
+
+int Usb::Lx_wrapper::handle_connect_internal()
+{	
+	if ( pending_connection ) {
+		pending_connection = false;
+
+		Interface_descriptor *ath9k_idesc = &_dev.interface(0).current();
+		Config_descriptor *ath9k_cdesc = _dev.config;
+
+		return lx_usb_handle_connect(_dev.device_descr.vendor_id,
+		                             _dev.device_descr.product_id,
+		                             (void *)ath9k_idesc, (void *)ath9k_cdesc,
+		                             _endpoint_buffer, this);
+	}
+	else if (pending_disconnection ) {
+		pending_disconnection = false;
+		lx_usb_handle_disconnect();
+	}
+	return 0;
+}
+
+int Usb::Lx_wrapper::usb_control_msg(unsigned int pipe, Genode::uint8_t request,
+                                     Genode::uint8_t requesttype,
+                                     Genode::uint16_t value,
+                                     Genode::uint16_t index, void * data,
+                                     Genode::uint16_t size, int timeout)
+{
+	(void) pipe; /* Genode doesn't support control transfer to non-default EP? */
+
+	if ( _ctrl_status != NONE ) {
+		Genode::error("Attempt to submit a synchronous control message before"
+		              " the previous one completed.");
+		throw -1;
+	}
+
+	/* Check if device disconnected */
+	if ( !_dev.config ) return -1;
+	Usb::Interface &iface = _dev.interface(0);
+
+	Usb::Packet_descriptor p = iface.alloc(size);
+	Genode::memcpy(iface.content(p), data, size);
+	iface.control_transfer(p, requesttype, request, value, index, timeout,
+	                       false, this);
+	_ctrl_status = PENDING;
+	_ctrl_task = &Lx_kit::env().scheduler.current();
+	while (_ctrl_status == PENDING) {
+		lx_emul_task_schedule(true);
+	}
+	_ctrl_status = NONE;
+
+	if (!_ctrl_packet.succeded) {
+		Genode::error("Error in usb_control_msg.");
+		return -1;
+	}
+	else {
+		return size;
+	}
+}
+
+int Usb::Lx_wrapper::usb_submit_urb(unsigned int pipe, void * buffer,
+                                    Genode::uint32_t buf_size, void * urb)
+{
+	/* check against disconnected device */
+	if ( !_dev.config ) return -1;
+	Usb::Interface &iface = _dev.interface(0);
+	int num_ep = iface.current().num_endpoints;
+	int ep_search;
+	int i;
+
+	for (i = 0; i < num_ep; ++i) {
+		ep_search = (i + pipe - 1) % num_ep;
+		if ((iface.current().endpoint(ep_search).address & 0xF) == pipe) break;
+	}
+	if (i >= num_ep) {
+		Genode::error("Attempt to send on a pipe ( ", pipe,
+		              " ) I couldn't find.");
+		return -1;
+	}
+
+	Endpoint & ep = iface.current().endpoint(ep_search);
+
+	Packet_descriptor p = iface.alloc(buf_size);
+	if ( !(ep.address & 0x80) ) { /* outgoing */
+		Genode::memcpy(iface.content(p), (char *)buffer, buf_size);
+	}
+	lx_usb_setup_urb(urb, &ep);
+
+	if ( add_packet_with_urb(p, urb, ep_search) ) return 0;
+	if (ep.interrupt()) {
+		iface.interrupt_transfer(
+			p, ep, Usb::Packet_descriptor::DEFAULT_POLLING_INTERVAL, false,
+			this );
+		return 0;
+	}
+	else if (ep.bulk()) {
+		iface.bulk_transfer( p, ep, false, this );
+		return 0;
+	}
+	return -1;
+}
+
+void Usb::Lx_wrapper::usb_submit_queued_urb(Packet_descriptor &p, int ep_index)
+{
+	Usb::Interface &iface = _dev.interface(0);
+	Usb::Endpoint &ep = iface.current().endpoint(ep_index);
+	iface.interrupt_transfer(
+		p, ep, Usb::Packet_descriptor::DEFAULT_POLLING_INTERVAL, false, this );
+}
+
+extern "C" int cxx_usb_control_msg(void *context_ptr, unsigned int pipe,
+                                   Genode::uint8_t request,
+                                   Genode::uint8_t requesttype,
+                                   Genode::uint16_t value,
+                                   Genode::uint16_t index, void * data,
+                                   Genode::uint16_t size, int timeout)
+{
+	Usb::Lx_wrapper * lx_wrap = (Usb::Lx_wrapper *)context_ptr;
+	return lx_wrap->usb_control_msg(pipe, request, requesttype, value, index,
+	                                data, size, timeout);
+}
+
+extern "C" int lx_usb_complete_task(void * in_wrap_struct)
+{
+	Usb::Lx_wrapper * cxx_wrap_struct = (Usb::Lx_wrapper *) in_wrap_struct;
+
+	while(true) {
+		cxx_wrap_struct->send_completions();
+		lx_emul_task_schedule(true);
+	}
+	/* never reached */
+	return 0;
+}
+
+extern "C" int lx_usb_connect_task(void * in_wrap_struct)
+{
+	Usb::Lx_wrapper * cxx_wrap_struct = (Usb::Lx_wrapper *) in_wrap_struct;
+
+	while(true) {
+		cxx_wrap_struct->handle_connect_internal();
+		lx_emul_task_schedule(true);
+	}
+	/* never reached */
+	return 0;
+}
+
+extern "C" int cxx_usb_submit_urb(void * context_ptr, unsigned int pipe,
+                                  void * buffer, Genode::uint32_t buf_size,
+                                  void * urb)
+{
+	Usb::Lx_wrapper * lx_wrap = (Usb::Lx_wrapper *)context_ptr;
+	return lx_wrap->usb_submit_urb(pipe, buffer, buf_size, urb);
+}
\ No newline at end of file
diff -ruN pc/src/lib/wifi/wlan_usb.h world/src/lib/wifi_ath9k/wlan_usb.h
--- pc/src/lib/wifi/wlan_usb.h	1970-01-01 00:00:00.000000000 +0000
+++ world/src/lib/wifi_ath9k/wlan_usb.h	2023-01-15 13:49:43.963974138 +0000
@@ -0,0 +1,170 @@
+/**
+* \brief  WLAN structure USB extensions
+* \author Colin Parker
+* \date   2022-06-04
+*/
+
+/*
+* Copyright (C) 2022 Colin Parker
+*
+* This file is distributed under the terms of the GNU General Public License
+* version 2.
+*/
+
+#include <usb/usb.h>
+#include <lx_kit/task.h>
+#include <lx_kit/env.h>
+
+using Genode::size_t;
+
+extern "C" void * lx_emul_usb_comp_struct;
+extern "C" void * lx_emul_usb_conn_struct;
+extern "C" size_t lx_usb_host_endpoint_size(void);
+extern "C" int    lx_usb_complete_task(void * in_wrap_struct);
+extern "C" int    lx_usb_connect_task(void * in_wrap_struct);
+
+namespace Genode {
+	class Wlan_usb;
+}
+
+namespace Usb {
+	class Lx_wrapper;
+}
+
+class Usb::Lx_wrapper : Usb::Completion
+{
+  private:
+	Device & _dev;
+	Genode::Entrypoint & _ep;
+	Lx_kit::Task * _connect_task = nullptr;
+	Lx_kit::Task * _complete_task = nullptr;
+	Lx_kit::Task * _ctrl_task = nullptr;
+
+	Lx_wrapper( Lx_wrapper & ) = delete;
+	Lx_wrapper & operator=( Lx_wrapper & ) = delete;
+
+	void * _endpoint_buffer = nullptr;
+	int    _return_val = 0;
+
+	enum ControlStatus {
+		NONE, PENDING, COMPLETE,
+	};
+
+	ControlStatus _ctrl_status = NONE;
+	Packet_descriptor _ctrl_packet = { };
+
+	enum {
+		PACKET_URB_MAP_SIZE = 256
+	};
+
+	Signal_handler<Lx_wrapper> app_completion_handler =
+		{_ep, *this, &Lx_wrapper::app_handle_complete };
+
+	struct Packet_urb_map
+	{
+		void            * urb;
+		enum : Genode::uint8_t {
+			AVAILABLE,
+			PENDING,
+			COMPLETE,
+			QUEUED
+		}                 complete;
+		Genode::uint8_t   ep_index;
+		Packet_descriptor p;
+	} packet_map[PACKET_URB_MAP_SIZE] = { };
+	int next_packet = 0;
+	static int constexpr max_incoming = 1;
+	static int constexpr ep_val_for_intr_in = 2;
+	int pending_incoming = 0;
+	int queued_incoming = 0;
+	bool pending_connection = false;
+	bool pending_disconnection = false;
+
+	bool add_packet_with_urb(Packet_descriptor & p, void * urb, int ep_index);
+	bool mark_packet_complete(Packet_descriptor & p);
+
+	void app_handle_complete()
+	{
+		if ( _ctrl_status == COMPLETE ) {
+			if(_ctrl_task) _ctrl_task->unblock();
+			_ctrl_task = nullptr;
+		}
+		else if(_complete_task) _complete_task->unblock();
+		Lx_kit::env().scheduler.schedule();
+	}
+
+  public:
+
+	Lx_wrapper(Device & dev, Genode::Entrypoint & ep) : _dev(dev), _ep(ep) { }
+
+	~Lx_wrapper()
+	{
+		destroy(Lx_kit::env().heap, _complete_task);
+		destroy(Lx_kit::env().heap, _connect_task);
+	}
+
+	static int constexpr default_pid = 10;
+	void init()
+	{
+		_complete_task = new (Lx_kit::env().heap)
+			Lx_kit::Task(lx_usb_complete_task, (void *)this,
+			             lx_emul_usb_comp_struct, default_pid,
+			             "lxemul_usbcomp", Lx_kit::env().scheduler,
+			             Lx_kit::Task::NORMAL);
+		_connect_task = new (Lx_kit::env().heap)
+			Lx_kit::Task(lx_usb_connect_task, (void *)this,
+			             lx_emul_usb_conn_struct, default_pid+1,
+			             "lxemul_usbconn", Lx_kit::env().scheduler,
+			             Lx_kit::Task::NORMAL);
+	}
+
+	void send_completions();
+	void complete(Usb::Packet_descriptor & p) override;
+	int handle_connect(void *endpoint_buffer, int num_ep, bool connected);
+	int handle_connect_internal();
+	int usb_control_msg(unsigned int pipe, Genode::uint8_t request,
+	                    Genode::uint8_t requesttype, Genode::uint16_t value,
+	                    Genode::uint16_t index, void * data,
+	                    Genode::uint16_t size, int timeout);
+
+	int usb_submit_urb(unsigned int pipe, void * buffer, Genode::uint32_t buf_size, void * urb);
+	void usb_submit_queued_urb(Packet_descriptor &p, int ep_index);
+
+	Genode::size_t endpoint_desc_size()
+	{
+		return lx_usb_host_endpoint_size();
+	}
+};
+
+struct Genode::Wlan_usb
+{
+	/* Genode Environment etc. */
+	Env              & env;
+	Heap               heap { env.ram(), env.rm() };
+	Entrypoint       & ep { env.ep() };
+
+	/* jitterentropy */
+	struct rand_data * rnd_src { nullptr };
+
+	/* USB */
+	Signal_handler<Wlan_usb> state_change_dispatcher = {
+		ep, *this, &Wlan_usb::handle_state_change };
+
+	Allocator_avl          alloc_for_connection { &heap };
+	Usb::Connection        usb { env, &alloc_for_connection, "wifi",
+	                             4 * (1<<20), state_change_dispatcher };
+	Usb::Device            device { &heap, usb, ep };
+
+	Usb::Lx_wrapper        lx_usb_wrap { device, ep };
+
+	void handle_state_change();
+
+	Wlan_usb(Env &env) : env(env) {
+		Genode::Signal_transmitter
+			transmit_to_state_change_handler(state_change_dispatcher);
+		transmit_to_state_change_handler.submit();
+	}
+
+	Wlan_usb(Wlan_usb &) = delete;
+	Wlan_usb & operator=(Wlan_usb &) = delete;
+};
\ No newline at end of file
