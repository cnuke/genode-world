if {![have_board pc]} {
	puts "\nRun script is not supported on this platform.\n";
	exit 0
}

if {[get_cmd_switch --autopilot] && ![have_include "power_on/qemu"]} {
	puts "\nAutopilot run is not supported on this platform\n"
	exit 0
}

proc usb_device_label {} { return "usb-1-2" }

create_boot_directory
import_from_depot [depot_user]/src/[base_src] \
                  [depot_user]/pkg/test_usb_host_drv-[board] \
                  [depot_user]/src/report_rom \
                  [depot_user]/src/event_dump \
                  [depot_user]/src/init

build { drivers/usb_gamepad_input }

install_config {
<config verbose="yes">
	<parent-provides>
		<service name="ROM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>

	<default caps="100"/>

	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Timer"/> </provides>
	</start>

	<start name="report_rom">
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Report"/> <service name="ROM"/> </provides>
		<config verbose="yes">
			<default-policy report="usb_drv -> usb_drv -> devices"/>
		</config>
	</start>

	<start name="usb_drv" caps="1500" managing_system="yes">
		<binary name="init"/>
		<resource name="RAM" quantum="32M"/>
		<provides> <service name="Usb"/> </provides>
		<route>
			<service name="ROM" label="config">
				<parent label="drivers.config"/> </service>
			<service name="Report"> <child name="report_rom"/> </service>
			<service name="Timer">  <child name="timer"/> </service>
			<any-service> <parent/> </any-service>
		</route>
	</start>

	<start name="usb_gamepad_input_drv">
		<resource name="RAM" quantum="2M"/>
		<config/>
		<route>
			<service name="Event"> <child name="event_dump"/> </service>
			<service name="Usb"> <child name="usb_drv" label="} [usb_device_label] {"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>

	<start name="event_dump">
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Event"/> </provides>
		<route>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>
</config>}

#
# Define USB host controller config
#
# <default-policy vendor_id="0x045e" product_id="0x028e"/> <!-- MS Xbox 360 -->
# <default-policy vendor_id="0x045e" product_id="0x02d1"/> <!-- MS Xbox One -->
# <default-policy vendor_id="0x054c" product_id="0x0268"/> <!-- DS3 -->
# <default-policy vendor_id="0x054c" product_id="0x05c4"/> <!-- DS4 -->
# <default-policy vendor_id="0x0583" product_id="0x2060"/> <!-- SNES replica -->
# <default-policy vendor_id="0x0079" product_id="0x0006"/> <!-- N64 replica -->
#
set fd [open [run_dir]/genode/usb_host_drv.config w]
puts $fd { <config> <default-policy class="0xff"/> </config> }
close $fd

build_boot_image [build_artifacts]

set usb_raw_host_bus $::env(USB_RAW_HOST_BUS)
set usb_raw_host_addr $::env(USB_RAW_HOST_ADDR)

append qemu_args "  -nographic "
append qemu_args " -device qemu-xhci,id=xhci "
append qemu_args " -device usb-host,bus=xhci.0,hostbus=$usb_raw_host_bus,hostaddr=$usb_raw_host_addr "

run_genode_until forever
